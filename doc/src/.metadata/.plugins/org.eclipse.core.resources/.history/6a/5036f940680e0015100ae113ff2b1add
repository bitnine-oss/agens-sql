<!-- doc/src/sgml/recovery-config.sgml -->

<chapter id="recovery-config">
  <title>복구 환경설정</title>

  <indexterm>
   <primary>환경설정</primary>
   <secondary>복구</secondary>
   <tertiary>대기 서버 (standby server)</tertiary>
  </indexterm>

   <para>
    이 장에서는 <filename>recovery.conf</><indexterm><primary>recovery.conf</></>
        파일의 설정 방법에 대해서 설명한다.
        여기서 설명하는 모든 것은 복구 작업에서만 적용되는 부분이다.
        모든 설정은 복구 작업이 진행 된 뒤에는 변경해도 반영되지 않는다. 
        이 설정값들을 바꾸고, 그것이 적용되길 원한다면, 다시 처음부터 복구 작업을 해야한다.
   </para>

   <para>
     <filename>recovery.conf</> 파일에서 사용하는 구문은 
     <literal>설정항목 = '설정값'</> 형태로 한 줄에 하나씩 나열된다. 
         줄에 해시 기호(<literal>#</literal>)가 있으면, 그 뒤부터는 
         주석처리 된다.
         설정값 안에 작은 따옴표가 필요하면,  작은 따옴표 두 개(<literal>''</>)를 사용한다.
   </para>

   <para>
    미리 제공되는 샘플 파일은 데이터베이스 서버가 설치된 디렉토리
        안에 있는 <filename>share/recovery.conf.sample</> 파일이다.
   </para>

  <sect1 id="archive-recovery-settings">

    <title>아카이브 복구 설정</title>
     <variablelist>

     <varlistentry id="restore-command" xreflabel="restore_command">
      <term><varname>restore_command</varname> (<type>문자열</type>)</term>
      <indexterm>
        <primary><varname>restore_command</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            복구 과정에서 사용할 WAL 세그먼트 파일들을 서버에 적용시킬 시스템 명령이다.
                아카이브 모드 복구 작업을 하는 경우에 이 매개변수는 반드시 지정해야 한다.
                스트리밍 리플리케이션 대기 서버를 구축하는 경우라면, 이 설정이 꼭 필요한 것은 
                아니지만, 마스터 서버와의 통신이 끊겨서 수동으로 트랜잭션 로그를 반영해야하는 
                경우를 대비해서 설정해 두는 것이 좋다.
                <literal>%f</> 예약어는 적용 할 WAL 파일 이름으로,
                <literal>%p</> 예약어는 서버에서 사용할 WAL 파일 경로로 사용된다.
        (상대 경로를 사용하면, 서버를 실행하는 현재 디렉토리를 기준으로 
                처리된다.)
                <literal>%r</> 예약어는 마지막 실행 가능한 위치 정보를 나타내는 
                이름으로 처리된다. 
                <literal>%r</> 예약어는 warm-standby 설정에서만 사용된다.
        (<xref linkend="warm-standby"> 참조).
                <literal>%</> 문자를 사용하려면, <literal>%%</> 를 사용한다.
       </para>

       <para>
            여기서 중요한 사항은 여기서 지정한 작업이 성공했을 경우에는 
                반드시 그 명령의 리턴값이 0(zero)이어야 하며, 
                실패했을 경우에는 0이 아니여야한다.
                서버가 이 명령을 통해 보관하고 있지 않는 파일을 사용하려고 
                할 때, 이 명령은 반드시 리턴 값으로 0 아닌 값으로 종료되어야한다.
        다음은 일반적인 사례다:
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
</programlisting>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="archive-cleanup-command" xreflabel="archive_cleanup_command">
      <term><varname>archive_cleanup_command</varname> (<type>문자열</type>)</term>
      <indexterm>
        <primary><varname>archive_cleanup_command</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            이 설정은 선택 항목이다.
                여기서 지정한 명령은 warm-standby 서버가 중지 되었다가 
                다시 실행 될 때 사용된다.
                이미 대기 서버에 반영 되어 더 이상 쓸모 없는 WAL 세그먼트 파일들을 
                찾아서 지우는 일을 할 수 있도록 지정한다.
                이렇게 해서, 대기 서버가 빠르게 대기 상황이 될 수 있도록 한다.
                이 때 주의할 점은 대기 서버가 여러 대가 있을 경우, 
                그 서버들이 같은 백업 WAL 파일을 사용할 경우,
                이 명령이 실행되어 미처 반영되지 못한 파일이 지워지는 경우를 막아야한다.
                <literal>%r</> 예약어는 최종 반영된 위치로 처리된다.
                즉, <literal>%r</> 이름보다 이전 파일들은 지워도 되지만, 그 이후 파일들은 
                지우지 말아야한다.
                이 작업을 쉽게 하기 위해 이 설정값에는 일반적으로 
            pg archivecleanup 확장 모듈로 설치되는 명령을 사용한다.
                (이 명령은 파일을 지우는 작업을 하기 때문에 단독 대기 서버 환경일 경우에만 
                사용하는 것이 좋다.)
                사용법은 다음과 같다:
<programlisting>archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'</programlisting>
        다중 대기 서버 환경이라면, 이 WAL 정리 작업은 좀 더 복잡해지는데, 
                이 부분은 관리자에게 맡긴다.
                이 설정값은 warm-standby 서버 구축 환경에서만 사용된다.
        (<xref linkend="warm-standby"> 참조).
                <literal>%</> 문자를 사용하려면, <literal>%%</>를 사용한다.
       </para>
       <para>
            이 명령이 0 아닌 값을 리턴값으로 종료되면, 서버 로그에 WARNING으로 
                기록된다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-end-command" xreflabel="recovery_end_command">
      <term><varname>recovery_end_command</varname> (<type>문자열</type>)</term>
      <indexterm>
        <primary><varname>recovery_end_command</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            복구 작업이 완료되면 딱 한 번 여기서 지정한 명령이 실행된다.
                이 설정값도 선택적으로 지정할 수 있다. 
                여기서 지정한 명령은 아카이브 모드 백업을 이용한 운영 서버 복구 때나, 
                대기 서버가 운영 서버로 바뀌는 시점이나, 
                스트리밍 리플리케이션 서버에서 마스터 서버와의 스트리밍 통신이 끊겨, 
                백업 파일을 다시 참조해서 모두 반영 했는 경우에 실행된다.
        <literal>%r</> 예약어는 마지막 반영된 위치이다.
                이것은 archive-cleanup-command 명령에서 사용된다.
       </para>
       <para>
            이 작업이 0 아닌 값으로 종료되면, 데이터베이스 서버 로그에 WARNING 레벨로
                오류 메시지가 기록되며, 서버는 가동된다. 하지만, 
                이 작업 도중 명령어가 시그널을 받아서 종료되는 경우는 
                데이터베이스 서버는 가동 되지 않는다.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect1>

  <sect1 id="recovery-target-settings">

    <title>복구 시점 설정</title>
     <variablelist>
     <varlistentry id="recovery-target" xreflabel="recovery_target">
      <term><varname>recovery_target</varname><literal> = 'immediate'</literal>
      <indexterm>
        <primary><varname>recovery_target</> recovery parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        이 매개변수는 일관적인 상태가 되자마자 복구가 종료되도록 한다. 온라인 백업에서 복구하는 경우, 백업이 끝난 시점을 가리킨다.
       </para>
       <para>
        실질적으로, 이는 문자열 매개변수지만 <literal>'immediate'</>
        가 쓸 수 있는 유일한 값이다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-name" xreflabel="recovery_target_name">
      <term><varname>recovery_target_name</varname>
           (<type>문자열</type>)
      </term>
      <indexterm>
        <primary><varname>recovery_target_name</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            이 매개변수는 특정 복구 위치를 이름으로 지정한다.
                그 이름은 <function>pg_create_restore_point()</> 함수에서 
                지정한 이름이다. 
                대개  <varname>recovery_target_name</> 값이나, 
                recovery target time, recovery target xid
                값 가운데 하나를 지정한다. 
                이 값을 지정하지 않으면, 복구할 WAL 파일의 마지막까지 복구한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname>
           (<type>timestamp</type>)
      </term>
      <indexterm>
        <primary><varname>recovery_target_time</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            이 매개변수는 특정 시점을 시간으로 지정한다.
                대개 <varname>recovery_target_time</> 값이나, 
                recovery-target-name, recovery-target-xid
                값 가운데 하나를 지정한다.
                이 값을 지정하지 않으면, 복구할 WAL 파일의 마지막까지 복구한다.
                또한 recovery-target-inclusive 값에 영향을 받아서
                정확한 중지 위치가 결정되기도 한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>문자열</type>)</term>
      <indexterm>
        <primary><varname>recovery_target_xid</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            이 매개변수는 특정 트랜잭션 ID로 지정한다.
                지정한 이 트랜잭션 ID까지 복구 작업을 한다.
                트랜잭션 ID는 복구 서버의 마지막부터 차례대로 진행되기 때문에, 
                결과적으로 백업의 트랜잭션 ID와 복구 서버의 트랜잭션 ID가 같지 
                않을 수 있음을 기억 해야한다.
                복구되는 트랜잭션은 지정한 트랜잭션 이전에 커밋된 모든 트랜잭션들이다.
                (선택적으로 지정한 트랜잭션도 포함될 수 있다.)
        대개 <varname>recovery_target_xid</> 값이나,
        recovery target name,
        recovery target time 값 가운데 하나를 지정한다.
        이 값을 지정하지 않으며, 복구할 WAL 파일의 마지막 트랜잭션까지 복구한다.
                또한 recovery target inclusive 값에 영향을 받아서
                정확한 중지 위치가 결정되기도 한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-inclusive"
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname>
        (<type>boolean</type>)
      </term>
      <indexterm>
        <primary><varname>recovery_target_inclusive</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            위에서 지정한 지점을 포함해서 복구 할 것인지, 
                포함하지 않고 복구 할 것인지를 결정한다.
                기본값은 <literal>true</>이다.
                <literal>false</literal>로 지정하면, 특정 지점(트랜잭션 ID나, 시간) 전까지만
                복구를 하고 복구 작업을 중지한다.
                이 값은 recovery target time, recovery target xid
                설정값의 작동에 영향을 준다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-timeline"
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname>
        (<type>문자열</type>)
      </term>
      <indexterm>
        <primary><varname>recovery_target_timeline</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            특정 타임라인 번호를 지정한다.
                이 값을 지정하지 않으면, 베이스 백업에서 사용한 타임라인의 다음 타임라인
                번호가 사용된다. 이 번호는 백업된 WAL 세그먼트 파일을 모아둔 디렉토리 안에 
                타임라인 이력 파일(일반적으로 0000000n.history 형태의 파일이다. 이 앞부분 숫자가
                타임라인 번호다.)들 가운데 하나의 번호를 선택한다.
        타임라인은 복구를 하고, 운영 되었다가 같은 베이스 백업 기반으로 다시 복구를 해서, 
                여러 타임라인이 생겼을 경우 특정 타임라인으로 복구 할 때 유용하게 사용된다.
                자세한 이야기는 <xref linkend="backup-timelines">을 참조하라.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="pause-at-recovery-target"
                   xreflabel="pause_at_recovery_target">
      <term><varname>pause_at_recovery_target</varname>
        (<type>boolean</type>)
      </term>
      <indexterm>
        <primary><varname>pause_at_recovery_target</> 복구 매개변수</primary>
      </indexterm>
      <listitem>
       <para>
            리플리케이션 대기 서버 환경에서, 마지막 복구를 한 상태가 되면, 
                복구 작업을 멈추고 대기할 것인지, .....
                기본값은 <literal>true</>이다.
                이 설정은 복구 작업을 마지막까지 했을 때, 그 위치가 원하는 
                위치인지 확인 할 수 있는 쿼리를 실행할 수 있는지를 결정한다.
                임시 중지 상태라면, <function>pg_xlog_replay_resume()</> 함수를 
                이용해서, 복구 작업을 이어서 다시 할 수 있다.
                복구 작업을 하다가 원하는 마지막 위치에서 멈출 수 없으면, 
                데이터베이스는 중지된다. 이 경우에는 복구 타켓을 마지막으로 
                바꾸고, 서버를 재실행 해서 복구 작업을 계속 해야한다.
        (이 문단은 개념 정리가 안되고 있음. :()
       </para>
       <para>
            이 설정은 hot-standby 활성 상태에서만 사용할 수 있으며, 
                복구 타켓이 지정되어 있어야만 적용된다.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

  <sect1 id="standby-settings">

    <title>대기 서버 설정</title>
     <variablelist>

       <varlistentry id="standby-mode" xreflabel="standby_mode">
        <term><varname>standby_mode</varname> (<type>boolean</type>)</term>
        <indexterm>
          <primary><varname>standby_mode</> 복구 매개변수</primary>
        </indexterm>
        <listitem>
         <para>
                  <productname>Agens SQL</> 서버를 대기 전용(standby) 서버로 
                  운영 하고자 할 때, 이 값을 <literal>on</>으로 설정한다.
                  이렇게 하면, 복구할 WAL 파일을 모두 서버에 적용하고 나서,
                  <varname>primary_conninfo</> 접속 정보로 운영 서버로 접속해서, 
                  운영 서버에서 반영된 트랜잭션을 대기 서버에도 그대로 
                  반영한다. 운영 서버와의 접속이 끊기면, 다시, <varname>restore_command</>
                  설정에 지정한 명령을 이용해서, 다시 대기 서버 쪽에 있는 
                  WAL 파일들을 반영한다. 이런 작업을 반복해서, 
                  운영 서버의 대기 서버로 운영할 수 있다.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="primary-conninfo" xreflabel="primary_conninfo">
        <term><varname>primary_conninfo</varname> (<type>문자열</type>)</term>
        <indexterm>
          <primary><varname>primary_conninfo</> 복구 매개변수</primary>
        </indexterm>
        <listitem>
         <para>
                  운영 서버(primary server, master server)의 접속 정보. 
                  여기서 사용할 수 있는 접속 환경은 표준 접속 방식과 동일하므로, 
                  접속에 관련된 모든 환경 변수들을 
                  그대로 사용할 수 있다. 사용 우선 순위도 동일하다. 환경 변수가 지정되어 있고, 
                  이 문자열에 지정되어 있지 않으면, 환경 변수 값을, 이 문자열로 지정했으면, 
                  환경 변수를 무시하고, 이 문자열 값을 사용한다.
         </para>
         <para>
                  윗 <varname>standby_mode</varname> 설정값을 <literal>on</>으로 
                  설정했다면, 이 접속 정보 문자열에는  최소한 운영 서버의 호스트 이름(또는 주소)는 지정해야한다.
          포트가 기본값이라면, 생략해도 된다.
                  접속하려는 사용자가 계정은 운영 서버에 있어야하며, 해당 계정이 운영 서버로 접속해서 
                  복제 작업을 할 수 있는 권한이 있어야한다.  
                  (<xref linkend="streaming-replication-authentication"> 참조)
                  비밀번호 인증이 필요하다면, <varname>primary_conninfo</varname> 문자열에 지정하든가, 
                  대기 서버의 <filename>~/.pgpass</> 파일에 데이터베이스 이름을 
                  <literal>replication</>으로 지정하고, 비밀번호를 등록해서 사용한다.
          <varname>primary_conninfo</varname> 설정값에는 접속할 데이터베이스 이름은 지정하지 않는다.
         </para>
         <para>
          <varname>standby_mode</> 설정값이 <literal>off</> 상태면, 이 설정은 무시된다.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="trigger-file" xreflabel="trigger_file">
        <term><varname>trigger_file</varname> (<type>문자열</type>)</term>
        <indexterm>
          <primary><varname>trigger_file</> 복구 매개변수</primary>
        </indexterm>
        <listitem>
         <para>
                  대기 상태가 끝났음을 알리는 파일 이름을 지정한다.
                  이 파일이 있으면, 대기 모드 상태를 끝내고, 독립 운영 서버로 실행환경을 바꾼다.
                  이 파일 이름을 지정하지 않으면, <command>pg_ctl promote</> 명령으로 
                  대기 모드를 끝낼 수 있다.
                  <varname>standby_mode</> 설정값이  <literal>off</> 상태면, 이 설정은 무시된다.
         </para>
        </listitem>
       </varlistentry>

     <varlistentry id="recovery-min-apply-delay" xreflabel="recovery_min_apply_delay">
      <term><varname>recovery_min_apply_delay</varname> (<type>integer</type>)
      <indexterm>
        <primary><varname>recovery_min_apply_delay</> recovery parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        기본적으로 대기 서버는 운영서버의 WAL 레코드를 최대한 빠르게 복원한다. 
        지연된 데이터 사본을 이용해 데이터 손실 에러를 다양한 방식으로 해결할 수 있다. 
        이 매개변수는 지정된 시간만큼 복구를 지연하게 하고, 시간 단위는 기본적으로 밀리 세컨드이다. 
        예를 들어 매개변수를 <literal>5min</literal>으로 지정하면, 대기 서버는 시스템 시각이 적어도 마스터 서버에 보고된 
        커밋 시간보다 5분 지났을 때 각 트랜잭션 커밋을 리플레이 한다. 
       </para>
       <para>
        서버 간 리플리케이션 지연이 이 매개변수의 값을 초과할 수도 있다. 
        지연 시간은 마스터 서버에 쓰인 WAL timestamp와 현재 대기 서버의 시간 차이를 뜻한다. 
        네트워크나 지속적인 리플리케이션 설정으로 인한 전송 상의 지연 시간은 실제 대기 시간을 대폭 줄여 준다. 
        마스터 서버와 대기 서버간 시스템 시간이 동기화되지 않으면 예상보다 일찍 레코드를 복구할 수 있다. 
        서버간 시간 편차를 이용하는 것보다 매개변수를 잘 설정하는 것이 더 유용하다. 
        마스터 서버와 대기 서버의 타임존은 다르게 설정해야 한다.
       </para>
       <para>
        지연은 COMMIT과 복원 시점인 WAL 레코드에서만 발생한다. 
        다른 레코드들은 지정한 지연 시간보다 일찍 리플레이 되는데, 복구 충돌이 더 자주 발생할 가능성도 있지만 
        MVCC에서는 큰 문제가 되지 않는다.
       </para>
       <para>
        지연은 대기 서버가 promote되거나 trigger될 때까지 발생한다. 
        그리고 나서 대기 서버는 대기하는 것을 멈추고 복구를 종료한다.
       </para>
       <para>
        이 매개변수는 스트리밍 리플리케이션 배치 용도로 만들어졌지만, 모든 경우에 적용된다. 
        동기적인 리플리케이션은 영향을 받지 않는데, 트랜잭션 커밋을 동기적으로 요청하는 설정이 없기 때문이다. 
        <varname>hot_standby_feedback</>은 이 기능을 사용하면 지연되어 마스터 서버에 과부하가 걸릴 수 있으므로 
        두 매개변수를 적절히 사용해야 한다.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
   </sect1>

</chapter>

