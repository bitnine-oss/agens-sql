<chapter id="plproxy">
 <title>PL/Proxy</title>
 <para>
     <productname>PL/Proxy</productname>는 proxy function을 만들어 원격 DB에 대한 접근 및 이를 활용한 기타 다양한 작업들을 가능케 하여 주는 모듈이다. 본 장에서는 <productname>Agens SQL</productname>에서 <productname>PL/Proxy</productname>를 사용함에 있어 필요한 초기 설정과 간단한 사용 예제를 살펴보도록 한다.
     <productname>PL/Proxy</productname>에 대한 자세한 정보 및 다양한 사용 방법은 <ulink url="http://plproxy.projects.pgfoundry.org/doc"> http://plproxy.projects.pgfoundry.org/doc</ulink>를 참고하기 바란다.
 </para>
 <sect1 id="plproxy-configuration">
     <title>설정</title>
     <para><productname>PL/Proxy</productname>를 사용하기 위해서는 <productname>Agens SQL</productname>설치 디렉토리에서 <filename>/pgsql/share/extension/</filename> 혹은 <filename>/pgsql/share/contrib/</filename> 내의 plproxy.sql 파일을 구동시켜야 한다. 해당 파일은 <filename>plproxy--버전명.sql</filename>형식의 이름을 갖고 있다. 본 예에서는 파일명을 <filename>plproxy.sql</filename>이라 가정하고 <productname>PL/Proxy</productname> 사용하기 위한 환경 설정에 대해서 알아본다.
     </para>
     <orderedlist>
     <listitem>
     <para>
     <productname>psql</productname>을 통해 <productname>PL/Proxy</productname>를 이용할 DB를 대상으로 <filename>plproxy.sql</filename> 파일을 superuser 권한으로 다음과 같이 수행한다.(예: agens라는 superuser로 proxy_database에서 <productname>PL/Proxy</productname>를 사용 가능하도록 명령)
     </para>
<screen><computeroutput>
<prompt>[agens@localhost extension]$</prompt> <userinput>psql -U agens proxy_database -f plproxy.sql</userinput>
CREATE FUNCTION
CREATE LANGUAGE
CREATE FUNCTION
CREATE FOREIGN DATA WRAPPER
<prompt>[agens@localhost extension]$</prompt>
</computeroutput></screen>
     </listitem>
     <listitem>
         <para>일반 유저가 특정언어를 이용한 함수를 작성하기 위해서는 해당 언어 사용에 대한 권한을 부여받아야 한다. 하지만 <productname>Agens SQL</productname>은 신뢰성을 부여받지 못한 언어에 대해서는 superuser만 사용할 수 있도록 권한을 부여하기 때문에 일반 유저가 특정 언어(여기에서는 plproxy)의 사용 권한을 부여받기 위해서는 해당언어에 신뢰성을 먼저 부여하여야 한다. 다음은 pg_language 카탈로그에서 plproxy 언어의 신뢰성을 부여하고 사용권한을 kim이라는 유저에게 부여하는 예제이다.</para>
<screen>
<prompt>[agens@localhost extension]$</prompt> <userinput>psql -U postgres proxy_database;</userinput>
psql (9.4.2)
Type "help" for help.

<prompt>proxy_database=#</prompt> <userinput>select * from pg_language;</userinput>
 lanname  | lanowner | lanispl | lanpltrusted | lanplcallfoid | laninline | lanvalidator | lanacl 
----------+----------+---------+--------------+---------------+-----------+--------------+--------
 internal |       10 | f       | f            |             0 |         0 |         2246 | 
 c        |       10 | f       | f            |             0 |         0 |         2247 | 
 sql      |       10 | f       | t            |             0 |         0 |         2248 | 
 plpgsql  |       10 | t       | t            |         12777 |     12778 |        12779 | 
 plproxy  |       10 | t       | f            |         16452 |         0 |            0 | 
(5 rows)

<prompt>proxy_database=#</prompt> <userinput>update pg_language set lanpltrusted = 't' where lanname = 'plproxy';     -- plproxy에 신뢰성 부여</userinput>
UPDATE 1
<prompt>proxy_database=#</prompt> <userinput>grant usage on language plproxy to kim;       -- kim에게 plproxy 사용 권한 부여</userinput>
GRANT
<prompt>proxy_database=#</prompt> <userinput>select * from pg_language;</userinput>
 lanname  | lanowner | lanispl | lanpltrusted | lanplcallfoid | laninline | lanvalidator |                      lanacl                      
----------+----------+---------+--------------+---------------+-----------+--------------+--------------------------------------------------
 internal |       10 | f       | f            |             0 |         0 |         2246 | 
 c        |       10 | f       | f            |             0 |         0 |         2247 | 
 sql      |       10 | f       | t            |             0 |         0 |         2248 | 
 plpgsql  |       10 | t       | t            |         12777 |     12778 |        12779 | 
 plproxy  |       10 | t       | t            |         16452 |         0 |            0 | {=U/postgres,postgres=U/postgres,kim=U/postgres}
(5 rows)

<prompt>proxy_database=#</prompt>
</screen>
     </listitem>
     <listitem>
         <para>이제 kim이라는 유저는 proxy_database에서 <productname>PL/Proxy</productname>를 이용한 함수를 작성할 수 있다.</para>
     </listitem>
</orderedlist>
 </sect1>
 <sect1 id="plproxy-quickstart">
 <title>Quick Start</title>
 <para>간단한 <productname>PL/Proxy</productname>의 사용예를 살펴보도록 하겠다.
 본 예제는 proxy_database라는 이름의 데이터가 없고 원격 DB에 접근할 수 있는 proxy function(function명 get_user_email)만을 지닌 DB에서 part00이라는 실제 데이터(name, email 칼럼을 지닌 users라는 테이블)를 지닌 DB에 접근하여 데이터(email)를 가져오는 시나리오이다. 이때 part00 DB의 users 테이블의 소유자는 kim이고 proxy_database의 get_user_email 함수의 소유자 역시 kim이다. 만약 proxy database의 함수생성 유저와 원격 DB의 테이블 유저가 다를 경우 접근 권한 오류가 생긴다.</para>
 <screenshot>
     <screeninfo>PL/Proxy example</screeninfo>
     <graphic fileref="images/plproxy_example.png">
 </screenshot>
 <orderedlist>
     <listitem>
        <para>먼저 proxy_database와 part00 DB의 테이블 및 데이터 정보를 확인한다. proxy_database에는 아무런 테이블도 존재하지 않고 part00에는 kim이 소유자인 users 테이블이 존재한다.</para>
<screen>
<computeroutput>
<prompt>[agens@localhost extension]$</prompt> <userinput>psql -U kim proxy_database;</userinput>
psql (9.4.2)
Type "help" for help.

<prompt>proxy_database=></prompt> <userinput>\dt       -- proxy_database에 존재하는 table 확인</userinput>
No relations found.
<prompt>proxy_database=></prompt> <userinput>\c part00       -- part00 DB에 연결</userinput>
You are now connected to database "part00" as user "kim".
<prompt>part00=></prompt> <userinput>select * from users;        -- users 테이블의 데이터 확인</userinput>
 name |        email         
------+----------------------
 kim  | khkim@bitnine.co.kr
 jang | ksjang@bitnine.co.kr
 jeon | hcjeon@bitnine.co.kr
(3 rows)

<prompt>part00=></prompt>
</computeroutput>
</screen>
     </listitem>
     <listitem>
         <para>proxy_database에 접속하여 이름을 입력하면 part00의 users 테이블에서 입력된 이름에 맞는 이메일 주소를 가져오는 함수 get_user_email을 plproxy를 사용하여 만든다.</para>
<screen>
<computeroutput>
<prompt>part00=></prompt> <userinput>\c proxy_database</userinput>
You are now connected to database "proxy_database" as user "kim".
<prompt>proxy_database=></prompt> <userinput>CREATE FUNCTION get_user_email(i_username text)
proxy_database-> RETURNS SETOF text AS $$
proxy_database$>     CONNECT 'dbname=part00';
proxy_database$>     SELECT email FROM users WHERE name = $1;
proxy_database$> $$ LANGUAGE plproxy;</userinput>
CREATE FUNCTION
<prompt>proxy_database=></prompt>
</computeroutput>
</screen>
     </listitem>
     <listitem>
     <para>get_user_email을 통해 'kim'의 이메일을 part00의 users테이블에서 불러온다.</para>
<screen>
<computeroutput>
<prompt>proxy_database=></prompt> <userinput>select * from get_user_email('kim');</userinput>
   get_user_email    
---------------------
 khkim@bitnine.co.kr
(1 row)

<prompt>proxy_database=></prompt>
</computeroutput>
</screen>
     </listitem>
 </orderedlist>
 </sect1>
</chapter>
