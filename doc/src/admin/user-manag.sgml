<!-- doc/src/sgml/user-manag.sgml -->

<chapter id="user-manag">
 <title>데이터베이스 role</title>

 <para>
  <productname>Agens SQL</productname>은 <firstterm>role</>이라는 개념을 사용하여 데이터베이스 액세스 권한을 관리한다. 
  role은 데이터베이스가 설정된 방법에 따라 데이터베이스 사용자 또는 데이터베이스 사용자 그룹으로 생각할 수 있다. 
  role은 데이터베이스 개체(예: 테이블)를 소유할 수 있으며 해당 개체에 대한 권한을 다른 role에 할당하여 해당 개체에 액세스할 수 있는 사용자를 제어할 수 있다. 
  또한, role의 <firstterm>멤버십</>을 다른 role에 부여할 수 있으므로 멤버 role이 다른 role에 할당된 권한을 사용하도록 할 수 있다.
 </para>

 <para>
  role의 개념은 <quote>사용자</quote> 및 <quote>그룹</quote>의 개념을 포함한다. 
  <productname>PostgreSQL</productname> 8.1 이전 버전에서 사용자와 그룹은 별개의 엔티티였지만 이제는 role만 있다. 
  모든 role은 사용자, 그룹 또는 양쪽 모두로 작용할 수 있다.
 </para>

 <para>
  이 장에서는 role을 생성 및 관리하는 방법을 설명한다. 
 </para>

 <sect1 id="database-roles">
  <title>데이터베이스 role</title>

  <indexterm zone="database-roles">
   <primary>role</primary>
  </indexterm>

  <indexterm zone="database-roles">
   <primary>사용자</primary>
  </indexterm>

  <indexterm>
   <primary>CREATE ROLE</primary>
  </indexterm>

  <indexterm>
   <primary>DROP ROLE</primary>
  </indexterm>

  <para>
   데이터베이스 role은 개념상 운영 체제 사용자와 완전히 다르다. 
   사실, 대응 관계를 유지하는 것이 편리할 수 있지만, 그럴 필요는 없다. 
   데이터베이스 role은 데이터베이스 클러스터 설치 간에 전역적이다(데이터베이스에 개별적이지 않음). 
   role을 생성하려면 CREATE ROLE SQL 명령을 사용해야 한다.
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   <replaceable>name</replaceable>은 SQL 식별자에 대한 규칙(특수 문자 또는 큰따옴표 사용 안함)을 준수한다. 
   (실제로는 <literal>LOGIN</> 같은 옵션을 명령에 추가하고 싶을 수도 있다. 자세한 내용이 아래에 나와 있다.) 
   기존 role을 삭제하려면 유사한 DROP ROLE 명령을 사용해야 한다.
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
  </para>

  <indexterm>
   <primary>createuser</primary>
  </indexterm>

  <indexterm>
   <primary>dropuser</primary>
  </indexterm>

  <para>
   편의상, 프로그램 createuser 및 dropuser는 쉘 명령줄에서 호출할 수 있는 이러한 SQL 명령의 래퍼(wrapper)로 제공된다.
<synopsis>
createuser <replaceable>name</replaceable>
dropuser <replaceable>name</replaceable>
</synopsis>
  </para>

  <para>
   기존 role 집합을 판단하려면 <structname>pg_roles</> 시스템 카탈로그를 검사해야 한다. 
   예를 들면,
<synopsis>
SELECT rolname FROM pg_roles;
</synopsis>
   psql 프로그램의 <literal>\du</> 메타 명령도 기존 role을 나열할 때 유용하다.
  </para>

  <para>
   데이터베이스 시스템을 부트스트랩하려면 갓 초기화된 시스템이 사전 정의된 role을 항상 포함해야 한다. 
   이 role은 항상 <quote>수퍼유저</quote>이며, 기본적으로(<command>initdb</command> 실행 중에 변경하지 않는 한) 데이터베이스 클러스터를 초기화했던 운영 체제와 이름이 동일하다. 
   통상적으로 이 role의 이름은 <literal>postgres</literal>이다. role을 좀 더 생성하려면 먼저 이 postgres로 연결해야 한다.
  </para>

  <para>
   데이터베이스 서버에 대한 모든 연결은 일부 특정 role의 이름이 사용되며, 이러한 role은 해당 연결에서 실행된 명령에 대한 초기 액세스 권한을 결정한다. 
   특정 데이터베이스 연결에 사용할 role 이름은 애플리케이션 특정 방식의 연결 요청을 초기화하는 클라이언트에 의해 표시된다. 
   예를 들면, <command>psql</command> 프로그램은 <option>-U</option> 옵션을 사용하여 연결할 role을 표시한다. 
   다수의 애플리케이션이 기본적으로 현재 운영 체제 시스템 사용자의 이름을 가정한다(<command>createuser</> 및 <command>psql</> 포함). 
   따라서 role 및 운영 체제 사용자 간에 네이밍 연관성을 유지하는 것이 편리하다.
  </para>

  <para>
   주어진 클라이언트 연결을 할 수 있는 데이터베이스 role 집합은 <xref linkend="client-authentication">에서 설명된 대로 클라이언트 인증 설정에 의해 결정된다. 
   (따라서, 로그인 이름이 꼭 그 사람의 실명과 일치해야 할 필요가 없는 것처럼, 클라이언트를 운영 체제 사용자와 일치하는 role로 연결해야만 하는 것은 아니다.) 
   role ID는 연결된 클라이언트에서 가능한 권한 집합을 결정하므로 다중 사용자 환경을 설정할 때 권한을 세심하게 구성하는 것이 중요하다.
  </para>
 </sect1>

 <sect1 id="role-attributes">
  <title>role 속성</title>

   <para>
    데이터베이스 role은 권한을 정의하는 속성이 다수 있으며, 클라이언트 인증 시스템과 인터랙션한다.
    <variablelist>
     <varlistentry>
      <term>로그인 권한<indexterm><primary>로그인 권한</></></term>
      <listitem>
       <para>
        데이터베이스 연결을 위한 초기 role 이름으로 <literal>LOGIN</> 속성이 있는 role만 사용할 수 있다. 
        <literal>LOGIN</> 속성이 있는 role은 <quote>데이터베이스 사용자</>와 동일한 것으로 간주될 수 있다. 
        로그인 권한이 있는 role을 생성하려면 다음 중 하나를 사용해야 한다.
<programlisting>
CREATE ROLE <replaceable>name</replaceable> LOGIN;
CREATE USER <replaceable>name</replaceable>;
</programlisting>
        (<command>CREATE USER</>는 디폴트로 <literal>LOGIN</> 권한을 준다는 점에서 <command>CREATE ROLE</>과 다르다.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>수퍼유저 상태<indexterm><primary>수퍼유저</></></term>
      <listitem>
       <para>
        데이터베이스 수퍼유저는 로그인 권한을 제외한 모든 권한 검사를 건너 뛴다. 
        이 권한은 위험하며, 무심코 사용해서는 안 된다. 작업 대부분은 수퍼유저 이외의 다른 role로 수행하는 것이 좋다. 
        새 데이터베이스 수퍼유저를 생성하려면 <literal>CREATE
        ROLE <replaceable>name</replaceable> SUPERUSER</literal>를 사용해야 한다. 수퍼유저인 role로 이것을 수행해야 한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>데이터베이스 생성<indexterm><primary>데이터베이스</><secondary>생성 권한</></></term>
      <listitem>
       <para>
        데이터베이스를 생성하려면 권한이 명시적으로 role에 주어져야 한다(모든 권한 검사를 건너 뛰는 수퍼유저인 경우 제외). 
        이러한 role을 생성하려면 <literal>CREATE ROLE
        <replaceable>name</replaceable> CREATEDB</literal>를 사용해야 한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>role 생성<indexterm><primary>role</><secondary>생성 권한</></></term>
      <listitem>
       <para>
        role을 추가적으로 생성하려면 권한이 명시적으로 role에 주어져야 한다(모든 권한 검사를 건너 뛰는 수퍼유저인 경우 제외). 
        이러한 role을 생성하려면 <literal>CREATE ROLE
        <replaceable>name</replaceable> CREATEROLE</literal>을 사용해야 한다. 
        <literal>CREATEROLE</> 권한이 있는 role은 다른 role을 변경 및 삭제할 수 있으며, 멤버십을 부여 또는 취소할 수도 있다. 
        단, 수퍼유저 role의 멤버십을 생성, 변경(alter), 삭제 또는 변경(change)하려면 수퍼유저 상태가 필요하다. <literal>CREATEROLE</>로는 부족하다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>복제 초기화<indexterm><primary>role</><secondary>복제 초기화 권한</></></term>
      <listitem>
       <para>
        streaming replication을 초기화하려면 권한이 명시적으로 role에 주어져야 한다(모든 권한 검사를 건너 뛰는 수퍼유저인 경우 제외). 
        streaming replication에 사용되는 role은 항상 <literal>LOGIN</> 권한이 있어야 한다. 
        이러한 role을 생성하려면 <literal>CREATE ROLE <replaceable>name</replaceable> REPLICATION
        LOGIN</literal>을 사용해야 한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>패스워드<indexterm><primary>패스워드</></></term>
      <listitem>
       <para>
        패스워드는 데이터베이스에 연결할 때 사용자가 패스워드를 입력해야 하는 클라이언트 인증 방법인 경우에만 중요하다. 
        <option>password</> 및 <option>md5</> 인증 방법은 패스워드를 이용한다. 데이터베이스 패스워드는 운영 체제 사용자 패스워드와 구분된다. 
        role 생성 시 패스워드 지정은 <literal>CREATE ROLE
        <replaceable>name</replaceable> PASSWORD '<replaceable>string</>'</literal>을 사용해야 한다.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    role의 속성은 <command>ALTER ROLE</command><indexterm><primary>ALTER ROLE</></>로 생성한 후 수정할 수 있다. 
    자세한 내용은 CREATE ROLE 및 ALTER ROLE 명령에 대한 참고 페이지를 참조 바란다.
   </para>

  <tip>
   <para>
    수퍼유저는 아니지만 <literal>CREATEDB</> 및 <literal>CREATEROLE</> 권한이 있는 role을 생성하고, 데이터베이스와 role의 모든 루틴 관리에 대해 이 role을 사용하는 것이 좋다. 
    이러한 방법으로 실제로 수퍼유저 권한이 불필요한 작업을 수퍼유저로 실행하는 위험이 방지된다.
   </para>
  </tip>

  <para>
   role은 <xref
   linkend="runtime-config">에 설명된 여러 가지 런타임 구성 설정에 대해 role별 기본값을 가질 수도 있다. 
   예를 들면, 연결할 때 인덱스 스캔을 비활성화하려면, 다음과 같이 할 수 있다.
<programlisting>
ALTER ROLE myname SET enable_indexscan TO off;
</programlisting>
   이것은 설정을 저장한다(그러나 즉시 설정되지는 않음). 
   <literal>SET enable_indexscan TO off</literal>가 세션 시작 직전에 실행되었더라도 추후 이 role이 연결할 때 이것이 나타난다. 
   세션 중에 이 설정을 변경할 수 있으며, 이것은 기본값에 불과하다. role별 기본 설정을 삭제하려면 <literal>ALTER ROLE <replaceable>rolename</> RESET <replaceable>varname</></literal>을 사용해야 한다. 
   <literal>LOGIN</> 권한 없이 role에 연결된 role별 기본값은 절대 호출되지 않으므로 아무 쓸모가 없다는 점에 유의해야 한다.
  </para>
 </sect1>

 <sect1 id="role-membership">
  <title>role 멤버십</title>

  <indexterm zone="role-membership">
   <primary>role</><secondary>멤버십 in</>
  </indexterm>

  <para>
   권한 관리의 편의상 사용자를 그룹으로 묶는 것이 편리할 수 있다. 이렇게 하면 권한을 그룹 단위로 부여하거나 취소할 수 있다. 
   <productname>Agens SQL</productname>에서 이것은 그룹을 나타내는 role을 생성한 다음, 그룹 role의 <firstterm>멤버십</>을 개별 사용자 role에 부여하면 된다.
  </para>

  <para>
   그룹 role을 설정하려면 먼저 role을 생성해야 한다.
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   일반적으로 그룹으로 사용되는 role은 <literal>LOGIN</> 속성이 없으며, 원하면 설정은 할 수 있다.
  </para>

  <para>
   그룹 role이 존재하는 경우 GRANT 및 REVOKE 명령을 사용하여 멤버를 추가 및 삭제할 수 있다.
<synopsis>
GRANT <replaceable>group_role</replaceable> TO <replaceable>role1</replaceable>, ... ;
REVOKE <replaceable>group_role</replaceable> FROM <replaceable>role1</replaceable>, ... ;
</synopsis>
   다른 그룹 role에도 멤버십을 부여할 수 있다(그룹 role과 비 그룹 role 사이에 실제로는 구분이 없음). 
   데이터베이스는 순환식 멤버십 루프의 설정을 허용하지 않는다. 또한, role의 멤버십을 <literal>PUBLIC</literal>에 부여하는 것도 허용하지 않는다.
  </para>

  <para>
   그룹 role의 멤버는 두 가지 방법으로 role의 권한을 사용할 수 있다. 첫째, 그룹의 모든 멤버는 명시적으로 SET ROLE을 수행하여 일시적으로 그룹 role이 <quote>된다</quote>. 
   이 상태에서 데이터베이스 세션은 원래의 로그인 role이 아닌 그룹 role에 대한 액세스 권한을 가지며, 생성된 데이터베이스 개체는 로그인 role이 아닌 그룹 role이 소유하는 것으로 간주된다. 
   둘째, <literal>INHERIT</> 속성이 있는 멤버 role은 해당 role에서 상속된 모든 권한을 비롯하여 멤버로서 role의 권한을 자동으로 갖는다. 예를 들면, 다음을 실행했다고 가정하자.
<programlisting>
CREATE ROLE joe LOGIN INHERIT;
CREATE ROLE admin NOINHERIT;
CREATE ROLE wheel NOINHERIT;
GRANT admin TO joe;
GRANT wheel TO admin;
</programlisting>
   <literal>joe</> role로 연결한 직후에 데이터베이스 세션은 <literal>joe</>에 직접 부여된 권한 외에도, <literal>joe</>는 <literal>admin</>의 권한을 <quote>상속 받기</> 때문에 <literal>admin</>에 부여된 권한도 사용한다. 
   그러나, <literal>joe</>가 간접적으로 <literal>wheel</>의 멤버지만 이 멤버십은 <literal>NOINHERIT</> 속성을 갖는 <literal>admin</>을 통한 것이므로 wheel에 부여된 권한은 사용할 수 없다. 다음 명령을 실행한 후,
<programlisting>
SET ROLE admin;
</programlisting>
   세션은 <literal>admin</>에 부여된 이러한 권한만 사용하고 <literal>joe</>에 부여된 권한은 사용하지 않는다. 다음 명령을 실행한 후,
<programlisting>
SET ROLE wheel;
</programlisting>
   세션은 <literal>wheel</>에 부여된 이러한 권한만 사용하고 <literal>joe</> 또는 <literal>admin</>에 부여된 권한은 사용하지 않는다. 
   원래의 권한 상태는 다음 중 하나를 사용하면 복원된다.
<programlisting>
SET ROLE joe;
SET ROLE NONE;
RESET ROLE;
</programlisting>
  </para>

  <note>
   <para>
    <command>SET ROLE</> 명령은 원래 로그인 role이 직간접적으로 멤버인 모든 role을 선택할 수 있도록 항상 허용한다. 
    따라서 위의 예시에서, <literal>wheel</>이 되기 전에 꼭 <literal>admin</>이어야 할 필요는 없다.
   </para>
  </note>

  <note>
   <para>
    SQL 표준에서 사용자와 role은 명확히 구분되며, role은 권한을 자동으로 상속 받지만, 사용자는 그렇지 않다. 
    이는 SQL 사용자로서 사용되는 role에게는 NOINHERIT 속성을 부여하고, SQL role로 사용되는 role에게는 <literal>INHERIT</> 속성을 부여한다. 
    그러나, 사용자에게 항상 멤버인 그룹에 부여된 권한이 있는 8.1 릴리스 이전 버전과의 호환성 때문에 <productname>Agens SQL</productname>은 기본적으로 모든 role에 <literal>INHERIT</> 속성을 부여한다.
   </para>
  </note>

  <para>
   role 속성 <literal>LOGIN</> 및 <literal>SUPERUSER</>,
   <literal>CREATEDB</>, <literal>CREATEROLE</>은 특수한 권한으로 생각될 수 있지만 데이터베이스 개체의 일상적인 권한으로 상속되지 않는다. 
   속성을 사용하려면 이러한 속성 중 하나를 보유한 특정 role에 실제로 <command>SET ROLE</>을 해야 한다. 위의 예시에 이어서, <literal>CREATEDB</> 및 <literal>CREATEROLE</>을 <literal>admin</> role에 부여할 수도 있다. 
   그러면, <literal>joe</> role로 연결하는 세션은 이러한 권한을 즉각 갖지는 못하며, <command>SET ROLE admin</>을 수행한 이후에만 권한이 부여된다.
  </para>

  <para>
  </para>

  <para>
   그룹 role을 소멸하려면 DROP ROLE을 사용해야 한다.
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
   그룹 role의 멤버십이 자동 취소된다(단, 멤버 role은 영향을 받지 않음). 
   그룹 role이 소유한 개체를 먼저 삭제하거나 다른 소유자에게 재할당해야 하며, 그룹 role에 부여된 권한은 취소해야 한다는 점을 유의해야 한다.
  </para>
 </sect1>

 <sect1 id="perm-functions">
  <title>함수 및 트리거 보안</title>

  <para>
   함수와 트리거를 사용하면 다른 사용자가 무심코 실행할 수 있는 코드를 백엔드 서버에 삽입할 수 있다. 
   따라서 두 메커니즘은 <quote>트로이목마</quote>를 상대적으로 쉽게 침투시킬 수 있다. 
   유일한 보호책은 함수를 정의할 수 있는 사용자를 엄격하게 제어하는 것이다.
  </para>

  <para>
   함수는 데이터베이스 서버 데몬의 운영 체제 권한이 있는 백엔드 서버 프로세스 내에서 실행된다. 
   함수에 사용된 프로그래밍 언어가 미검사 메모리 액세스를 허용하는 경우 서버의 내부 데이터 구조를 변경하는 것이 가능하다. 
   따라서 해당 함수는 모든 시스템 액세스 제어를 피해갈 수 있다. 
   해당 액세스를 허용하는 함수 언어는 <quote>신뢰되지 않음</quote>으로 간주되고, <productname>Agens SQL</productname>는 수퍼유저만 해당 언어로 작성된 함수를 생성하도록 허용한다.
  </para>
 </sect1>

</chapter>
