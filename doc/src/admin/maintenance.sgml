<!-- doc/src/sgml/maintenance.sgml -->

<chapter id="maintenance">
 <title>정기적인 데이터베이스 관리 작업들</title>

 <indexterm zone="maintenance">
  <primary>관리</primary>
 </indexterm>

 <indexterm zone="maintenance">
  <primary>정기 관리</primary>
 </indexterm>

  <para>
   다른 데이터베이스 소프트웨어와 마찬가지로, <productname>Agens SQL</>에서도
   최적의 성능을 유지하지 위해서는 주기적인 관리 작업이 필요하다.
   여기서 관리 작업이란 꼭 <emphasis>필요한</emphasis> 작업이지만 
   이 작업들은 대부분 항상 같은 형태로 반복 되는 작업이기 때문에, 
   <application>cron</application>이나 윈도우즈의 <application>작업 스케줄러</> 같은 프로그램을 이용해서 
   그 작업을 등록해서 주기적으로 실행하면 된다. 
   물론, 이런 작업 스크립트를 작성 하는 일과 그 작업이 정상적으로 실행 되었는지를 확인하는 일은 데이터베이스 관리자의 몫이다.
  </para>

  <para>
   주기적인 작업으로 가장 으뜸은 당연히 백업이다. 장애(하드웨어 측면의 장애이거나
   운영상 사용자 실수에 의한 장애이거나)가 발생했을 때, 마지막 보루는 가장 최근에 백업한 자료로 데이터베이스를 
   복구하는 것이다. 백업과 복구에 대한 자세한 이야기는 
   <xref linkend="backup">에서 소개하고 있다.
  </para>

  <para>
   또 다른 중요한 정기적인 관리 작업은 데이터베이스 <quote>vacuum 하기</>이다.
   이 부분에 대한 자세한 이야기는 <xref linkend="routine-vacuuming">에서
   다룬다. 이어서 쿼리 실행 계획기가 바른 실행 계획을 짜도록 
   테이블의 자료 통계 정보를 갱신 하는 것에 대한 부분은 <xref linkend="vacuum-for-statistics">에서
   다룬다.
  </para>

  <para>
   또 다른 작업으로는 서버 로그 파일 관리 작업인데, 
   이 부분에 대해서는 <xref linkend="logfile-maintenance">에서 다룬다.
  </para>

  <para>
   <ulink
   url="http://bucardo.org/wiki/Check_postgres"><application>check_postgres</></ulink>
   프로그램은 데이터베이스 상태를 지켜보고, 비정상적인 상태에 대해서 
   보고하는 일을 한다. Nagios나 MRTG에서 <application>check_postgres</>
   프로그램을 이용하면 유용하게 쓰일 것이다. 물론 이 프로그램 단독으로 
   사용해도 충분히 그 역할을 한다.
  </para>

  <para>
   <productname>Agens SQL</productname>은 다른 데이터베이스 관리 
   시스템에 비해서 비교적 적은 관리 비용이 든다. 그럼에도 불구하고, 
   이런 정기적인 관리 작업에 대한 어느 정도의 관심은 보다 쾌적한 데이터베이스 서비스 품질을 제공할 수 있을 것이다.
  </para>

 <sect1 id="routine-vacuuming">
  <title>정기적인 Vacuum 작업</title>

  <indexterm zone="routine-vacuuming">
   <primary>vacuum</primary>
  </indexterm>

  <para>
   <productname>Agens SQL</productname> 데이터베이스에서는 
   <firstterm>vacuum</> (배큠이라고 읽는다)이라는 주기적인
   관리 작업이 필요하다. 
   이 작업은 대부분의 서버 환경에서는 <firstterm>autovacuum 데몬</>이
   담당해서 자동으로 처리 되기 때문에, 특별히 신경쓸 필요는 없다. 
   이 부분은 <xref linkend="autovacuum">에서 자세히 소개한다. 
   autovacuum 관련 환경 설정값을 바꾸어서 그 데몬의 동작 상태를 
   조절 할 수 있다. 
   또한 일부 데이터베이스 관리자는 <command>VACUUM</> 명령을 직접 실행하는 것이 
   데이터베이스를 효율적으로 사용할 수 있다고 판단해서, <application>cron</application>
   이나 <application>작업 스케줄러</> 같은 프로그램을 이용해서 
   이런 주기적인 정리 작업을 한다. 이런 작업을 잘 하기 위해서는 
   여기서 설명하고 있는 내용을 잘 이해하고 있어야한다.  
   autovacuum 기능을 이용하는 일반적인 환경에서 특별히 문제가 발생하지 않는다면 이 부분은 대충 읽어도 좋다.
  </para>

  <sect2 id="vacuum-basics">
   <title>Vacuum 기초</title>

   <para>
    <productname>Agens SQL</productname>에서
    VACUUM 명령은 다음과 같은 여러 가지 이유로
    정기적으로 각 테이블 단위로 실행되어야 한다.

    <orderedlist>
     <listitem>
      <simpara>변경 또는 삭제된 자료들이 차지 하고 있는 
      디스크 공간을 다시 사용하기 위한 디스크 공간 확보 작업이 필요하다.
      </simpara>
     </listitem>

     <listitem>
      <simpara><productname>Agens SQL</productname>
      쿼리 실행 계획기가 사용할 자료 통계 정보를 갱신할 필요가 있다.
      </simpara>
     </listitem>

     <listitem>
      <simpara>인덱스 전용 검색 성능을 향상하는데 이용하는 
      실자료 지도(visibility map, vm) 정보를 갱신하는 작업이 필요하다.
      </simpara>
     </listitem>

     <listitem>
      <simpara><firstterm>트랜잭션 ID 겹침</>이나
      <firstterm>다중 트랙잭션 ID 겹침</> 상황으로
      오래된 자료가 손실될 가능성을 방지할 필요가 있다.
      </simpara>
     </listitem>
    </orderedlist>

    이런 이유로 <command>VACUUM</> 작업은 그 작업 이유에 맞게
    다양한 주기로 다양한 대상으로 진행된다. 이 부분에 대한 자세한 설명은
    이 글의 하위 항목에서 각각 설명한다.
   </para>

   <para>
    <command>VACUUM</> 작업은 두 가지 종류가 있다. 표준 <command>VACUUM</>과
    <command>VACUUM FULL</>이다. <command>VACUUM FULL</> 작업은 
    물리적인 디스크 여유 공간을 확보할 수 있으나 그 작업 속도가 매우 느리다.
    하지만 표준 <command>VACUUM</> 작업은 운영 환경에서도 사용할 수 있도록
    여러 다른 작업들(<command>SELECT</command>,
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command> 같은 명령어로 수행되는 작업들)이 실행 되고 
    있어도 동시에 사용할 수 있다. (하지만, <command>ALTER TABLE</command>
    명령과 같은 명령은 VACUUM 작업이 실행되고 있는 상황에서는 사용할 수 없다.)
    <command>VACUUM FULL</> 명령은 해당 테이블에 대한 
    배타적 잠금(exclusive lock)을 지정하기 때문에 어떤 작업도 할 수 없게 된다.
    그러므로 일반적 상황에서는 관리자는 <command>VACUUM FULL</> 작업을
    되도록이면 피하고 표준 <command>VACUUM</> 작업을 하도록 해야 한다.
   </para>

   <para>
    <command>VACUUM</command> 작업은 추가적으로 디스크 입출력 부하를 
    만든다. 이 때문에 동시에 작업하고 있는 다른 세션의 성능을 
    떨어뜨린다. 이 부분은 <xref linkend="runtime-config-resource-vacuum-cost">
    에서 소개하고 있는 VACUUM 작업의 비용 조절 관련 환경 설정을 변경해서 
    어느 정도는 조절이 가능하다.
   </para>
  </sect2>

  <sect2 id="vacuum-for-space-recovery">
   <title>디스크 여유 공간 확보</title>

   <indexterm zone="vacuum-for-space-recovery">
    <primary>디스크 여유 공간</primary>
   </indexterm>

   <para>
    <productname>Agens SQL</productname>에서는
    <command>UPDATE</>나 <command>DELETE</> 작업 대상이 
    된 해당 자료의 옛 버전을 작업 완료 후
    바로 버리지 않는다.  이 작업은 
    다중 버전 동시성 제어(multiversion
    concurrency control, <acronym>MVCC</>) 기법을 
    구현하는데 이점이 있기 때문이다. 
    삭제된 자료를 다른 트랜잭션에서 사용하고 있을 때 
    그 자료를 삭제하면 안되기 때문이다. 
    하지만 다른 트랜잭션이 더 이상 그 옛 버전 자료에 대한 접근이 
    필요 없으면 옛 버전 자료는 쓸모 없는 자료가 된다. 이 상태로 계속 운영 되면 
    디스크에는 쓸모 없는 자료들이 넘쳐나게 될 것이다. 더 이상 사용할 수 
    없고 사용해서는 안될 자료들을 정리해서 그 자료가 있었던 공간을 빈 공간으로
    바꾸는 작업을 <command>VACUUM</> 명령이 담당한다.
   </para>

   <para>
    <command>VACUUM</command> 기본 작업은 
    테이블과 인덱스에서 삭제된 자료 (old version row, dead row 라고 한다)
    를 정리하고, 그 자리를 다른 자료가 저장 될 수 있도록 빈공간으로 
    표시하는 것이다.
    하지만 이 작업은 운영체제 입장에서의 디스크 여유 공간을 확보하는 것을
    의미하지는 않는다. 물론 한 테이블의 자료가 모두 지워졌고, 
    하나 또는 소수의 페이지만 없애면 되는데 이 작업을 위해 테이블 전체의
    배타적 잠금도 쉽게 할 수 있는 상황과 같이 특별한 경우는 
    해당 페이지를 삭제 해서 운영체제 입장의 디스크 여유 공간을 확보할 수도
    있다.  이와 반대로, <command>VACUUM FULL</> 작업은
    해당 테이블의 사용할 수 있는 자료들만을 따로 모아 아예 새 파일에 
    저장하는 방식을 이용하기 때문에 운영체제 입장에서 디스크 여유 
    공간을 확보할 수 있다. 작업 결과로 해당 테이블에 대해서
    최적의 물리적 크기로 테이블이 만들어진다. 하지만 그 작업은 일반 VACUUM 작업에 비해 시간이 꽤 걸린다. 
    또한 이 작업이 완료되기 전까지 이 작업을 할 수 있는 여유 공간이 있어야 작업을 할 수 있다.
   </para>

   <para>
    일반적인 vacuum 전략은 주기적인 표준 <command>VACUUM</> 작업을 
    해서 꾸준히 빈 공간을 확보하고, 디스크가 어느 정도 커지면 
    더 이상 커지지 않게 하는 것이다. 이는 최대한 <command>VACUUM FULL</> 작업을
    해야하는 상황을 방지하기 위한 전략이다.
    autovacuum 데몬이 이런 전략으로 작업을 한다.
    즉, autovacuum 기능을 사용한다면, <command>VACUUM FULL</>
    작업을 하지 않는 것을 기본 정책으로 하면 된다.
    이런 전략은 각 테이블이 최소의 디스크 공간을 사용한다는 것을 
    의미하는 것이 아니라 최적의 디스크 공간을 사용함을 의미한다.
    각 테이블은 실제 자료가 저장되어 있는 공간과 함께 vacuum 작업으로 
    처리된 빈공간을 함께 사용한다. 
    반면 어떤 테이블은 더이상 변경/삭제 작업이 없어 
    최소의 디스크 공간만 사용하면 된다고 판단되면 <command>VACUUM FULL</>
    명령을 이용할 수도 있다. 이렇게 해서 쓸모 없는 공간을
    운영체제 쪽으로 반환할 수도 있다.
    대용량 테이블을 관리하는 입장에서 보면 비정기적인 <command>VACUUM FULL</> 작업보다 
    정기적인 표준 <command>VACUUM</> 작업이 운영상 더 낫다.
   </para>

   <para>
    어떤 관리자는 vacuum 작업을 사용량이 적은 밤 시간에 주기적으로 
    작업 하도록 직접 관리하려고 한다.  이렇게 특정 시간에 vacuum 작업을
    할 때는 갑자기 자료 변경이 많은 작업이 생겨 디스크 공간을 많이
    쓰게 되는 경우도 함께 고려해야 한다.  최악의 경우는 디스크 공간이 
    모자라 <command>VACUUM FULL</> 작업을 선택해야 할 경우도 생기기 때문이다. 
    autovacuum 데몬을 이용하면 이런 예상치 못한 상황에 대해서도 자동으로 
    vacuum 작업이 진행되어 위와 같은 문제들을 피해갈 수 있다.  정확한 
    데이터베이스 사용량을 파악하지 않고 그냥 autovacuum 기능을 끄는 것은 
    현명하지 못한 선택이다.  한 가지 대안은 이 데몬의 실행 환경 설정값을 변경해서
    예상치 못한 대량 변경 작업에 대해서만 vacuum 작업이 자동으로 실행 되게 하는 것이다. 
    동시에 주기적인 관리자 정의 <command>VACUUM</> 작업도 하면서 예외 상황에 대해서 자동으로 대처하도록 하는 것이 좋다.
   </para>

   <para>
    autovacuum 기능을 사용하지 않을 때 주의해야할 점은 
    해당 데이터베이스 서버에서 사용하고 있는 모든 데이터베이스에 대해서
    <command>VACUUM</> 작업을 해야한다는 것이다.  일반적으로
    하루에 한 번 밤시간에 지정하는 것이 일반적이며 자료가 빈번하게 변경되는 테이블에 대해서는 더 자주 vacuum 작업 하도록
    설정한다. (아주 빈번한 테이블에 대해서 몇 분에 한 번씩 작업 하도록
    설정해야할 필요도 있을 것이다.)
    각 데이터베이스별 vacuum 작업을 할 때 vacuumdb 응용 프로그램을 이용하면 도움이 될 것이다.
   </para>

   <tip>
   <para>
    표준 <command>VACUUM</> 작업은 해당 테이블 전체를 대상으로 하는 
    변경 작업이나 삭제 작업과 같은 대량의 작업에 대해서는
    만족할 만한 결과를 제공하지는 않는다.  이 경우, 디스크 여유 
    공간을 확보해야 할 필요성이 있으면 <command>VACUUM FULL</>
    명령이나 CLUSTER 또는
    ALTER TABLE 명령(CLUSTER ON 옵션)을 이용해서 
    테이블을 아예 새롭게 만드는 방법을 선택할 수 있다.
    이들 명령을 사용할 때 반드시 주의해야할 사항은 
    이들 명령은 테이블을 대상으로 배타적 잠금을 한다는 점이다.
    즉, 이 작업이 완료되기 전까지 그 테이블을 대상으로 하는 
    다른 모든 작업들을 다른 세션에서는 할 수 없음을 염두해 
    두어야 하며 이 작업은 작업 도중 원본과 다른 새로운 복사본
    자료를 만들기 때문에 그만큼의 디스크 공간이 필요하다는 것도
    기억하고 있어야 한다.
   </para>
   </tip>

   <tip>
   <para>
    테이블의 모든 자료를 아예 지워버리고자 하면  
    <command>DELETE</command> 명령보다는 
    TRUNCATE 명령을 사용하는 것이 
    낫다. 이 명령은 작업 뒤에 <command>VACUUM</command> 이나
    <command>VACUUM FULL</command> 명령을 사용할 필요가 없다.
    단, 이 명령을 사용하게 되면 MVCC 대상에서 제외되기 때문에 
    다중 세션 다중 트랜잭션 환경에서는 위험하다.
   </para>
   </tip>
  </sect2>

  <sect2 id="vacuum-for-statistics">
   <title>실행계획 통계 정보 갱신</title>

   <indexterm zone="vacuum-for-statistics">
    <primary>통계 정보</primary>
    <secondary>쿼리 실행계획기</secondary>
   </indexterm>

   <indexterm zone="vacuum-for-statistics">
    <primary>ANALYZE</primary>
   </indexterm>

   <para>
    <productname>Agens SQL</productname> 쿼리 실행 계획기는 
    쿼리의 좋은 실행 계획을 짜기 위해서 각 테이블에 저장된 자료를 바탕으로
    수집된 통계 정보를 이용한다.  이 통계 정보는 
    ANALYZE 명령을 이용해서 만든다.
    또한 <command>VACUUM</> 명령을 수행하면서 옵션으로 이 작업을 할 수 있다.
    이 통계 정보 갱신 작업이 제대로 되지 않으면 의도 하지 않은 쿼리 실행 계획이
    짜여질 것이고 이것은 전체적으로 데이터베이스 성능을 떨어뜨리는 
    결과를 초래하기 때문에 바른 통계 정보 갱신 작업을 주기적으로 
    하는 것은 중요하다.
   </para>

   <para>
    autovacuum 기능을 이용하면 통계 정보를 갱신해야할 필요성이 있는
    테이블들에 대해서 주기적으로 <command>ANALYZE</> 명령을 자동 수행한다.
    반면, 자료 변경 작업이 어떤 칼럼에서 일어나고 그 변경 작업 때문에 
    통계 정보를 갱신해서 실행 계획이 잘 짜여지는 것과 관련 없다고
    명확하게 판단되는 경우, 관리자는 이 통계 정보 갱신 작업을 
    직접 수행하거나 아예 안 할 수도 있다.  autovacuum 데몬은 
    이런 세세한 경우까지는 고려하지 않고 테이블의 자료가 새로 추가 되었거나 
    변경/삭제 된 경우, 무조건 통계 정보 갱신 작업 대상으로 판단한다.
   </para>

   <para>
    통계 정보 갱신 작업도 디스크 여유 공간 확보를 위한 vacuum 작업과 
    마찬가지로 테이블의 자료 변화량이 많은 경우는 보다 빈번하게, 
    그 반대의 경우는 좀 더 드물게 진행하는 것이 좋다.
    물론, 테이블의 자료가 빈번하게 변경된다고 하더라도 
    그 변경 내용이 수집할 통계 정보와 관련 없는 것이면 당연히 통계 정보 갱신 작업이 필요 없다. 
    통계 정보를 갱신 할 빈도를 추측하는 가장 간단한 방법은 
    그 칼럼의 최소값과 최대값이 얼마나 자주 바뀌느냐를 살펴보는 것이다.
    예를 들어 웹서비스에서 각 페이지의 마지막 접근 정보를 기록하는
    테이블에서 마지막 접근 시각을 기록하는 
    <type>timestamp</type> 자료형의 칼럼은 URL을 담고 있는 칼럼보다 
    훨씬 빈번하게 변경될 것이다.  따라서 URL 정보의 통계 정보 갱신 작업보다
    마지막 접근 시각의 통계 정보 갱신이 더 빈번하게 일어나야
    보다 정확한 실행 계획이 짜여질 것이다.
   </para>

   <para>
    <command>ANALYZE</> 명령을 사용자가 직접 실행 할 때 
    한 테이블의 특정 칼럼 정보에 대해서만 통계 정보를 갱신하도록 할 수 있다.
    이렇게 하면 위에서 언급한 것처럼 칼럼별 통계 정보 갱신 작업 빈도를 
    칼럼별로 조절할 수 있다.  하지만 운영 환경에서는 일반적으로
    데이터베이스 전체를 대상으로 이 작업을 한다. 왜냐하면 
    기본적으로 자료 통계 정보 갱신 작업은 전체 자료를 대상으로 하지 않고 
    임의의 샘플 자료만을 대상으로 하기 때문에 꽤 빨리 작업이 끝난다.
   </para>

   <tip>
    <para>
     칼럼 단위로 <command>ANALYZE</> 작업을 하는 것은 운영 환경에서 
     사용하기에는 번거로운 일이긴 하지만, 보다 정확한 통계 정보를 
     싼 비용으로 갱신 할 수 있다는 것이 장점이다.
     예를 들어 한 칼럼의 자료 분포가 아주 넓고 그 칼럼이 <literal>WHERE</>
     절의 조건 검색으로 자주 사용되면, 이 칼럼의 통계 정보는 
     다른 칼럼보다 더 꼼꼼하게 관리되는 것이 좋을 것이다. 
     이 경우, <command>ALTER TABLE SET STATISTICS</> 명령을 통해
     해당 테이블의 개별 통계 수집 설정값을 바꾸어서 꼼꼼하게 관리 할 수 
     있다.  또한 서버 환경 설정인 defaults-statistics-target 값을 조정해서 데이터베이스
     전체를 대상으로 조절할 수도 있다.
    </para>

    <para>
     또, 함수 사용에 대한 통계 정보는 기본적으로 제한된 정보만 제공 한다. 
     하지만 함수 기반 인덱스를 만들면 이 부분에 대해서는 통계 정보 갱신 작업이 함수 반환값을 대상으로 이루어
     지기 때문에 검색 조건으로 인덱스를 만들 때처럼 해당 칼럼에 해당 
     함수를 사용하다면 쿼리 실행 계획기는 바르게 실행 계획을 짤 것이다.
    </para>
   </tip>

   <tip>
    <para>
     autovacuum 데몬은 외부 테이블(foreign table)에 대해서는 
     <command>ANALYZE</> 작업을 하지 않는다.  외부 테이블 사용시
     그것의 통계 정보가 갱신 되야 할 때는 
     직접 <command>ANALYZE</> 명령을 주기적으로 실행해야 할 것이다.
    </para>
   </tip>
  </sect2>

  <sect2 id="vacuum-for-visibility-map">
   <title>실자료 지도 갱신</title>

   <para>
    vacuum 작업은 실자료 지도를 갱신하는 작업을 한다.
    실자료 지도(visibility map, vm)란 현재 작업 중인 트랜잭션들(또는 그 자료들이
    변경 되기 전까지 이용할 미래의 모든 트랜잭션들)이 실제로 사용할 자료들에 대한
    각 테이블별 지도다.  이 작업은 두가지 목적이 있다. 하나는 vacuum 작업은 
    이미 지도 정리 작업이 끝난 것에 대해서는 더 이상 그 작업을 하지 않는 것이다.
   </para>

   <para>
    다른 하나는 이 지도 정보는 인덱스 전용 쿼리들(더 이상 실제 테이블 자료를 
    검사 하지 않는 쿼리들)에 대해서 빠른 응답을 제공하는데 사용하는 것이다.
    <productname>Agens SQL</productname>의 인덱스에는 실자료들에 대해서만 따로
    모아서 그 정보를 제공하지 않는다. 즉, 어떤 자료를 해당 세션에게 보여 주어야 
    할지를 결정 하는 정보는 그 자료의 테이블 페이지까지 살펴 보아야 알 수 있다. 
    <firstterm>인덱스 전용 검색</>인 경우는 테이블 페이지를 검색하지 않고 
    먼저 이 실자료 지도를 검색해서 이곳에 해당 자료가 있으면 사용한다.
    그만큼 테이블 페이지 읽기 작업을 줄일 수는 있다.  특히 테이블 크기가
    큰 경우에는 디스크 읽기 작업을 상당히 줄이는 효과를 볼 수 있다. 
    왜냐하면, 실제 테이블 페이지 보다 이 실자료 지도의 크기가 훨씬 작기 때문이다.
   </para>
  </sect2>

  <sect2 id="vacuum-for-wraparound">
   <title>트랜잭션 ID 겹침 오류 방지</title>

   <indexterm zone="vacuum-for-wraparound">
    <primary>트랜잭션 ID</primary>
    <secondary>겹침</secondary>
   </indexterm>

    <indexterm>
     <primary>겹침</primary>
     <secondary>트랜잭션 ID</secondary>
    </indexterm>

   <para>
    <productname>Agens SQL</productname>에서는 트랜잭션 자료에 대한 
    MVCC 기법은 트랜잭션 ID (<acronym>XID</>)를 숫자로 처리하고
    그것을 비교하는 방식이다. 한 로우의 자료 입력 XID 값이
    현재 트랜잭션 XID 보다 더 크면 <quote>앞으로 생길</>
    (다른 트랙잭션에서 입력된) 
    자료이며 현재 트랜잭션에서는 보이지 말아야 할 자료임을 뜻한다.
    트랜잭션 ID는 32bit 정수형 크기이고, 
    이 값은 하나의 클러스터 기준으로 관리되기 때문에 
    서버가 오랫 동안 운영 되었으면 (트랜잭션을 40억 개 넘게 사용했으면)
    <firstterm>트랙잭션 ID 겹침</> 오류를 발생할 수 있다. 
    트랙잭션 ID 계산기가 40억을 넘어 다시 0부터 시작하려고 하면 
    보관 되어 있는 모든 자료의 XID 값이 0보다 크기 때문에 
    모든 자료는 보이지 말아야할 자료로 처리할 것이다.
    단순하게 말하면, 자료가 엄청나게 꼬여 버릴 것이다. 
    (실제로는 유효한 자료임에도 불구하고, 그 자료를 볼 수 없는 황당한
    사태가 발생할 것이다.)  이런 문제를 방지하기 위해서 
    모든 데이터베이스의 모든 테이블에 대해 
    20억 rodml 트랜잭션을 사용하기 전에 vacuum 작업이 필요하다.
   </para>

   <para>
    주기적인 vacuum 작업이 이 문제를 해결 할 수 있는 이유는
    <productname>Agens SQL</productname>은 <literal>FrozenXID</>
    라는 특별 XID를 미리 예약 해 두었기 때문이다.
    이 XID는 일반적인 XID 비교 대상에서 항상 제외되어
    항상 보여지는(언제나 구 버전) XID이다.
    일반 XID 비교 방법은 2<superscript>32</> 나머지 연산을 이용한다.
    이 말은 20억 개의 <quote>옛</> XID와, 20억 개의 <quote>새</> XID
    로 나누고, 이 XID 값은 계속 순환 하며 사용한다는 뜻이다.  
    그래서 한 XID로 저장 되었으면 그 이후 20억 개의 트랜잭션이 
    생기기 전까지는 그 자료는 <quote>옛</> XID로 처리되지만, 
    그 이상의 트랜잭션이 생기면, 그 현재 트랜잭션 기준으로 봤을 때 
    그 옛 XID는 앞으로 저장될 XID로 간주해 버린다.  이 문제를 피하는 
    방법은 20억 트랜잭션이 생기기 전에 그 옛 XID 자료의 XID 값을
    <literal>FrozenXID</>로 바꾸는 것이다. 
    이렇게 <quote>영구 보관용</> 자료로 바꿔 놓으면 트랜잭션 XID 
    비교 작업에서 항상 제외 되기 때문에, XID 겹침 오류를 피해갈 수 있게 된다.
    이 XID 변경 작업을 바로 <command>VACUUM</> 명령으로 한다.
    (이 작업을 자료 동결(data freezing)이라고 한다.)
   </para>

   <para>
    vacuum-freeze-min-age 환경 변수는 <literal>FrozenXID</>로 바꾸기 전 얼마나 
    옛 XID를 남길 것인가를 지정한다.  이 값이 크면  
    그 만큼 트랜잭션 정보를 많이 보관할 것이고, 
    이 값을 줄이면 그 만큼 해당 테이블에 많은 트랜잭션을 
    vacuum 작업 없이 저장할 수 있게 된다.
   </para>

   <para>
    표준 <command>VACUUM</> 작업은 한 자료 페이지에
    모든 자료가 UPDATE나 DELETE 명령 없이 오직
    INSERT 명령으로 자료가 입력된 것만 있으면 
    그 페이지는 작업 대상에서 제외 한다.  그렇지만 그 자료 페이지에도
    아직 <literal>FrozenXID</>로 바뀌지 않은 XID들이 있을 것이다. 
    이 XID들도 당연히 <literal>FrozenXID</>로 바뀌어야 XID 겹침 오류를 
    피해갈 수 있다.  이 작업을 위해서 
    vacuum-freeze-table-age 환경 변수
    값을 조정 해서 <command>VACUUM</> 작업에서
    모든 자료 페이지를 대상으로 이 XID 변경 작업 할 것인지를
    결정 할 수 있다.
    해당 테이블의 나이가 
    <varname>vacuum_freeze_table_age</> - <varname>vacuum_freeze_min_age</>
    값 보다 크면 <command>VACUUM</> 작업은 모든 자료 페이지를 검사해서
    변경 작업을 진행한다. <varname>vacuum_freeze_table_age</> 값을
    0으로 지정하면 효율적인 작업을 위해 
    실자료 지도를 참조하지 않고 
    항상 모든 페이지를 검사한다.
   </para>

   <para>
    한 테이블이 vacuum 작업 없이 계속 트랜잭션 작업을 할 수 있는 
    간격은 그 테이블의 마지막 vacuum 이후부터
    20억 - <varname>vacuum_freeze_min_age</> 값만큼의
    트랜잭션이다.
    즉, 이 이상 트랜잭션이 발생했고 vacuum 작업이 없었으면 
    자료를 잃게 된다. 물론 현실적으로 이런 사태는 일어나지 않는다.
    autovacuum 기능을 사용하지 않아도 autovacuum-freeze-max-age 환경 설정 값으로 지정한
    간격이 생기면 강제로 서버는 자체 vacuum 작업을 진행하기 때문이다.
   </para>

   <para>
    한 테이블에 대해 vacuum 작업을 한 번도 하지 않았어도
    <varname>autovacuum_freeze_max_age</> - <varname>vacuum_freeze_min_age</>
    값 만큼의 트랜잭션이 발생하면, 
    autovacuum 작업이 자동으로 진행된다.
    자료 변경, 삭제 작업이 빈번한 테이블들의 경우 여유 공간 확보 작업과
    동시에 진행 되기 때문에 트랜잭션 ID 겹침 방지 작업은 
    별로 중요하지 않지만, 자료 추가만 계속 되는 테이블의 
    경우는 이 간격 만큼 주기적으로 vacuum 작업이 진행 된다.
    그래서 이 반복 주기를 크게 하려면 <varname>autovacuum_freeze_max_age</>
    값을 크게 설정하거나 <varname>vacuum_freeze_min_age</>
    값을 작게 설정한다.
   </para>

   <para>
    <varname>vacuum_freeze_table_age</> 설정에 대한 최대값은
    <varname>autovacuum_freeze_max_age</> * 0.95 이다.
    이 보다 더 큰 값이 지정되어도 무시하고, 최대값이 사용된다.
    95%로 지정한 이유는 이 값이 <varname>autovacuum_freeze_max_age</>
    값보다 큰 경우는 어차피 autovacuum 작업 계획에 따라 
    무조건 vacuum 작업이 일어나기 때문에 의미가 없고 
    이 정도의 여지를 둔것은 그 사이 사용자가 직접 <command>VACUUM</>
    작업을 할 것인지를 판단할 수 있도록 하기 위함이다.
    대략 <command>vacuum_freeze_table_age</> 값은 
    <varname>autovacuum_freeze_max_age</> 값보다 작은 값으로 지정해서 
    그 차이값 만큼의 충분한 간격을 마련해 놓는 것이 좋다.  이렇게 해서 
    사용자가 직접 실행하는 주기적인  <command>VACUUM</>
    작업이나 자료 변경, 삭제 작업 때문에 자동으로 실행되는 
    autovacuum 작업들이 원활히 진행 되도록 한다.
    <varname>autovacuum_freeze_max_age</>
    - <varname>vacuum_freeze_table_age</>이 너무 작으면 
    최근에 여유 공간 확보 작업을 위해 vacuum 작업을 했음에도 불구하고 
    트랜잭션 ID 겹침 오류 방지 작업을 위해 또 vacuum 작업을 
    하는 빈도가 늘어날 것이다. 반대로 너무 크면 
    <varname>vacuum_freeze_table_age</> 작아서 잦은 테이블 자료 페이지
    들을 전수 조사하는 빈도가 늘어날 것이다.
   </para>

   <para>
    <varname>autovacuum_freeze_max_age</> 값(
    <varname>vacuum_freeze_table_age</> 값도 포함해서)을 크게
    설정 할 때의 유일한 단점은 데이터베이스 클러스터 디렉토리의 하위
    디렉토리인 <filename>pg_clog</> 디렉토리의 디스크 사용량이 커진다는
    점이다.  왜냐하면 그 만큼의 트랜잭션 커밋 정보를 보관하고 
    있어야 하기 때문이다.  트랜잭션 커밋 정보는 2비트를 사용하므로
    <varname>autovacuum_freeze_max_age</> 값을 최대치인 20억으로 
    지정 했으면, 그 디렉토리는 0.5GB의 공간이 필요하다.
    이 정도의 크기가 데이터 클러스터 전체 크기에 비해서 
    별로 신경 쓸 크기가 아니면, <varname>autovacuum_freeze_max_age</>
    값으로 최대값을 지정하는 것이 좋을 것이다.
    그렇지 않은 경우, 이 값을 적당히 조절 해서 
    <filename>pg_clog</> 디렉토리의 저장 공간을 조절할 필요가 있다. 
    (기본값인 2억 트랜잭션이라면 <filename>pg_clog</>
    디렉토리는 최대 50MB 공간을 사용한다.)
   </para>

   <para>
    <varname>vacuum_freeze_min_age</> 환경 설정 값을 줄이는 것의 단점은
    빈번한 <literal>FrozenXID</> 변환 작업을 통해 전체적으로 
    vacuum 작업 시간이 많이 걸린다는 것이다. (굳이 필요 없는 작업을 
    더 하는 꼴이 된다.)
    따라서 이 값은 각 자료가 더 이상 변경 되지 않아 영구 보관용으로 
    남기는 것이 좋겠다싶은 자료들을 대상으로 충분히 큰 값을
    지정하는 것이 좋다.
    이 값을 줄이는 것의 또 다른 단점은 해당 테이블의 많은 
    자료들이 <literal>FrozenXID</>로 변경 되어 버리면 
    데이터베이스 장애 시 원인분석을 위해 참조할 정보가 그 만큼 
    줄어든다는 것이다. 그래서 정적 테이블이 아니면 이 값을 되도록이면
    줄이지 않을 것을 권장한다.
   </para>

   <para>
    한 데이터베이스에서 가장 오래된 XID 값을 조사하는 방법은
    <structname>pg_class</>와 <structname>pg_database</>
    테이블을 살펴보는 것이다. <command>VACUUM</>
    작업 후 XID 정보를 이 두 테이블에 보관하고 있기 때문이다.
    <structname>pg_class</> 테이블의 <structfield>relfrozenxid</>
    칼럼값은 <command>VACUUM</> 작업으로 그 테이블 전체에 대해서
    XID 정리 작업을 했던 트랜잭션 ID 값이다.
    이 값은 <literal>FrozenXID</>로 변경 하는 작업 시, 
    이 값보다 오래된 트랜잭션을 정리 대상으로 식별할 때 이용된다.
    이와 비슷하게, <structname>pg_database</> 테이블의
    <structfield>datfrozenxid</> 칼럼은 해당 데이터베이스 전체를
    대상으로 각 테이블의  <structfield>relfrozenxid</> 값들 
    가운데 가장 오래된 값이다.
    이 정보를 살펴볼 방법은 다음과 같은 쿼리를 실행해 보면 된다:

<programlisting>
SELECT c.oid::regclass as table_name,
       greatest(age(c.relfrozenxid),age(t.relfrozenxid)) as age
FROM pg_class c
LEFT JOIN pg_class t ON c.reltoastrelid = t.oid
WHERE c.relkind IN ('r', 'm');

SELECT datname, age(datfrozenxid) FROM pg_database;
</programlisting>

    <literal>age</> 칼럼 값은 현재 시점 기준으로 마지막 vacuum 작업으로
    정리된 가장 오래된 XID의 나이를 말한다.
   </para>

   <para>
    표준 <command>VACUUM</> 작업은 마지막 vacuum 작업이 있은 뒤부터
    변경된 데이터 페이지들에 대해서만 작업 대상으로 삼는다.  하지만,
    다음 세가지 경우에는 테이블의 모든 페이지를 조사한다.
    첫번째, 이 <structfield>relfrozenxid</> 값을 조사해서, 
    이 값의 나이가  <varname>vacuum_freeze_table_age</> 값 보다 크다면
    해당 테이블의 모든 페이지를 조사한다.  두번째, <command>VACUUM</> 명령어에서
    <literal>FREEZE</> 옵션을 사용할 때도 모든 페이지를 조사한다.
    마지막으로 더 이상 사용되지 않는 자료를 정리하는 작업이 
    모든 페이지에 걸쳐 있어야 하는 경우에도 같은 작업을 한다.
    보통은 이렇게 <command>VACUUM</> 작업을 통해
    모든 페이지가 조사 되었으면, 그 작업이 끝난 뒤 해당 테이블의 
    <literal>age(relfrozenxid)</> 값은 <varname>vacuum_freeze_min_age</>보다 
    약간 큰 값으로 보여진다. (<command>VACUUM</> 작업이 시작되고, 
    확인 할 때까지의 트랜잭션 수 만큼 증가한다) 만일, <command>VACUUM</>
    작업을 계속 주기적으로 했으나 항상 변경된 페이지들만 조사하는 작업만
    했으면 <literal>age(relfrozenxid)</> 값이 <varname>autovacuum_freeze_max_age</>
    값에 이르렀을 때 autovacuum 데몬에 의해 강제로 
    테이블의 모든 페이지를 조사해서 트랜잭션 ID 겹침 오류를 방지한다.
   </para>

   <para>
    만일 어떤 알 수 없는 오류로, 
    autovacuum 작업이 제대로 진행 되지 못하는 경우를 대비 해서 
    그 데이터베이스의 가장 오래된 트랜잭션이 
    위험 수위에 다다르면 (통상 1천만 트랜잭션 정도 밖에 처리 할 수
    없는 상황이면) 다음과 같은 서버 경고 메시지를 보여준다:

<programlisting>
WARNING:  database "mydb" must be vacuumed within 177009986 transactions
HINT:  To avoid a database shutdown, execute a database-wide VACUUM in "mydb".
</programlisting>

    (서버 힌트처럼 이런 경우는 관리자가 직접 수동으로 
    <command>VACUUM</> 작업을 해야한다. 이 작업은 데이터베이스의
    <structfield>datfrozenxid</> 값까지 변경해야 하므로 
    반드시 데이터베이스 관리자 권한으로 진행되어야 한다.)
    이 경고를 무시하면 트랜잭션 ID 겹침 오류가 발생되기까지 
    1백만 트랜잭션 정도 남았을 때 데이터베이스 서버는 다음 오류 
    메시지를 남기고 이후 모든 트랜잭션 작업을 하지 않는다.

<programlisting>
ERROR:  database is not accepting commands to avoid wraparound data loss in database "mydb"
HINT:  Stop the postmaster and use a standalone backend to VACUUM in "mydb".
</programlisting>

    1백만 트랜잭션을 남겨 놓은 이유는 관리자가 작업(수동 <command>VACUUM</> 작업)
    할 트랜잭션을 보장하기 위해서다.
    이 메시지가 발생하고 있는 상황에서는 
    어떠한 작업도 할 수 없기 때문에 
    관리자는 서버를 중지하고 
    관리자 단독 모드로
    서버를 실행해서 <command>VACUUM</> 작업을 진행해야 한다.
    관리자 단독 모드로 서버를 실행 하는 방법에 대해서는 
    Agens 설명서를 참조 하라.
   </para>

   <sect3 id="vacuum-for-multixact-wraparound">
    <title>다중 트랜잭션과 겹침</title>

    <indexterm>
     <primary>다중 트랜잭션 ID</primary>
    </indexterm>

    <indexterm>
     <primary>겹침</primary>
     <secondary>다중 트랜잭션</secondary>
    </indexterm>

    <para>
    <firstterm>다중 트랜잭션 ID</> 는 다중 트랜잭션 수행시 로우를 잠금 하는데 쓰인다. 
    잠금 정보를 저장할 수 있는 튜플 헤더 공간은 제한되어 있기 때문에 
    여러 트랜잭션이 한 로우를 잠금하면<quote>다중 트랜잭션 ID</>(또는 multixact ID)로 암호화 하여 저장된다. 
    다중 트랜잭션 ID에 포함된 트랜잭션 ID 정보는 <filename>pg_multixact</> 하위 디렉토리에 따로 저장되고, 
    다중 트랜잭션 ID만 튜플 헤더의 <structfield>xmax</> 필드로 나타난다.
    트랜잭션 ID처럼 다중 트랜잭션 ID도 32-bit 카운터와 스토리지로 실행되고 수명관리, 스토리지 청소, 겹침 처리가 필요하다.
    </para>

    <para>
     <command>VACUUM</> 테이블 스캔을 부분 혹은 전체 실행하면 vacuum multixact freeze min age
     보다 큰 다중 트랜잭션 ID는 0 또는 트랜잭션 ID, 새로운 다중 트랜잭션 ID로 바뀐다. 각 테이블의 
     <structname>pg_class</>.<structfield>relminmxid</> 는 전체 튜플에서 가장 오래된 다중 트랜잭션 ID를 저장한다. 
     pg_class.relminmxid이 vacuum multixact freeze table age보다 크면 전체 테이블 스캔이 강제로 실행된다. 
     전체 <command>VACUUM</> 스캔이 실행되면 무조건 해당 테이블의 vacuum_multixact_freeze_table_age가 바뀐다.
     결국 전체 데이터베이스의 전체 테이블이 스캔 되고 각 테이블의 pg_class.relminmxid는 바뀌고 오래된 다중 트랜잭션의 디스크 스토리지는 삭제된다. 
    </para>

    <para>
     multixact-age가 autovacuum-multixact-freeze-max-age
     보다 큰 테이블에는 안전 장치 역할로 VACUUM 테이블을 전체 스캔 한다. 
     AUTOVACUUM 기능이 꺼져 있어도 실행된다.
    </para>
   </sect3>
  </sect2>

  <sect2 id="autovacuum">
   <title>Autovacuum 데몬</title>

   <indexterm>
    <primary>autovacuum</primary>
    <secondary>일반 정보</secondary>
   </indexterm>
   <para>
    <productname>Agens SQL</productname>에서는 추가적인 기능이기는 하지만 
    <command>VACUUM</command> 명령과 <command>ANALYZE </command> 명령을 주기적으로
    자동 실행하는 <firstterm>autovacuum</firstterm>이라는 기능을 기본적으로 사용하길 권장한다.
    이 기능을 켜두면 테이블의 자료가 많이 변경 되었을 때(추가, 변경, 삭제 작업이 많이 있었을 때) 자동으로
    해당 테이블에 대해서 자동으로 윗 명령들을 실행한다.
    이런 자동 실행이 가능 하려면 먼저 track counts 환경 설정 값이
    <literal>true</literal>로 지정되어 데이터베이스 작업에 대한 통계 정보를 자동으로 수집해야 한다.
    이런 설정은 모두 기본 설정이며, 이와 관련된 다른 설정들도 모두 적당하게 이미 설정 되어 있다.
   </para>

   <para>
    <quote>autovacuum 데몬</>은 내부적으로 여러개의 프로세스로 구성된다.
    <firstterm>autovacuum launcher</firstterm>라는 이름의 프로세스가 항상
    실행 되어 있으면서 그 프로세스가 
    <firstterm>autovacuum worker</firstterm>라는 이름의 하위 프로세스를 
    실행 해서 모든 데이터베이스에 대한 vacuum 작업을 하는 방식으로 운영된다.
    launcher 프로세스는 autovacuum-naptime
    값으로 지정한 초 간격으로 한 번에 하나의 데이터베이스를 작업할 수
    있도록 worker 프로세스의 실행 시간을 관리한다. (즉,
    <replaceable>N</>개의 데이터베이스가 있으면, 
    <varname>autovacuum_naptime</>/<replaceable>N</> 초 간격으로
    worker 프로세스는 자신이 작업 해야할 데이터베이스를 대상으로
    작업을 시작한다.)
    동시에 실행 될 수 있는 worker 프로세스의 최대 개수는 
    autovacuum-max-workers 환경 변수 설정값으로
    지정할 수 있다.  만일 이 개수 보다 많은 데이터베이스가 있다면,
    가장 먼저 실행한 worker 프로세스가 종료되는 즉시 
    남은 데이터베이스 가운데 하나를 대상으로 작업한다.
    worker가 하는 작업은 
    먼저 각 테이블의 상태를 조사해서, 필요하면 
    <command>VACUUM</> 또는 <command>ANALYZE</> 명령을 수행한다.
    <varname>log_autovacuum_min_duration</varname> 환경 변수 설정 값을
    지정해서 autovacuum 상태를 지켜볼 수 있다.
   </para>

   <para>
    만일 worker 프로세스가 각각 아주 큰 테이블의 vacuum 작업을 하게 되면
    동시에 모든 worker 프로세스가 아주 오랜 시간 작업을 하게 될 것이다. 
    그런 동안에는 다른 테이블들에 대해서는 autovacuum 프로세스가
    vacuum 작업을 할 수 없게 된다. 
    하나의 데이터베이스에 대해서 동시에 실행 될 수 있는 worker 프로세스의
    수는 제한이 없다.  각 프로세스들은 이미 다른 프로세스가 작업 중인
    테이블은 통과하고 다른 테이블을 조사해서 필요한 작업을 한다.
    실행 되는 worker 프로세스 개수는 
    max-connections 설정값에 포함되지 않으며, 
    superuser-reserved-connections 설정값에도
    포함되지 않음을 알고 있어야 한다.
   </para>

   <para>
    테이블의 나이(<structfield>relfrozenxid</> 칼럼 값을 age() 함수로
    조사한 값)가 autovacuum-freeze-max-age 설정으로
    지정한 트랜잭션 수 보다 많으면 그 테이블은 무조건 
    vacuum 작업을 한다.  (또한 각 테이블 별로 저장 환경 설정 - 아래 참조 - 인
    freeze 최대 나이값을 지정했으면, 그것을 참조해서 작업한다.)
    또한, 테이블의 자료가 변경 되어 
    <quote>vacuum 임계치</>를 초과했으면 vacuum 작업을 진행 한다.
    이 임계치 계산은 다음 식으로 산정한다.
<programlisting>
vacuum 임계치 = vacuum 초기 임계치 + vacuum 배율값 * 로우수
</programlisting>
    vacuum 초기 임계치는
    autovacuum-vacuum-threshold에서, 
    vacuum 배율값은
    autovacuum-vacuum-scale-factor에서, 
    로우수는
    <structname>pg_class</structname>.<structfield>reltuples</structfield>에서
    참조 한다.
    더 이상 사용하지 않는 쓸모 없는 로우 정보는 
    통계 수집기가 수집한 정보를 사용한다. 이 정보는 
    <command>UPDATE</command> 명령이나 
    <command>DELETE</command> 명령에 의해서 갱신된
    비교적 정확한 수치다. (비교적 정확하다고 한 이유는 
    서버 과부하시 이 값이 정확하게 수집되지 않을 수도 
    있기 때문이다.)
    테이블의 <structfield>relfrozenxid</> 나이값이 
    <varname>vacuum_freeze_table_age</> 설정값보다 크면, 
    테이블의 모든 로우를 조사해서 영구 보관용 XID로 바꾸고  
    <structfield>relfrozenxid</> 값을 변경 한다.
    그렇지 않은 경우는 마지막 vacuum 작업 뒤 변경된 
    자료 페이지만을 대상으로 작업한다.
   </para>

   <para>
    analyze 작업도 위에서 설명한 방식과 비슷하게 진행 된다.
    이 임계치 계산식은 다음과 같다:
<programlisting>
analyze 임계치 = analyze 초기 임계치 + analyze 배율값 * 로우수
</programlisting>
    이렇게 계산된 임계치와 마지막 <command>ANALYZE</command>
    작업이 있은 뒤 발생한
    INSERT, UPDATE, DELETE 작업의 대상인 
    모든 로우수와 비교해서 작업을 진행한다.
   </para>

   <para>
    임시 테이블은 autovacuum 대상에서 제외된다.
    vacuum 작업과, analyze 작업이 필요하면, 
    해당 세션에서 SQL 명령으로 사용자가 직접 작업 해야 한다.
   </para>

   <para>
    임계치와 배율값은 기본적으로 <filename>postgresql.conf</filename>
    파일에서 지정한다. 하지만 각 테이블 별로도 개별 지정이 가능하다.
    이 값들이 각 테이블 별로 지정 되면, 그 테이블에 대해서는 서버 전역으로 설정된 값이 무시된다.
    autovacuum에 대한 환경 설정 매개변수들의 자세한 설명은 
    <xref linkend="runtime-config-autovacuum">에서 다룬다.
   </para>

   <para>
    위에서 설명 한 것 외에 테이블 단위 저장 옵션 환경 설정 매개변수는 
    여섯 개가 더 있다. 하나는  <literal>autovacuum_enabled</> 설정으로
    이 값을 <literal>false</literal>로 지정하면,
    autovacuum 데몬은 트랜잭션 ID 겹침 방지에 대한 검사만 하고, 
    나머지 모든 작업을 하지 않는다.  다른 두 개는 
    <varname>autovacuum_vacuum_cost_delay</>,
    <varname>autovacuum_vacuum_cost_limit</> 인데,
    테이블 단위 vacuum 작업 지연 기능에 관계된다.
    (<xref linkend="runtime-config-resource-vacuum-cost"> 참조)
    나머지 <varname>autovacuum_freeze_min_age</>,
    <varname>autovacuum_freeze_max_age</>,
    <varname>autovacuum_freeze_table_age</> 설정은
    각각 vacuum-freeze-min-age
    autovacuum-freeze-max-age
    vacuum-freeze-table-age 설정과
    같은 역할을 한다.
   </para>

   <para>
    worker 프로세스가 여러 개인 경우, 
    위에서 지정한 비용 처리는 <quote>균등배분</quote> 방식이다.
    즉, 실행 되는 프로세스가 많다고 해도 시스템 전체적인 입장에서
    그 비용은 동일하다.
   </para>
  </sect2>
 </sect1>


 <sect1 id="routine-reindex">
  <title>정기적인 인덱스 다시 만들기</title>

  <indexterm zone="routine-reindex">
   <primary>리인덱스</primary>
  </indexterm>

  <para>
   REINDEX 명령을 이용하거나, 
   이 작업과 상응하는 일련의 작업을 통해 주기적으로 
   인덱스를 다시 만드는 작업은 몇몇 상황에서는 가치 있는 작업이다. 
  </para>

  <para>
   완전히 빈 B-트리 인덱스 페이지는 재사용 하지만,
   해당 페이지에 일부 자료를 남기고 대부분 자료가 지워지면 
   그 인덱스는 전체적으로 과도한 디스크 영역을 사용하게 된다.
   (이것을 인덱스 팽창(index bloating)이라고 한다. )
   이런 경우 이 인덱스는 검색에서 디스크 읽기 비용이 최적화 된 인덱스보다
   당연히 더 든다. (vacuum 작업은 한 페이지의 사용하지 않는 
   인덱스 로우들을 정리만 하지, 그 자료들의 재정렬 작업은 하지 않는다.)
   이런 이유로 주기적인 인덱스 재사용 작업은 
   서버의 성능을 높일 수 있는 요소가 된다.
  </para>

  <para>
   B-트리 인덱스가 아닌 경우는 팽창 정도가 얼마나 되는지 
   구체적으로 알 수 없다.  이 부분은 그 인덱스의 물리적 크기가 
   어느 정도 커지는지 주기적으로 직접 살펴봐야 한다.
  </para>

  <para>
   또한 B-트리 인덱스에서는 새로 만든 경우가 
   여러번 변경 작업을 한 인덱스보다 순차적인 인덱스 검색 속도가 빠르다.
   여러번의 변경 작업이 진행되다보면 해당 리프 페이지의 논리적인 
   순서와 물리적인 순서가 달라지기 때문이다. (이것을 pgstattuple 
   확장 모듈에서는 단편화라는 용어를 사용해서 그 빈도를 보여준다.
   B-트리 인덱스가 아닌 인덱스에 대해서는 이 현상이 발생하지 않는다.)
   그럼에도 불구하고 주기적으로 인덱스를 새롭게 만드는 방법이 
   검색 속도를 높이는데 도움을 준다.
  </para>

  <para>
   인덱스를 다시 새롭게 만드는 가장 손쉬운 방법은 
   REINDEX 명령을 이용하는 것이다.
   하지만 이 작업은 해당 테이블에 대해서 배타적 잠금을 지정하기 때문에 
   새로운 인덱스를 만들고, 옛 인덱스로 바꾸는 여러 작업으로 나누어
   진행하는 것이 일반적이다.  CREATE INDEX 명령을 
   사용할 때,
   해당 인덱스가 <literal>CONCURRENTLY</> 옵션을 사용 할 수 있으면 
   이 옵션을 이용하는 것도 한 방법이다.
   새 인덱스가 정상적으로 만들어졌으면, 
   옛 인덱스를 DROP INDEX 명령으로 지우고, 
   새 인덱스의 이름을  ALTER INDEX
   명령으로 바꾸면 된다.
   한편, 인덱스가 유니크나 기본키 제약조건에서 
   사용되면 새로 만들어진 새 인덱스를 ALTER TABLE
   명령을 통해서 제약조건 변경 작업을 하고, 옛 인덱스를 지우는 식으로 
   진행한다. 여기서 소개한 인덱스 다시 만들기 작업은 
   반드시 각 작업이 정상적으로 진행되지 못했을 경우 복구할 수 있는 
   방안에 대해서 꼼꼼히 준비해서 작업해야할 것이다.
  </para>
 </sect1>


 <sect1 id="logfile-maintenance">
  <title>로그 파일 관리</title>

  <indexterm zone="logfile-maintenance">
   <primary>서버 로그</primary>
   <secondary>로그 파일 관리</secondary>
  </indexterm>

  <para>
   데이터베이스 서버 로그를 <filename>/dev/null</> 쪽으로 보내서
   그냥 버리기 보다 그것을 어떤 장소에 보관하는 것이 좋다.
   왜냐하면 장애 원인 분석을 할 때 서버 로그는 중요한 단서가 
   되기 때문이다.  하지만 원인 분석을 위해서 
   서버 로그를 보다 자세히 남기도록 설정을 했거나 
   서버가 바빠서 로그가 많이 쌓이는 경우, 그 로그 파일이
   분석하기 힘들 정도로 크기가 커지기도 한다.
   이러 이유로 서버 로그 파일에 대한 주기적인 관리 작업이 필요하다. 
   대표적인 작업이 로그를 크기나 날짜 단위로 쪼개서 로그 파일의 크기를 
   분석하기 편하도록 하는 일과 아주 오래된 로그 파일들을 지워 
   로그 파일이 쌓이는 디렉토리의 여유 공간을 일정하게 유지 하도록
   하는 일 등이다.
  </para>

  <para>
   서버 로그를 파일로 저장하는 가장 간단한 방법은 
   <command>agens</command>의 <systemitem>stderr</>
   출력을 파일로 저장하는 것이다.  하지만,
   이렇게 로그 파일을 만들면 로그 파일을 바꾸려고 할 경우 
   서버를 중지 하거나 재실행 해야한다.  
   이런 운영 방식은 개발 환경에서는 수용할 수 있지만, 
   운영 환경 에서는 수용하기 힘들다.
  </para>

  <para>
   <systemitem>stderr</> 출력을 파일로 저장 할 때는 
   그 내용을 특정 로그 파일로 쉽게 바꾸어 저장할 수 있는 프로그램을 
   사용한다.  이 방법 말고 서버 내부적으로 이런 로그 파일을 
   바꾸는 기능을 이용하는 방법도 있다.  이 기능을 사용하려면, 
   <filename>postgresql.conf</>에서
   <varname>logging_collector</> 환경 설정값을 <literal>true</>로
   지정하고, 서버를 재실행 한다.
   이 기능의 작동 방식을 제어하는 환경 설정 매개 변수들이 
   몇가지 있는데, 이들에 대한 자세한 설명은 <xref
   linkend="runtime-config-logging-where">에서 한다.
   또한, 서버 로그를 컴퓨터가 쉽게 분석할 수 있도록,
   <acronym>CSV</>(반점 구분 양식, comma-separated values)
   형태로 로그를 저장 할 수도 있다.
  </para>

  <para>
   앞에서 잠깐 언급한 <systemitem>stderr</> 출력을 그대로 
   사용해서 로그 파일를 쉽게 바꾸는 방법 가운데 하나는
   <productname>Apache</productname> 배포판에서 제공하는
   <application>rotatelogs</application> 프로그램을 
   파이프를 통해 사용하는 것이다.
   <command>pg_ctl</> 명령으로 서버를 기동하면, 
   이 프로그램은 모든 <systemitem>stderr</> 출력을
   <systemitem>stdout</> 쪽으로 보내기 때문에 
   단순하게 다음과 같은 명령으로 사용할 수 있다.

<programlisting>
pg_ctl start | rotatelogs /var/log/pgsql_log 86400
</programlisting>
  </para>

  <para>
   로그 파일을 다루는 또 다른 한가지 방법은 
   그 출력을 <application>syslog</> 쪽으로 보내는 것이다. 
   이렇게 하면 <application>syslog</> 프로그램이 
   로그 파일 관리에 대한 부분을 모두 담당한다.
   이렇게 설정하려면 
   <filename>postgresql.conf</> 파일에서
   <varname>log_destination</> 환경 설정 값을
   <literal>syslog</>로 지정한다.
   <application>syslog</> 프로세스에 
   <literal>SIGHUP</literal> 시그널을 보내서
   로그 파일을 바꿀 수 있을 것이다. 
   물론 <application>syslog</application> 프로세스가 
   다루는 여느 로그 파일과 같이
   <application>logrotate</application> 을 이용해서
   그 파일을 특정 기준으로 바꿀 수도 있다.
  </para>

  <para>
   하지만, 많은 시스템에서 이 방법은 잘 사용되지 않는다. 
   <application>syslog</> 특성상 
   기록해야할 내용이 너무 많으면 그 내용을 자르거나 
   시스템이 너무 바쁘면 로그 기록을 간혹 안하기 때문이다. 
   또한 <productname>Linux</> 환경에서는 
   기본적으로 로그 내용 하나를 파일에 기록할 때마다 
   OS의 디스크 I/O 버퍼에 있는 내용을 디스크와 동기화 하기 
   때문에 성능 저하를 초래한다.  (<application>syslog</>
   환경 설정 파일에 지정하는 로그 파일 이름 앞에 
   <quote><literal>-</></> 문자를 더 적어주면 
   이런 디스크 동기화 작업을 생략할 있다.)
  </para>

  <para>
   로그 파일을 관리하는 작업 가운데 또 하나 고려 해야할 사항은
   아주 오래된 로그 파일 처리에 대한 정책을 세우는 일이다. 
   일반적으로 일정 기간이 지난 로그 파일은 
   주기적으로 삭제하는 정책을 만든다.
   그리고 그 작업을 자동화 하는 방식을 택한다. 
   또 다른 방법은 로그 파일 이름을 순환 하는 형태로 정하고 
   해당 로그를 해당 파일에 기록하는 방식을 사용해서 
   로그 파일 개수가 일정하게 유지 되도록 한다.
  </para>

  <para>
   아울러 이 로그 파일을 사용하는 몇몇 도구를 소개하면 
   <ulink url="http://dalibo.github.io/pgbadger/"><productname>pgBadger</productname></ulink>
   라는 서버가 남긴 로그 파일을 정교하게 분석해서 보여주는 
   외부 프로젝트가 있다.
   <ulink
   url="http://bucardo.org/wiki/Check_postgres"><productname>check_postgres</productname></ulink>
   스크립트는 Nagios 경고 모듈로 사용할 수 있다.
   이것으로 로그 파일에 기록 된 내용들 가운데 
   경고가 필요한 내용을 정교하게 지정해서 찾을 수도 있다.
  </para>
 </sect1>
</chapter>

