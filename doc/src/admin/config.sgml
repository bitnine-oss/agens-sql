<!-- doc/src/sgml/config.sgml -->

<chapter id="runtime-config">
<title>서버 환경 설정</title>

<indexterm>
 <primary>환경 설정</primary>
 <secondary>서버</secondary>
</indexterm>

<para>
 데이터베이스 시스템의 동작에 영향을 주는 환경 설정 매개변수는 여러 가지가 있다. 
 본문의 첫 번째 절에서는 환경 설정 매개변수와 인터랙션하는 방법을 설명하고 그 다음 절부터 각 매개변수를 자세하게 다룬다.
</para>

<sect1 id="config-setting">
 <title>매개변수 설정</title>

 <sect2 id="config-setting-names-values">
<title>매개변수 이름 및 값</title>

<para>
 모든 매개변수 이름은 대소문자를 구분한다. 
 각 매개변수 값은 boolean 또는 string, integer, floating point, enumerated(enum)의 5가지 타입 중 하나이다. 
 데이터 타입은 매개변수 설정을 위한 구문을 설정한다.
</para>

<itemizedlist>
 <listitem>
<para>
 <emphasis>Boolean:</emphasis>
 <literal>on</literal>,
 <literal>off</literal>,
 <literal>true</literal>,
 <literal>false</literal>,
 <literal>yes</literal>,
 <literal>no</literal>,
 <literal>1</literal>,
 <literal>0</literal>
 (대소문자 구문 안함) 또는 <literal>t</literal>, <literal>f</literal>, <literal>y</literal>, <literal>n</literal> 중 하나로 값을 설정할 수 있다.
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>String:</emphasis>
 일반적으로 앞뒤에 작은따옴표가 표시되며, 값 내의 작은따옴표에는 작은따옴표를 하나 더 붙여준다.
 값이 보통 단순한 숫자 또는 식별자일 경우에는 따옴표를 생략할 수 있다.
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>Numeric (integer 와 floating point):</emphasis>
 소수점은 floating-point 매개변수일 때만 허용된다. 천 단위 구분자를 사용하면 안 된다(예: 1,000,000에서 ','). 따옴표는 불필요하다.
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>단위가 있는 Numeric:</emphasis>
 일부 숫자 매개변수는 메모리 또는 시간을 설명하므로 암시적 단위를 갖고 있다. 
 단위는 킬로바이트, 블록(보통 8킬로바이트), 밀리초, 초, 분일 수 있다. 
 이러한 설정들 중 단위가 없는 숫자 값은 설정의 기본 단위를 사용하는데, <structname>pg_settings</>.<structfield>unit</>에서 확인할 수 있다. 
 편의상, 설정은 명시적으로 지정된 단위를 지정할 수 있다. 
 예를 들면, 시간 값이 <literal>'120 ms'</>인 경우, 매개변수의 실제 단위가 무엇이든 변환 된다. 
 이 기능을 사용하려면 값을 string(따옴표 포함)으로 작성해야 한다는 점에 유의하라. 
 단위 이름은 대소문자를 구분하며, 숫자 값과 단위 사이에 공백이 올 수 있다.
 <itemizedlist>
<listitem>
 <para>
유효 메모리 단위는 <literal>kB</literal>(킬로바이트) 및 <literal>MB</literal>(메가바이트), <literal>GB</literal>(기가바이트), <literal>TB</literal>(테라바이트)이다. 
메모리 승수는 1024이다(1000이 아니고).
 </para>
</listitem>

<listitem>
 <para>
유효 시간 단위는 <literal>ms</literal>(밀리초), <literal>s</literal>(초), <literal>min</literal>(분), <literal>h</literal>(시) 및 <literal>d</literal>(일)이다.
 </para>
</listitem>
 </itemizedlist>
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>Enumerated:</emphasis>
 Enumerated 타입의 매개변수는 string 매개변수와 작성 방식이 동일하지만 값 집합이 하나로 제한된다. 
 이 매개변수에서 허용되는 값은 <structname>pg_settings</>.<structfield>enumvals</>를 참고할 수 있다. 
 Enum 매개변수 값은 대소문자를 구분하지 않는다.
</para>
 </listitem>
</itemizedlist>
 </sect2>

 <sect2 id="config-setting-configuration-file">
<title>환경 설정 파일을 통한 매개변수 인터랙션</title>

<para>
 이러한 매개변수를 설정하는 가장 기본적인 방법은 일반적으로 데이터 디렉토리에 있는 <filename>postgresql.conf</><indexterm><primary>postgresql.conf</></> 파일을 편집하는 것이다. 
 데이터베이스 클러스터 디렉토리가 초기화된 경우 기본 사본이 설치된다. 
 이 파일과 유사한 예시는 다음과 같다.
<programlisting>
# This is a comment
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
</programlisting>
 라인당 매개변수 하나가 지정되어 있다. 이름과 값 사이의 등호는 옵션이다. 
 공백은 중요하지 않으며(따옴표로 둘러싼 매개변수 제외), 빈 라인은 무시된다. 
 해시 마크(<literal>#</literal>)는 라인의 나머지가 주석임을 의미한다. 
 단순 식별자 또는 숫자가 아닌 매개변수 값은 작은따옴표를 사용해야 한다. 
 작은따옴표를 매개변수 값에 포함하려면 작은따옴표를 하나 더 붙이거나, 역슬래시와 따옴표를 사용해야 한다.
</para>

<para>
 이렇게 설정된 매개변수는 클러스터에 기본값으로 제공된다. 
 값을 오버라이드하지 하지 않는 이상 활성 세션에서 보이는 설정은 이 값들이다. 
 다음 절에서는 관리자 또는 사용자가 이러한 기본값을 오버라이드하는 방법을 설명한다.
</para>

<para>
 <indexterm>
<primary>SIGHUP</primary>
 </indexterm>
 메인 서버 프로세스가 <systemitem>SIGHUP</> 신호를 수신할 때마다 환경 설정 파일이 다시 읽히게 된다. 
 커맨드 라인에서 <literal>pg_ctl reload</>를 실행하거나 SQL 함수 <function>pg_reload_conf()</function>를 호출하면 <systemitem>SIGHUP</>가 전송된다.
 또한 메인 서버 프로세스는 현재 실행 중인 모든 서버 프로세스에 이 신호를 퍼트려서 기존 세션에도 새 값이 적용되게 한다
 (현재 실행 중인 클라이언트 명령이 완료된 후에 진행됨). 
 또는 사용자가 단일 서버 프로세스에 직접 신호를 전송할 수도 있다. 
 일부 매개변수는 서버 시작 시에만 설정 가능하다. 
 환경 설정 파일의 엔트리를 변경하면 서버가 재시작되기 전까지 무시된다. 
 마찬가지로, 환경 설정 파일에서 잘못된 매개변수 설정도 <systemitem>SIGHUP</> 처리 중에 무시된다(단, 로그에는 기록된다).
</para>

<para>
 <filename>postgresql.conf</> 외에 <productname>Agens SQL</productname> 데이터 디렉토리에는 
 <filename>postgresql.auto.conf</><indexterm><primary>postgresql.auto.conf</></> 파일이 포함되어 있으며, 
 <filename>postgresql.conf</>와 형식은 동일하지만 직접 편집해서는 안 된다. 
 이 파일에는 ALTER SYSTEM 명령을 통해 제공되는 설정이 포함되어 있다. 
 <filename>postgresql.conf</>가 존재할 때마다 이 파일을 자동으로 읽어오고, 해당 설정이 동일하게 적용된다. 
 <filename>postgresql.auto.conf</>의 설정은 <filename>postgresql.conf</>의 설정을 오버라이드한다.
</para>
 </sect2>

 <sect2 id="config-setting-sql-command-interaction">
<title>SQL을 통한 매개변수 인터랙션</title>

 <para>
<productname>Agens SQL</productname>는 환경 설정 기본값을 설정하기 위한 3가지 SQL 명령을 제공한다. 
앞에서 언급한 ALTER SYSTEM 명령은 SQL 구문으로 전역 기본값을 변경할 수 있는 방법을 제공하는데, 
기능상 <filename>postgresql.conf</>를 편집하는 것과 동일하다. 
또, 데이터베이스별로 또는 role별로 기본값 설정이 가능한 명령이 2가지 있다.
 </para>

 <itemizedlist>
 <listitem>
<para>
 ALTER DATABASE 명령은 전역 설정을 데이터베이스별로 오버라이드한다.
</para>
 </listitem>

 <listitem>
<para>
 ALTER ROLE 명령은 전역 및 데이터베이스별 설정을 모두 사용자 지정 값으로 오버라이드한다.
</para>
 </listitem>
</itemizedlist>

 <para>
<command>ALTER DATABASE</> 및 <command>ALTER ROLE</>로 설정된 값은 데이터베이스 세션을 새로 시작하는 경우에만 적용된다. 
이것은 환경 설정 파일 또는 서버 커맨드 라인에서 구한 값을 오버라이드하고 나머지 세션에 대해 기본값을 적용한다. 
서버 시작 후에 일부 설정은 변경이 불가하므로 이 명령(또는 아래 나열된 것 중 하나)으로 설정할 수 없다는 점에 유의해야 한다.
</para>

 <para>
클라이언트가 데이터베이스에 연결되면 <productname>Agens SQL</> 세션-로컬 환경 설정 설정과 
인터랙션이 가능한 SQL 명령(또는 동등한 함수) 2개를 추가 제공한다.
</para>

<itemizedlist>
 <listitem>
 <para>
SHOW 명령으로 모든 매개변수의 현재 값을 확인할 수 있다. 
해당 함수는 <function>current_setting(setting_name text)</function>이다.
 </para>
 </listitem>

 <listitem>
<para>
 SET 명령으로는 세션에 로컬로 설정할 수 있는 이 매개변수의 현재 값을 수정할 수 있다. 
 다른 세션에는 영향을 미치지 않는다. 해당 함수는 <function>set_config(setting_name, new_value, is_local)</function>이다.
</para>
 </listitem>
</itemizedlist>

<para>
 또한, 시스템 뷰 <structname>pg_settings</>는 세션-로컬 값을 확인하고 변경하는 데 사용할 수 있다.
</para>

<itemizedlist>
 <listitem>
<para>
 뷰 쿼리는 <command>SHOW ALL</>과 유사하지만, 좀 더 상세한 결과를 보여준다. 
 또한 필터 조건을 지정하거나 다른 릴레이션과 조인할 수 있어서 좀 더 유연하다.
</para>
 </listitem>

 <listitem>
<para>
 이 뷰에서, setting 칼럼을 업데이트하기 위해 UPDATE를 사용하는 것은 <command>SET</> 명령을 실행하는 것과 동일하다. 예를 들면,
<programlisting>
SET configuration_parameter TO DEFAULT;
</programlisting>
 위의 구문은 아래와 동일하다.
<programlisting>
UPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';
</programlisting>
</para>
 </listitem>
</itemizedlist>

 </sect2>

 <sect2>
<title>쉘을 통한 매개변수 인터랙션</title>

 <para>
전역 기본값을 설정하거나 데이터베이스 또는 role 레벨에서 오버라이드 하는 것 외에도, 
쉘을 통해 <productname>Agens SQL</productname>로 설정을 전달할 수 있다. 
서버와 <application>libpq</> 클라이언트 라이브러리 모두 쉘을 통해 매개변수를 전달 받는다.
 </para>

 <itemizedlist>
<listitem>
<para>
 서버 시작 도중에 <option>-c</> 커맨드 라인 매개변수를 사용하여 매개변수 설정을 <command>postgres</command> 명령에 전달할 수 있다. 
 예를 들면,
<programlisting>
postgres -c log_connections=yes -c log_destination='syslog'
</programlisting>
 이런 방법으로 제공된 설정은 <filename>postgresql.conf</> 또는 <command>ALTER SYSTEM</>을 통해 해당 설정을 오버라이드 하므로 
 서버를 재시작하지 않고는 전역적으로 설정을 변경할 수 없다.
 </para>
</listitem>

<listitem>
 <para>
<application>libpq</>를 통해 클라이언트 세션을 시작하면 <envar>PGOPTIONS</envar> 환경 변수를 사용하여 매개변수 설정이 될 수 있다.
이 설정값이 세션의 생명주기 동안 기본값이 되지만 다른 세션에는 영향을 주지 않는다. 
<envar>PGOPTIONS</envar>은 <command>postgres</command> 명령과 비슷한 형식으로,
<option>-c</> 플래그를 지정해야 한다.
예를 들면,
<programlisting>
env PGOPTIONS="-c geqo=off -c statement_timeout=5min" psql
</programlisting>
 </para>

 <para>
기타 클라이언트 및 라이브러리는 쉘로 자체 메커니즘을 제공하거나 SQL 명령을 직접적으로 사용하지 않고, 사용자가 세션 설정을 변경할 수 있게 한다.
 </para>
</listitem>
 </itemizedlist>

 </sect2>

 <sect2 id="config-includes">
<title>환경 설정 파일 내용 관리</title>

 <para>
<productname>Agens SQL</>는 복잡한 <filename>postgresql.conf</> 파일을 작은 파일로 세분화하는 기능들을 제공한다. 
이 기능들의 환경 설정 방식이 동일하지는 않지만, 관련 있는 서버들을 관리할 때 특히 유용하다.
 </para>

 <para>
<indexterm>
 <primary><literal>include</></primary>
 <secondary>환경 설정 파일</secondary>
</indexterm>
개별적인 매개변수 설정 외에, <filename>postgresql.conf</> 파일에는 <firstterm>include
지시어</>가 있다. 읽어올 다른 파일을 지정하여, 환경 설정 파일에 파일이 삽입된 것 같이 처리된다.
이 기능은 환경 설정 파일을 물리적으로 분할 한다. 
Include 지시어는 간략하게 다음과 같다.
<programlisting>
include 'filename'
</programlisting>
파일 이름이 절대 경로가 아니면 참조하는 환경 설정 파일 디렉토리의 상대 경로로 취급된다. include는 중첩이 가능하다.
 </para>

 <para>
<indexterm>
 <primary><literal>include_if_exists</></primary>
 <secondary>환경 설정 파일 내</secondary>
</indexterm>
<literal>include_if_exists</> 지시어도 있는데, 이것은 참조 파일이 존재하지 않거나 파일을 읽을 수 없는 경우 외에는 
<literal>include</> 지시어와 동일하게 작동된다. 
<literal>include</>는 이것을 에러 조건으로 간주하지만, <literal>include_if_exists</>는 단순히 메시지를 로깅하여 참조 환경 설정 파일을 계속 처리 한다.
 </para>

 <para>
<indexterm>
 <primary><literal>include_dir</></primary>
 <secondary>환경 설정 파일 내</secondary>
</indexterm>
<filename>postgresql.conf</> 파일에는 <literal>include_dir</literal>도 포함될 수 있는데, 
다음과 같이 포함할 환경 설정 파일의 경로를 지정한다.
<programlisting>
include_dir '경로'
</programlisting>
절대 경로가 아니면 참조하는 환경 설정 파일 디렉토리의 상대 경로로 취급된다. 
지정된 디렉토리 내에서 디렉토리가 아닌 파일은 이름이 <literal>.conf</literal>로 끝나는 경우에만 포함된다. 
해당 파일이 일부 플랫폼에서 숨겨질 수 있으므로 실수 예방 차원에서 문자 <literal>.</literal>로 시작되는 파일 이름도 무시된다. 
include 디렉토리 내의 파일들은 파일 이름 순으로 처리된다(C 로케일(locale) 규칙에 따라, 예를 들면, 숫자-문자 순 및 대문자-소문자 순).
 </para>

 <para>
Include 파일 또는 디렉토리는 <filename>postgresql.conf</> 파일 하나만 쓰지 않고, 데이터베이스 환경 설정을 논리적으로 분리하는 데 사용될 수 있다. 
메모리 용량이 각각 다른 데이터베이스 서버 2대를 운용하는 회사를 생각해보자. 
로깅 같이 데이터베이스 2개가 공유하는 환경 설정 요소가 있을 가능성이 높다. 
그러나 서버의 메모리 관련 매개변수는 서로 상이할 것이고, 서버마다 커스텀화 했을 것이다. 
이러한 상황을 관리하는 방법은 커스텀화 된 환경 설정 변경 내용을 3개의 파일로 분할하는 것이다. 
사용자는 아래 코드를 <filename>postgresql.conf</> 파일의 끝에 추가하여 각 파일을 포함하면 된다.
<programlisting>
include 'shared.conf'
include 'memory.conf'
include 'server.conf'
</programlisting>
모든 시스템의 <filename>shared.conf</> 파일은 동일하다. 
메모리 크기가 다른 각 서버는 동일한 <filename>memory.conf</>를 공유할 수 있다. 
사용자는 RAM이 8GB인 서버와 16GB인 서버를 모두 한 파일로 관리할 수 있다. 
그리고 <filename>server.conf</>에는 서버별 환경 설정 정보가 포함된다.
 </para>

 <para>
환경 설정 파일 디렉토리를 생성하고 이 정보를 그 파일에 넣는 방법도 있다. 
예를 들면, <filename>conf.d</> 디렉토리는 <filename>postgresql.conf</>의 마지막 엔트리로 참조할 수 있다.
<programlisting>
include_dir 'conf.d'
</programlisting>
그런 다음, <filename>conf.d</> 디렉토리의 파일 이름을 다음과 같이 지정한다.
<programlisting>
00shared.conf
01memory.conf
02server.conf
</programlisting>
 이러한 명명 규칙으로 파일이 로드되는 순서가 명확해진다. 
 서버가 환경 설정 파일을 읽을 때, 매개변수의 마지막 설정만 적용된다.
 이 예시에서, <filename>conf.d/02server.conf</>에서 설정된 값들은 <filename>conf.d/01memory.conf</>에서 설정된 값을 오버라이드한다.
 </para>

 <para>
이 방법을 대신 사용하여 파일을 서술적으로 명명할 수 있다.
<programlisting>
00shared.conf
01memory-8GB.conf
02server-foo.conf
</programlisting>
이러한 배치 순서는 각각의 환경 설정 파일 변화에 대해 고유한 이름을 부여한다. 
이로써 버전 관리 저장소처럼 몇 개의 서버 환경 설정이 한곳에 저장되는 경우 모호함이 줄어든다
(데이터베이스 환경 설정 파일을 버전 관리에 저장하는 것도 생각해 볼만하다.).
 </para>
</sect2>
 </sect1>

 <sect1 id="runtime-config-file-locations">
<title>파일 위치</title>

 <para>
앞에서 언급한 <filename>postgresql.conf</filename> 파일 외에도 <productname>Agens SQL</productname>는 수동으로 편집되는 
환경 설정 파일 2개를 사용하는데, 이 파일은 클라이언트 인증을 관리하는 파일이다(이 파일은 <xref
linkend="client-authentication">에서 다룬다). 기본적으로 3개의 환경 설정 파일 모두 데이터베이스 클러스터의 데이터 디렉토리에 저장된다. 
이 절에서 설명하는 매개변수는 환경 설정 파일을 다른 곳에 배치할 수 있다(그렇게 하면 관리가 편하다. 
특히, 환경 설정 파일이 별도로 관리되는 경우에는 환경 설정 파일을 백업하기가 훨씬 쉽다.).
 </para>

 <variablelist>
 <varlistentry id="guc-data-directory" xreflabel="data_directory">
<term><varname>data_directory</varname> (<type>string</type>)
<indexterm>
 <primary><varname>data_directory</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 데이터 저장소로 사용되는 디렉토리를 지정한다. 이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-config-file" xreflabel="config_file">
<term><varname>config_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>config_file</>환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 메인 서버 환경 설정 파일(통상적으로 <filename>postgresql.conf</>라고 함)을 지정한다. 
 이 매개변수는 <command>postgres</command> 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-hba-file" xreflabel="hba_file">
<term><varname>hba_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>hba_file</>환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 호스트 기반 인증(통상적으로 <filename>pg_hba.conf</>라고 함)용 환경 설정 파일을 지정한다. 
 이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ident-file" xreflabel="ident_file">
<term><varname>ident_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ident_file</>환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 <xref linkend="auth-username-maps"> 사용자 이름 맵핑(통상적으로 <filename>pg_ident.conf</>라고 함)용 환경 설정 파일을 지정한다. 
 이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-external-pid-file" xreflabel="external_pid_file">
<term><varname>external_pid_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>external_pid_file</>환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 관리 프로그램에서 사용하기 위해 서버가 생성해야 하는 추가적인 프로세스 ID(PID) 파일의 이름을 정한다. 
이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>
 </variablelist>

 <para>
기본적으로 위 매개변수들은 설정되어 있지 않다.
데이터 디렉토리는 <option>-D</option> 커맨드 라인 옵션 또는 <envar>PGDATA</envar> 환경 변수로 지정되고, 
모든 환경 설정 파일은 데이터 디렉토리에 위치한다.
 </para>

 <para>
데이터 디렉토리가 아닌 다른 곳에 환경 설정 파일을 저장하고 싶으면 
<command>postgres</command> <option>-D</option> 커맨드 라인 옵션 또는 
<envar>PGDATA</envar> 환경 변수가 환경 설정 파일이 있는 곳의 위치를 가리켜야 하고, 
데이터 디렉토리가 실제로 어디에 있는지를 보여주는 <varname>data_directory</> 매개변수는 
<filename>postgresql.conf</filename>(또는 커맨드 라인에서)에 설정되어야 한다. 
<varname>data_directory</>는 환경 설정 파일의 위치가 아니라 
데이터 디렉토리의 위치에 대해 <option>-D</option> 및 <envar>PGDATA</envar>를 오버라이드한다.
 </para>

 <para>
<varname>config_file</>, 
<varname>hba_file</> 및/또는 <varname>ident_file</> 매개변수를 사용하여 환경 설정 파일의 이름과 위치를 지정할 수 있다. 
<varname>config_file</>은 <command>postgres</command> 커맨드 라인에서만 지정 가능하고, 
기타 파일은 주 환경 설정 파일 내에서 설정할 수 있다. 
이 3가지 매개변수와 <varname>data_directory</>를 설정하면, <option>-D</option>와 <envar>PGDATA</envar>를 지정할 필요 없다.
 </para>

 <para>
이 3가지 매개변수는 설정 시 <command>postgres</command>가 시작된 디렉토리의 상대 경로로 해석된다.
 </para>
 </sect1>

 <sect1 id="runtime-config-connection">
<title>연결 및 인증</title>

<sect2 id="runtime-config-connection-settings">
 <title>연결 설정</title>

 <variablelist>

 <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
<term><varname>listen_addresses</varname> (<type>string</type>)
<indexterm>
 <primary><varname>listen_addresses</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 서버가 클라이언트 애플리케이션에서 들어온 연결을 listen하는 TCP/IP 주소를 지정한다. 
 값은 호스트 이름 및/또는 숫자 IP 주소가 쉼표로 구분된 목록의 형태이다.
 <literal>*</>는 사용 가능한 IP 인터페이스 모두를 뜻한다. 
 <literal>0.0.0.0</>은 모든 IPv4 주소에 대해 listen하며, <literal>::</>는 모든 IPv6 주소에 대해 listen한다는 뜻이다.
 목록이 빈칸이면 서버가 IP 인터페이스를 일절 listen하지 않으며, 이런 경우 Unix 도메인 소켓만 사용해서 연결할 수 있다는 뜻이다.
 기본값은 <systemitem class="systemname">localhost</>이며, 로컬 TCP/IP <quote>루프백</> 연결을 구성한다. 
 클라이언트 인증(<xref
 linkend="client-authentication">)으로 서버 접근 권한을 세분화할 수 있는 반면,
 <varname>listen_addresses</varname>는 연결 시도를 수락하는 인터페이스를 제어하여
 안전하지 않은 네트워크 인터페이스 상에서 악의적 연결 요청이 반복되는 것을 방지할 수 있다. 
 이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-port" xreflabel="port">
<term><varname>포트</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>포트</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
기본적으로 서버가 listen하는 TCP 포트는 5432이다. 
서버가 listen하는 모든 IP 주소에 동일한 포트 번호가 사용된다. 
이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-connections" xreflabel="max_connections">
<term><varname>max_connections</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_connections</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 서버 동시 접속 최대 수를 결정한다. 
기본값은 일반적으로 100이지만, 커널이 100을 지원하지 않으면 이보다 낮을 수도 있다(<application>initdb</> 중에 결정됨). 
이 매개변수는 서버 시작 시 설정된다.
 </para>

 <para>
대기 서버 실행 중에 사용자는 max_connections를 마스터 서버의 값보다 크거나 같게 설정해야 한다. 
그렇게 하지 않으면 대기 서버가 쿼리를 허용하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-superuser-reserved-connections"
 xreflabel="superuser_reserved_connections">
<term><varname>superuser_reserved_connections</varname>
(<type>integer</type>)
<indexterm>
 <primary><varname>superuser_reserved_connections</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>Agens SQL</> 슈퍼유저의 연결용으로 예약된 연결 <quote>슬롯</quote> 수를 결정한다. 
최대 <xref linkend="guc-max-connections"> 까지 결정된다.
동시 연결 수가 <varname>max_connections</>에서 <varname>superuser_reserved_connections</varname>를 뺀 값보다 크면
슈퍼유저만 더 연결되고 복제 연결은 되지 않는다.
 </para>

 <para>
기본값은 3이고, <varname>max_connections</varname> 미만이어야 한다. 이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-unix-socket-directories" xreflabel="unix_socket_directories">
<term><varname>unix_socket_directories</varname> (<type>string</type>)
<indexterm>
 <primary><varname>unix_socket_directories</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버가 클라이언트 애플리케이션 연결을 listen하는 도메인 소켓의 디렉토리이다. 
디렉토리들을 쉼표로 구분하여 나열하면 소켓들을 생성할 수 있다. 항목 간 공백은 무시된다. 
이름에 공백이나 쉼표를 넣어야 하는 경우 디렉토리 이름 앞뒤에 큰따옴표를 사용한다. 
값을 빈칸으로 두면 Unix 도메인 소켓에서 일절 listen하지 않는다. 이때 TCP/IP 소켓만 서버에 연결하는 데 사용될 수 있다. 
기본값은 통상 <filename>/tmp</filename>이지만, 빌드 시에는 변경 가능하다. 이 매개변수는 서버 시작 시 설정된다.
 </para>

 <para>
소켓 외에, 파일 자체의 이름도 <literal>.s.PGSQL.<replaceable>nnnn</></literal>이다. 
여기서 <replaceable>nnnn</>은 서버의 포트 번호이며, 
이름이 <literal>.s.PGSQL.<replaceable>nnnn</>.lock</literal>인 일반 파일이 각 <varname>unix_socket_directories</> 디렉토리에 생성된다. 
어떤 파일이든 수동으로 삭제하면 절대 안 된다.
 </para>

 <para>
Unix 도메인 소켓이 없는 Windows와 이 매개변수는 무관하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
<term><varname>unix_socket_group</varname> (<type>string</type>)
<indexterm>
 <primary><varname>unix_socket_group</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
Unix 도메인 소켓의 소유자 그룹을 설정한다. 
(소켓을 소유한 사용자는 항상 서버를 시작하는 사용자이다.) 
<varname>unix_socket_permissions</varname> 매개변수와 함께 unix_socket_group을 Unix 도메인 연결 시 접근 제어 메커니즘으로 사용할 수 있다. 
기본적으로 unix_socket_group은 비어 있는 string이며, 서버 사용자의 기본 그룹을 사용한다. 이 매개변수는 서버 시작 시 설정된다.
 </para>

 <para>
Unix 도메인 소켓이 없는 Windows와 이 매개변수는 무관하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
<term><varname>unix_socket_permissions</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>unix_socket_permissions</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
Unix 도메인 소켓의 액세스 권한을 설정한다. Unix 도메인 소켓은 일반적인 Unix 파일 시스템 권한 세트를 사용한다. 
매개변수 값은 <function>chmod</function> 및 <function>umask</function> 시스템 쉘에서 수용되는 숫자 형식을 따른다
(8진수 형식을 사용하려면 <literal>0</literal>(영)으로 시작되는 숫자여야 한다.).
 </para>

 <para>
기본 권한은 누구나 연결 가능한 <literal>0777</literal>이다. 
합리적인 다른 대안은 <literal>0770</literal>(사용자와 그룹만. <varname>unix_socket_group</varname> 참조) 및 <literal>0700</literal>(사용자만)이다. 
(Unix 도메인 소켓의 경우 쓰기 권한에만 해당되는 문제이므로, 읽기 설정이나 취소 또는 실행 권한과는 무관하다.)
 </para>

 <para>
이러한 접근 제어 메커니즘은 <xref linkend="client-authentication">에 설명된 것과는 별개이다.
 </para>

 <para>
이 매개변수는 서버 시작 시 설정된다.
 </para>

 <para>
이 매개변수는 특히 현재 Solaris 10인 Solaris 시스템과 무관하다. 
Solaris는 소켓 권한을 완전히 무시한다. 
<varname>unix_socket_directories</>를 원하는 대상에 한정된 검색 권한을 갖고 있는 디렉토리로 하여 유사한 효과를 낼 수 있다. 
Unix 도메인 소켓이 없는 Windows에서 이 매개변수는 사용할 수 없다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-bonjour" xreflabel="bonjour">
<term><varname>bonjour</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>bonjour</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>Bonjour</productname>를 통해 서버의 존재를 알린다. 기본값은 off이다. 이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
<term><varname>bonjour_name</varname> (<type>string</type>)
<indexterm>
 <primary><varname>bonjour_name</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>Bonjour</productname> 서비스 이름을 지정한다. 
이 매개변수가 비어 있는 string <literal>''</>으로 설정된 경우 컴퓨터 이름이 사용된다(기본값). 
서버가 <productname>Bonjour</productname> 지원으로 컴파일되지 않은 경우 이 매개변수가 무시된다. 
이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
<term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>tcp_keepalives_idle</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
TCP가 keepalive 메시지를 클라이언트에 전송하기 전에 비활성화 상태로 대기하는 시간(초). 
0을 지정하면 시스템 기본값을 사용한다. 
<symbol>TCP_KEEPIDLE</> 또는 <symbol>TCP_KEEPALIVE</> 심볼을 지원하는 시스템과 Windows에서만 지원된다.
다른 시스템에서는 항상 0이어야 한다. 
Unix 도메인 소켓을 통해 연결된 세션에서 이 매개변수는 무시되고 항상 0으로 읽힌다.
 </para>
 <note>
<para>
 Windows는 시스템 기본값을 읽을 수 있는 방법이 없으므로 Windows에서 0은 2시간으로 설정된다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
<term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>tcp_keepalives_interval</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
클라이언트에 의해 승인되지 않은 TCP keepalive 메시지를 재전송하기 전에 대기하는 시간(초).
0은 기본값을 사용한다. <symbol>TCP_KEEPINTVL</> 심볼을 지원하는 시스템과 Windows에서만 지원된다.
다른 시스템에서는 항상 0이어야 한다. 
Unix 도메인 소켓을 통해 연결된 세션에서는 항상 0으로 읽힌다.
 </para>
 <note>
<para>
 Windows는 시스템 기본값을 읽을 수 있는 방법이 없으므로 Windows에서 0은 1초로 설정된다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
<term><varname>tcp_keepalives_count</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>tcp_keepalives_count</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
몇 개의 TCP keepalive를 분실해야 클라이언트와 서버의 연결 상태를 dead로 판단하는 기준이 되는 지를 정한다. 
0은 시스템 기본값을 사용한다. 이 매개변수는 <symbol>TCP_KEEPCNT</> 심볼을 지원하는 시스템과 기타 시스템에서만 지원된다.
다른 시스템에서는 항상 0이어야 한다. 
Unix 도메인 소켓을 통해 연결된 세션에서는 항상 0으로 읽힌다.
 </para>
 <note>
<para>
 이 매개변수는 Windows에서 지원되지 않으며, 0이어야 한다.
</para>
 </note>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>
 <sect2 id="runtime-config-connection-security">
 <title>보안 및 인증</title>

 <variablelist>
 <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
<term><varname>authentication_timeout</varname> (<type>integer</type>)
<indexterm><primary>timeout</><secondary>클라이언트 인증</></indexterm>
<indexterm><primary>클라이언트 인증</><secondary>timeout during</></indexterm>
<indexterm>
 <primary><varname>authentication_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>

<listitem>
 <para>
클라이언트 인증이 완료되는 최대 시간. 초 단위. 클라이언트가 이 시간 내에 인증 프로토콜이 완료되지 않은 경우 서버는 연결을 닫는다. 
이로써 응답이 없는 클라이언트가 연결을 무기한 점유하는 것을 방지한다. 
기본값은 1분이다(<literal>1m</>). 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl" xreflabel="ssl">
<term><varname>ssl</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>ssl</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<acronym>SSL</> 연결을 설정한다. 이것을 사용하기 전에 <xref linkend="ssl-tcp">을 읽어보기 바란다. 
기본값은 <literal>off</>이다. 이 매개변수는 서버 시작 시 설정된다.
<acronym>SSL</> 통신은 유일하게 TCP/IP 연결만 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-ca-file" xreflabel="ssl_ca_file">
<term><varname>ssl_ca_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_ca_file</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 인증 기관(CA)이 포함된 파일 이름을 지정한다. 
기본값은 로드된 CA 파일이 없고 클라이언트 인증서 검증이 수행되지 않음을 뜻하는 빈칸이다. 
(Agens SQL의 이전 릴리스에서 이 파일의 이름은 <filename>root.crt</filename>로 하드 코딩되었다.) 
상대 경로는 데이터 디렉토리에 상대적이다. 이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-cert-file" xreflabel="ssl_cert_file">
<term><varname>ssl_cert_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_cert_file</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 인증서가 포함된 파일 이름을 지정한다. 기본값은 <filename>server.crt</filename>이다. 
상대 경로는 데이터 디렉토리에 상대적이다. 이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-crl-file" xreflabel="ssl_crl_file">
<term><varname>ssl_crl_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_crl_file</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 인증서 해지 목록(CRL)이 포함된 파일 이름을 지정한다. 
기본값은 로드된 CRL 파일이 없음을 뜻하는 빈칸이다. 
(Agens SQL의 이전 릴리스에서 이 파일의 이름은 <filename>root.crl</filename>로 하드 코딩되었다.) 
상대 경로는 데이터 디렉토리에 상대적이다. 이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-key-file" xreflabel="ssl_key_file">
<term><varname>ssl_key_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_key_file</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 개인 키가 포함된 파일 이름을 지정한다. 기본값은 <filename>server.key</filename>이다. 상대 경로는 데이터 디렉토리에 상대적이다. 
이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-renegotiation-limit" xreflabel="ssl_renegotiation_limit">
<term><varname>ssl_renegotiation_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>ssl_renegotiation_limit</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
세션 키 renegotiation 일어나기 전에 암호화된 <acronym>SSL</> 연결로 흐를 수 있는 데이터 양.
renegotiation은, 대규모 트래픽을 검사할 수 있는 경우에 공격자의 암호 해독 가능성을 줄이지만 큰 성능 저하도 초래한다. 
전송 및 수신된 트래픽 합계는 제한을 확인하는 데 사용된다. 
이 매개변수가 0으로 설정되면 renegotiation이 실행되지 않는다. 기본값은 <literal>512MB</>이다.
 </para>
 <note>
<para>
 2009년 11월 이전의 SSL 라이브러리는 SSL 프로토콜의 취약성 때문에 SSL renegotiation 사용 시 보안상 허점이 있다.
 임시 수정 대책으로 일부 벤더는 renegotiation이 불가능한 SSL 라이브러리를 출시했다. 
 클라이언트 또는 서버에서 이 라이브러리를 사용하고 있으면 SSL renegotiation이 실행되지 않는다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-ciphers" xreflabel="ssl_ciphers">
<term><varname>ssl_ciphers</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_ciphers</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
보안 연결에 사용할 수 있는 <acronym>SSL</> cipher 스위트(suite) 목록을 지정한다. 
이 설정 구문 및 지원되는 값 목록은 <application>OpenSSL</> 패키지의 <citerefentry><refentrytitle>ciphers</></citerefentry> 설명서를 참조 바란다. 
기본값은 <literal>HIGH:MEDIUM:+3DES:!aNULL</>이다. 이것은 특별한 보안 요구사항이 없을 경우에 일반적으로 합당하다.
 </para>

 <para>
기본값 설명:
<variablelist>
 <varlistentry>
<term><literal>HIGH</literal></term>
<listitem>
 <para>
<literal>HIGH</> 그룹에서 cipher를 사용하는 Cipher 스위트(예: AES, Camellia, 3DES)
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><literal>MEDIUM</literal></term>
<listitem>
 <para>
<literal>MEDIUM</> 그룹에서 cipher를 사용하는 Cipher 스위트(예: RC4, SEED)
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><literal>+3DES</literal></term>
<listitem>
 <para>
<literal>HIGH</>에 대한 OpenSSL 기본 순서는 3DES 서열이 AES128보다 높기 때문에 문제가 된다. 
3DES는 AES128보다 보안 수준이 떨어지고 느리기까지 하므로 이것은 잘못된 방법이다.
<literal>+3DES</>는 다른 모든 <literal>HIGH</> 및 <literal>MEDIUM</>을 해독한 후, 재배치한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><literal>!aNULL</literal></term>
<listitem>
 <para>
인증이 없는 익명의 cipher 스위트를 실행하지 않는다. 
해당 cipher 스위트는 중간자(man-in-the-middle) 공격에 취약하므로 사용해서는 안 된다.
 </para>
</listitem>
 </varlistentry>
</variablelist>
 </para>

 <para>
사용 가능한 cipher 스위트 상세 내역은 OpenSSL 버전에 따라 달라진다. 
현재 설치된 <application>OpenSSL</> 버전에 대한 실제 상세 내역은 <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal> 명령을 사용해야 한다. 
이 목록은 서버 키 유형에 따라 런타임 시 필터링된다는 점에 유의해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-prefer-server-ciphers" xreflabel="ssl_prefer_server_ciphers">
<term><varname>ssl_prefer_server_ciphers</varname> (<type>bool</type>)
<indexterm>
 <primary><varname>ssl_prefer_server_ciphers</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL cipher 기본 설정을 서버 것으로 사용할 것인지, 클라이언트 것으로 사용할 것인지 지정한다. 기본값은 true이다.
 </para>

 <para>
다른 <productname>Agens SQL</productname> 버전은 이 설정이 없으며, 항상 클라이언트 기본 설정을 사용한다. 
이 설정은 주로 해당 버전의 이전 버전과의 호환성에 대한 것이다. 
서버가 적절하게 환경 설정되어 있을 가능성이 높으므로 보통은 서버의 기본 설정을 사용하는 것이 더 낫다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-ecdh-curve" xreflabel="ssl_ecdh_curve">
<term><varname>ssl_ecdh_curve</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_ecdh_curve</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<acronym>ECDH</> 키 교환에서 사용할 curve 이름을 지정한다. 연결하는 모든 클라이언트에서 지원되어야 한다. 
서버의 Elliptic Curve 키에서 사용되는 것과 동일한 curve일 필요는 없다. 기본값은 <literal>prime256v1</>이다.
 </para>

 <para>
가장 일반적인 curve의 OpenSSL 이름: <literal>prime256v1</> (NIST P-256), <literal>secp384r1</> (NIST P-384), <literal>secp521r1</> (NIST P-521).
 </para>

 <para>
사용 가능한 curve의 전체 목록은 <command>openssl ecparam -list_curves</command> 명령을 사용하면 표시할 수 있다. 
그렇더라도 모든 curve를 <acronym>TLS</>에서 사용할 수 있는 것은 아니다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-password-encryption" xreflabel="password_encryption">
<term><varname>password_encryption</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>password_encryption</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<literal>ENCRYPTED</> 또는 <literal>UNENCRYPTED</>를 쓰지 않고 패스워드를 CREATE USER 또는 ALTER ROLE에 지정한 경우, 
패스워드를 암호화할 것인지 결정한다. 
기본값은 <literal>on</>이다(패스워드 암호화).
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
<term><varname>krb_server_keyfile</varname> (<type>string</type>)
<indexterm>
 <primary><varname>krb_server_keyfile</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
Kerberos 서버 키 파일의 위치를 설정한다. 
자세한 내용은 <xref linkend="gssapi-auth">을 참조 바란다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
<term><varname>krb_caseins_users</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>krb_caseins_users</varname> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GSSAPI 사용자 이름의 대소문자를 구분할 것인지 설정한다. 기본값은 <literal>off</>이다(대소문자 구분). 
<filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
<term><varname>db_user_namespace</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>db_user_namespace</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스별 사용자 이름 사용 여부이다. 기본값은 off이다. 
<filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>

 <para>
on일 경우 <literal>username@dbname</>처럼 사용자를 생성해야 한다. 
연결된 클라이언트가 <literal>username</>이 전달하면,
<literal>@</> 및 데이터베이스 이름이 사용자 이름에 추가되고 해당 데이터베이스 특정 사용자 이름이 서버에서 조회된다. 
SQL 환경에서 사용자 이름에 <literal>@</>를 넣어 사용자를 생성하면 사용자 이름에 따옴표를 사용해야 한다는 점에 유의해야 한다.
 </para>

 <para>
일반 전역 사용자를 생성할 수 있다. 예를 들면 <literal>joe@</>처럼 사용자 이름에 간단히 <literal>@</>를 추가하면 된다. 
<literal>@</>는 사용자 이름이 서버에 의해 조회되기 전에 제거된다.
 </para>

 <para>
<varname>db_user_namespace</>는 클라이언트와 서버의 사용자 이름이 다르게 표시되게 한다. 
인증 검사는 항상 서버의 사용자 이름이 이용되므로 인증 방법은 클라이언트가 아니라 서버의 사용자 이름으로 설정되어야 한다. 
<literal>md5</>는 클라이언트와 서버에서 사용자 이름을 솔트로 사용하므로, <literal>md5</>를 <varname>db_user_namespace</>와 함께 사용할 수 없다.
 </para>

 <note>
<para>
 이 기능을 완벽한 솔루션을 찾을 때까지의 임시 방편용이다. 때가 되면 이 옵션은 없어질 것이다.
</para>
 </note>
</listitem>
 </varlistentry>

</variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-resource">
<title>리소스 소비</title>

<sect2 id="runtime-config-resource-memory">
 <title>Memory</title>

 <variablelist>
 <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
<term><varname>shared_buffers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>shared_buffers</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 서버가 공유 메모리 버퍼용으로 사용하는 메모리 양을 설정한다. 
기본값은 일반적으로 128메가바이트(<literal>128MB</>)이지만 커널 설정에서 지원하지 않는 경우 
여기에 미치지 못할 수 있다(<application>initdb</> 중에 결정됨). 
이 설정은 최소 128킬로바이트여야 한다. (기본값이 아닌 <symbol>BLCKSZ</symbol> 값은 최소값을 변경한다.) 
단, 최소값보다 훨씬 큰 설정은 일반적으로 우수한 성능이 필요할 때 사용된다. 
 </para>

 <para>
RAM이 1GB 이상인 전용 데이터베이스 서버를 사용하는 경우 <varname>shared_buffers</varname>의 적절한 시작 값은 시스템 메모리의 25%이다. 
작업 부하는 <varname>shared_buffers</varname>에 대한 설정이 클수록 효과적이지만, 
<productname>Agens SQL</productname> 역시 운영 체제 캐시에 의존적이므로 시스템 효율을 위해 
40% 이상의 RAM을 <varname>shared_buffers</varname>에 할당하는 것은 좋지 않다.
장시간에 걸쳐 대량의 새 데이터 또는 변경된 데이터 쓰기 프로세스를 실행하기 위해 
<varname>shared_buffers</varname>를 더 크게 설정하면 <varname>checkpoint_segments</varname>에서도 그에 맞게 설정을 증가시켜야 한다.
 </para>

 <para>
시스템 RAM이 1GB 미만인 경우에는 운영 체제를 위한 적정 공간이 필요하므로 RAM 비율을 더 작게 하는 것이 맞다. 
또한 Windows에서 <varname>shared_buffers</varname> 값을 크게 하는 것은 효과적이지 않다. 
설정을 작게 하고, 운영 체제는 캐시는 상대적으로 크게 함으로써 더 나은 결과가 나올 수도 있다. 
Windows 시스템의 <varname>shared_buffers</varname>에 대한 유용한 범위는 64MB ~ 512MB이다.
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-huge-pages" xreflabel="huge_pages">
<term><varname>huge_pages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>huge_pages</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
거대(huge) 메모리 페이지를 활성/비활성으로 설정한다. 
유효 값은 <literal>try</literal>(기본값) 및 <literal>on</literal>, <literal>off</literal>이다.
 </para>

 <para>
현재 이 기능은 Linux에서만 지원된다. <literal>try</literal>로 설정되면 다른 시스템에서는 무시된다.
 </para>

 <para>
huge pages 페이지를 사용하면 결과적으로 메모리 관리에 더 작은 페이지 테이블과 더 짧은 CPU 시간을 사용하여 성능이 높아진다.
자세한 내용은 <xref linkend="linux-huge-pages">을 참조 바란다.
 </para>

 <para>
<varname>huge_pages</varname>를 <literal>try</literal>로 설정하면 서버가 huge pages의 사용하지만, 
실패 시 일반적인 할당을 사용하는 쪽으로 폴백한다. 
<literal>on</literal>의 경우 huge pages 사용에 실패하면 서버가 시작되지 않는다. 
<literal>off</literal>의 경우 huge pages를 사용하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
<term><varname>temp_buffers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>temp_buffers</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 데이터베이스 세션이 사용하는 임시 버퍼의 최대 수를 설정한다. 
임시 테이블에 액세스하는 용도로만 사용되는 세션-로컬 버퍼가 있다. 
기본값은 8메가바이트(<literal>8MB</>)이다. 
설정은 개별 세션 내에서 변경할 수 있지만, 세션 내 임시 테이블을 처음 사용하기 전에만 가능하다. 
이후에 값을 변경하면 해당 세션에서 효과가 없다.
 </para>

 <para>
세션은 <varname>temp_buffers</>에 설정된 한계까지 필요한 임시 버퍼를 할당한다. 
실제로는 임시 버퍼가 많이 필요 없는 세션에서 큰 값을 설정하는 데 드는 비용은 
<varname>temp_buffers</> 증가분당, 버퍼 디스크립터 혹은 약 64바이트에 불과하다. 
그러나 버퍼가 실제로 사용되는 경우에는 8192바이트가 추가적으로 필요하다(또는 일반적으로 <symbol>BLCKSZ</symbol> 바이트).
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
<term><varname>max_prepared_transactions</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_prepared_transactions</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
동시에 <quote>준비된</> 상태일 수 있는 트랜잭션의 최대 수.
 </para>

 <para>
준비된 트랜잭션을 사용할 계획이 없으면 이 매개변수는 0으로 설정하여 준비된 트랜잭션을 생성하는 실수를 방지해야 한다. 
준비된 트랜잭션을 사용하는 경우 <varname>max_prepared_transactions</varname>가 최소한 
<xref linkend="guc-max-connections"> 이상이 되도록 설정하면 세션이 준비된 트랜잭션을 보류시킬 수 있다.
 </para>

 <para>
대기 서버 실행 시 마스터 서버 값보다 크거나 같게 설정해야 한다. 그렇게 하지 않으면 대기 서버가 쿼리를 허용하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-work-mem" xreflabel="work_mem">
<term><varname>work_mem</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>work_mem</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임시 디스크 파일을 쓰기 전에 내부 정렬 명령 및 해시 테이블에서 사용되는 메모리 양을 지정한다. 
기본값은 4메가바이트이다(<literal>4MB</>). 복잡한 쿼리의 경우 몇 가지 정렬 또는 해시 명령이 병렬로 실행될 수 있다. 
각 명령은 데이터를 임시 파일에 쓰기 전에 이 값에 지정된 크기만큼 메모리를 사용할 수 있다. 
실행 중인 세션들은 해당 명령을 동시에 실행할 수도 있다. 사용된 총 메모리는 <varname>work_mem</varname>의 배수가 된다.
정렬 명령은 <literal>ORDER BY</> 및 <literal>DISTINCT</>, 머지 조인에 사용된다. 
해시 테이블은 해시 조인, 해시 기반 집계(aggregation), <literal>IN</> 서브쿼리의 해시 기반 처리에 사용된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-maintenance-work-mem" xreflabel="maintenance_work_mem">
<term><varname>maintenance_work_mem</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>maintenance_work_mem</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</command>, <command>CREATE
INDEX</> 및 <command>ALTER TABLE ADD FOREIGN KEY</> 같은 유지보수 명령에서 사용되는 최대 메모리 양을 지정한다. 
기본값은 64메가바이트이다(<literal>64MB</>). 
이 명령은 데이터베이스 세션에서 한 번에 하나만 실행할 수 있으며, 정상 설치에는 동시 실행되는 명령이 여러 개 있을 수 없다. 
이 값은 <varname>work_mem</varname>보다 훨씬 큰 값으로 설정하는 것이 안전하다. 
설정값이 큰 경우에는 vacuuming 및 데이터베이스 덤프 복구 성능이 개선될 수 있다.
 </para>
 <para>
autovacuum 실행 시 이 메모리에서 <xref linkend="guc-autovacuum-max-workers">의 배수로 할당할 수 있으므로 
기본값을 너무 높게 설정하지 않도록 해야 한다. 
<xref linkend="guc-autovacuum-work-mem">을 별도로 설정하여 이것을 관리하는 것이 유용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-work-mem" xreflabel="autovacuum_work_mem">
<term><varname>autovacuum_work_mem</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_work_mem</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 autovacuum worker 프로세스에서 사용되는 최대 메모리 양을 지정한다. 
기본값은 <xref linkend="guc-maintenance-work-mem"> 값을 대신 사용해야 함을 나타내는 -1이다. 
다른 컨텍스트에서 실행하는 경우 이 설정은 <command>VACUUM</command>에 영향을 끼치지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
<term><varname>max_stack_depth</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_stack_depth</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 실행 스택의 최대 안전 깊이를 지정한다. 
이상적인 설정은 커널이 강제로 지정한 안전 마진(safety margin)에서 약간 부족하게 설정하는 것이다.
(<literal>ulimit -s</>에 의해 설정된 대로 하거나 로컬과 동등하게). 
표현식 평가(expression evaluation) 같이 서버의 모든 루틴이 아니라 
잠재적 재귀 루틴 중 중요한 것만 스택 깊이가 검사되기 때문에, 안전 마진(safety margin)이 필요하다. 
기본 설정은 기본적으로 작고, 충돌 가능성이 낮은 2메가바이트이다(<literal>2MB</>). 
그러나, 설정값이 너무 작으면 복합 함수의 실행이 어려울 수 있다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <para>
실제 커널 제한보다 <varname>max_stack_depth</>를 큰 값으로 설정하면 런어웨이 재귀 함수가 백엔드 프로세스와 충돌할 수 있다. 
<productname>Agens SQL</productname>이 커널 제한을 결정할 수 있는 플랫폼에서 서버는 이 변수가 불안정한 값으로 설정되는 것을 허용하지 않는다. 
그러나 모든 플랫폼이 정보를 제공하지는 않으므로 값 선택 시 신중을 기해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-dynamic-shared-memory-type" xreflabel="dynamic_shared_memory_type">
<term><varname>dynamic_shared_memory_type</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>dynamic_shared_memory_type</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버가 사용해야 하는 동적 공유 메모리 구현을 지정한다. 
가능한 값은 <literal>posix</>(<literal>shm_open</>을 사용하여 할당된 POSIX 공유 메모리의 경우) 및
<literal>sysv</literal>(<literal>shmget</>을 통해 할당된 System V 공유 메모리의 경우), 
<literal>windows</>(Windows 공유 메모리의 경우), 
<literal>mmap</>(데이터 디렉토리에 저장된 메모리 맵 파일을 사용하는 공유 메모리 시뮬레이션). 
<literal>none</>(이 기능 비활성)이다. 
일부 플랫폼에서는 몇 개가 지원되지 않는다. 
첫 번째 지원 옵션은 해당 플랫폼의 기본값이다. 
플랫폼에서 기본값이 아닌 <literal>mmap</> 옵션의 사용은 일반적으로 권장하지 않는다. 
이유는 운영 체제가 수정된 페이지를 디스크에 반복해서 다시 쓰면서 시스템 I/O 로드가 늘어나기 때문이다. 
그러나, <literal>pg_dynshmem</> 디렉토리를 RAM 디스크에 저장하거나 다른 공유 메모리 기능을 사용할 수 없는 경우에는 디버깅용으로 유용하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>

 <sect2 id="runtime-config-resource-disk">
 <title>디스크</title>

 <variablelist>
 <varlistentry id="guc-temp-file-limit" xreflabel="temp_file_limit">
<term><varname>temp_file_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>temp_file_limit</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
정렬 및 해시 임시 파일 같은 임시 파일 또는 보류된 커서용 저장소 파일에 세션이 사용할 수 있는 디스크 공간의 최대 크기를 지정한다. 
이 제한을 초과하는 트랜잭션은 취소된다. 값은 킬로바이트 단위로 지정되며 <literal>-1</>(기본값)은 무제한을 의미한다. 
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
 <para>
이 설정은 주어진 <productname>Agens SQL</>세션이 동시에 사용하는 모든 임시 파일의 총 공간을 제한한다. 
쿼리 실행 시 조용히 사용되는 임시 파일과 달리, 
명시적 임시 테이블용으로 사용되는 디스크 공간은 이 제한에 합산되지 <emphasis>않는다</emphasis>는 점에 유의해야 한다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>

 <sect2 id="runtime-config-resource-kernel">
 <title>커널 리소스 사용량</title>

 <variablelist>
 <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
<term><varname>max_files_per_process</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_files_per_process</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 하위 프로세스별로 허용된 동시 오픈 파일의 최대 수를 설정한다. 기본값은 1000이다. 
커널이 프로세스별 안전 한계를 강제하는 경우 이 설정은 신경 쓸 필요가 없다. 
그러나 일부 플랫폼(특히, 대부분의 BSD 시스템)에서는 여러 개의 프로세스가 모두 여러 파일을 열려고 할 때
커널은 시스템이 실제로 지원하는 파일 수보다 많아도 여는 것을 시도한다.
<quote>Too many open files</> 실패가 나타난 경우 이 설정을 줄여야 한다. 
이 매개변수는 서버 시작 시 설정된다.
 </para>
</listitem>
 </varlistentry>
 </variablelist>
</sect2>

<sect2 id="runtime-config-resource-vacuum-cost">
 <title>비용기반 Vacuum 지연</title>

 <para>
VACUUM 및 ANAYLYZE 명령 실행 시 다양한 I/O 명령을 수행하는 데 드는 예상 비용을 추적하는 내부 카운터가 시스템에 있다.
누적 비용이 제한값(<varname>vacuum_cost_limit</varname>으로 지정)에 도달하면 <varname>vacuum_cost_delay</varname>에서 지정된 값만큼 
명령을 수행하는 프로세스가 잠시 슬립 상태가 된다. 
그런 다음, 카운터가 리셋되고 실행이 계속된다.
 </para>

 <para>
이 기능으로 관리자는 데이터베이스 동시 작업 시 이러한 명령들이 I/O에 주는 부담을 완화시킬 수 있다. 
<command>VACUUM</command> 및 <command>ANALYZE</command> 같은 유지 보수 명령이 빨리 마무리되는 것이 중요하지 않을 때도 있다.
그러나, 일반적으로는 이 명령 때문에 다른 데이터베이스 명령을 수행 중인 시스템 능력이 저해되지 않게 하는 것이 중요하다.
비용 기반 vacuum 지연은 관리자가 이것을 수행하는 방법을 제공한다.
 </para>

 <para>
<command>VACUUM</command> 명령을 직접 실행하면 기본적으로 실행되지 않는다.
사용하는 것으로 설정하려면 <varname>vacuum_cost_delay</varname> 변수를 0 이외의 값으로 설정해야 한다.
 </para>

 <variablelist>
<varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
 <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_delay</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 비용 제한을 초과한 경우 프로세스가 슬립하는 초 단위의 시간 길이. 기본값은, 비용 기반 vacuum 지연 기능을 사용하지 않는 0이다. 
 양의 값은 비용 기반 vacuuming을 사용하는 것으로 설정된다. 다수의 시스템에서 슬립 지연의 효율적인 설정은 10밀리초이다. 
 <varname>vacuum_cost_delay</varname>를 10의 배수가 아닌 다른 값으로 설정하면 10의 배수로 값을 올림하여 설정한 것과 결과가 동일하다.
</para>

<para>
 비용 기반 vacuuming을 사용하는 경우 <varname>vacuum_cost_delay</>는 일반적으로 매우 작으며, 보통 10 ~ 20밀리초이다. 
 vacuum의 자원 소비를 조절하려면 다른 vacuum 비용 매개변수를 변경하는 것이 가장 좋다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
 <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_page_hit</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 공유 버퍼 캐시에 있는 버퍼 vacuuming의 예상 비용. 
 이것은 버퍼 풀을 잠그고, 공유 해시 테이블을 조회하고 페이지 내용을 스캔 하는 비용을 나타낸다. 기본값은 1이다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
 <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_page_miss</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 디스크에서 읽어온 버퍼를 vacuuming하는 데 드는 예상 비용. 
 이것은 버퍼 풀을 잠그고, 공유 해시 테이블을 조회하고, 디스크에어 원하는 블록을 읽고, 내용을 스캔하는 비용을 나타낸다. 기본값은 10이다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
 <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_page_dirty</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 이전에 클린한 블록을 vacuum이 수정하는 경우 예상 비용. 이것은 dirty 블록을 디스크에 다시 쓰는 데 필요한 추가 I/O를 나타낸다. 기본값은 20이다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
 <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_limit</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 vacuuming 프로세스를 슬립 시키는 누적 비용. 기본값은 200이다.
</para>
 </listitem>
</varlistentry>
 </variablelist>

 <note>
<para>
 일부 명령은 critical locks을 갖고 있으며 따라서, 이러한 명령은 가능한 한 신속하게 완료해야 한다. 
 해당 명령이 수행되는 중에는 비용 기반 vacuum 지연이 발생하지 않는다. 
 따라서, 지정된 제한보다 비용이 훨씬 더 많아져 누적될 수도 있다. 
 이런 경우 쓸데없이 긴 지연을 방지하기 위해 실제 지연은 최대값이 
 <varname>vacuum_cost_delay</varname> * 4인 
 <varname>vacuum_cost_delay</varname> * <varname>accumulated_balance</varname> / <varname>vacuum_cost_limit</varname>으로 계산된다. 
</para>
 </note>
</sect2>

<sect2 id="runtime-config-resource-background-writer">
 <title>백그라운드 Writer</title>

 <para>
<firstterm>백그라운드 writer</>라는 별도의 서버 프로세스가 있는데, 
이 기능은 <quote>더티(dirty)</>(신규 또는 수정) 공유 버퍼에 쓰기 작업을 실행하는 것이다. 
이것은 공유 버퍼에 쓰는 것이므로, 서버는 사용자 쿼리를 거의 처리하지 않거나 쓰기가 시작될 때까지 기다릴 필요도 없다. 
그러나, 반복적으로 더티 페이지가 체크포인트 간격당 한 번만 기록될 수 있는 반면, 
동일한 간격으로 더티 페이지에 백그라운드 writer가 여러 번 쓸 수 있으므로 백그라운드 writer는 최종적으로 I/O 로드의 전반적인 증가를 초래한다. 
이 절에서 논의된 매개변수는 로컬로 필요한 동작을 조절하는 데 이용할 수 있다.
 </para>

 <variablelist>
<varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
 <term><varname>bgwriter_delay</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>bgwriter_delay</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 백그라운드 writer의 작업 라운드 사이의 지연을 지정한다. 
 각 라운드에서 writer는 몇 개의 dirty 버퍼(다음 매개변수로 조절 가능)에 대해 쓰기를 실행한다. 
 그리고 <varname>bgwriter_delay</> 밀리초 동안 슬립한 다음, 반복한다. 
 버퍼 풀에 더티 버퍼가 없으면, <varname>bgwriter_delay</>와 무관하게 장기 슬립으로 들어간다. 
 기본값은 200밀리초이다(<literal>200ms</>). 다수의 시스템에서 효율적인 슬립 지연 설정은 10밀리초이다. 
 <varname>bgwriter_delay</>를 10의 배수가 아닌 다른 값으로 설정하면 10의 배수로 값을 올림하여 설정한 것과 결과가 동일하다. 
 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
 <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>bgwriter_lru_maxpages</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 각 라운드에서 이것보다 큰 버퍼 수는 백그라운드 writer가 쓰지 않는다.
 이것을 0으로 설정하면 백그라운드 쓰기가 사용되지 않는다. 
 (별도의 전용 보조 프로세스에 의해 관리되는 해당 체크포인트들은 영향을 받지 않는다.)
 기본값은 100개 버퍼이다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-bgwriter-lru-multiplier" xreflabel="bgwriter_lru_multiplier">
 <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)
 <indexterm>
<primary><varname>bgwriter_lru_multiplier</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 각 라운드에 쓰기 된 더티 버퍼의 수는 최근 라운드 중에 서버 프로세스가 필요로 했던 새 버퍼 수를 근거로 한다. 
 최근 평균 요구량은 다음 라운드에서 필요한 버퍼 추정치에 도달하도록 <varname>bgwriter_lru_multiplier</>를 곱한다. 
 깨끗하고 재사용 가능한 버퍼 수가 지정된 개수가 될 때까지 더티 버퍼는 쓰여진다. 
 (그렇더라도 라운드당 <varname>bgwriter_lru_maxpages</> 이상의 버퍼는 쓰여지지 않는다.) 
 따라서, 1.0 설정은 정확히 필요한 버퍼 수를 기록하는 <quote>just in time</> 정책을 나타낸다. 
 더 큰 값을 설정하면 수요 급증에 대비할 수 있는 반면, 
 더 작은 값은 쓰기를 서버 프로세스가 처리하도록 일부러 미처리 상태로 방치한다. 기본값은 2.0이다. 
 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
</para>
 </listitem>
</varlistentry>
 </variablelist>

 <para>
<varname>bgwriter_lru_maxpages</varname> 및 <varname>bgwriter_lru_multiplier</varname> 값을 더 작게 설정하면 
백그라운드 writer로 인한 I/O 로드는 줄어들지만, 서버 프로세스가 자체적으로 쓰기를 실행해야 하므로 쿼리 인터랙션이 지연될 가능성이 높다.
 </para>
</sect2>

<sect2 id="runtime-config-resource-async-behavior">
 <title>비동기 동작</title>

 <variablelist>
<varlistentry id="guc-effective-io-concurrency" xreflabel="effective_io_concurrency">
 <term><varname>effective_io_concurrency</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>effective_io_concurrency</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 <productname>Agens SQL</>이 동시에 실행 가능할 것으로 예상하는 동시 디스크 I/O 실행 수를 설정한다. 
 이 값을 올리면 각 <productname>Agens SQL</> 세션이 병렬 초기화를 시도하는 I/O 실행 수가 늘어난다. 
 허용 범위는 1 ~ 1000, 또는 비동기 I/O 요청의 실행을 비활성화하는 0이다. 
 현재, 이 설정은 비트맵 힙 스캔에만 영향을 미친다.
</para>

<para>
 이 설정을 위한 권장 시작점은 데이터베이스에서 사용되는 RAID 0 스트라이프 또는 RAID 1 미러를 환경 설정하는 개별 드라이브 수이다. 
 (RAID 5의 경우 패리티 드라이브 수는 계산하지 않는다. ) 
 그러나 동시 세션에서 여러 개의 쿼리가 실행된 상태에서 데이터베이스가 매우 바쁠 경우, 
 디스크 배열을 바쁜 상태로 유지하기 위해서는 적은 값도 충분하다. 
 디스크를 바쁜 상태로 만들기 위해 필요 이상으로 큰 값을 설정하면 CPU 오버헤드만 가중된다.
</para>

<para>
 버스 대역폭에 의해 제한되는 메모리 기반 저장소 또는 RAID 배열 같은 외부 시스템의 경우, 가용한 I/O 경로 수를 설정해야 한다. 
 최상의 값을 찾아내려면 몇 가지 시험이 필요할 수도 있다.
</para>

<para>
 비동기 I/O는 효과적인 <function>posix_fadvise</> 함수에 따라 달라지며, 이것이 운영 체제에 없을 수도 있다. 
 이 함수가 없을 경우 이 매개변수를 0 이외의 다른 것으로 설정하면 에러가 발생한다. 
 일부 운영 체제(예: Solaris)에는 함수가 존재하지만 실제로는 아무것도 하지 않는다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
 <term><varname>max_worker_processes</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>max_worker_processes</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 시스템이 지원할 수 있는 백그라운드 프로세스의 최대 수를 설정한다. 이 매개변수는 서버 시작 시에만 설정 가능하다.
</para>

<para>
 대기 서버 실행 중에는 이 매개변수를 마스터 서버 값보다 크거나 같게 설정해야 한다. 그렇게 하지 않으면 대기 서버가 쿼리를 허용하지 않는다.
</para>
 </listitem>
</varlistentry>
 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-wal">
<title>Write Ahead 로그</title>

 <para>
이 설정의 조정에 대한 자세한 내용은 <xref linkend="wal-configuration">을 참조 바란다.
 </para>

<sect2 id="runtime-config-wal-settings">
 <title>설정</title>
 <variablelist>

 <varlistentry id="guc-wal-level" xreflabel="wal_level">
<term><varname>wal_level</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>wal_level</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>wal_level</>은 WAL에 기록되는 정보의 양을 결정한다. 
기본값은 충돌 또는 즉시 셧다운으로부터 복구하기 위해 필요한 정보만 기록하는 <literal>minimal</>이다. 
<literal>archive</>는 WAL 아카이브에 필요한 로깅만 추가한다. 
<literal>hot_standby</>는 대기 서버에서 읽기 전용 쿼리에 필요한 정보를 좀 더 추가한다. 
<literal>logical</>은 논리적 디코딩을 지원하는 데 필요한 정보를 추가한다. 
각 레벨에는 모두 저수준에서 로깅된 정보가 포함된다. 
이 매개변수는 서버 시작 시 설정된다.
 </para>
 <para>
<literal>minimal</> 레벨에서, 일부 벌크 실행 WAL 로깅은 안전하게 건너뛸 수 있다. 
그러면 실행이 빨라진다. 
이러한 최적화를 적용할 수 있는 실행에는 다음이 포함된다.
<simplelist>
 <member><command>CREATE TABLE AS</></member>
 <member><command>CREATE INDEX</></member>
 <member><command>CLUSTER</></member>
 <member><command>COPY</> 상기는 동일 트랜잭션에서 생성되었거나 또는 레코드가 지워진 테이블에 적용된다.</member>
</simplelist>
그러나 최소 WAL에는 베이스 백업 및 WAL 로그로부터 데이터를 재구성하는 데 필요한 정보가 충분하지 않으므로 
WAL 아카이빙(<xref linkend="guc-archive-mode">) 및 스트리밍 복제를 하려면 <literal>archive</> 이상을 사용해야 한다.
 </para>
 <para>
<literal>hot_standby</> 레벨에서 <literal>archive</>와 동일한 정보 및 WAL로부터 실행 트랜잭션의 상태 재구성에 필요한 정보가 로깅된다. 
대기 서버에서 읽기 전용 쿼리를 사용하려면, 운영 서버에서 <varname>wal_level</>을 <literal>hot_standby</> 이상으로 설정하고 
<xref linkend="guc-hot-standby">는 대기 서버에서 활성화해야 한다. 
<literal>hot_standby</>와 <literal>archive</> 레벨 사용시 측정 가능한 성능 차이는 거의 없는 것으로 생각되므로 
운영상 눈에 띄는 변화가 있을 경우 피드백을 주기 바란다.
 </para>
 <para>
<literal>논리적</> 수준에서 <literal>hot_standby</>를 사용하는 것과 동일한 정보 및 
WAL로부터 논리적 변경 세트를 사용하는 데 필요한 정보가 로깅된다. 
<literal>논리적</> 수준을 사용하면 WAL 볼륨이 증가한다. 
특히 여러 개의 테이블을 <literal>REPLICA IDENTITY FULL</literal>로 환경 설정하고 
<command>UPDATE</> 및 <command>DELETE</> 문을 여러 개 실행하는 경우 그렇다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-fsync" xreflabel="fsync">
<term><varname>fsync</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>fsync</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개변수가 on인 경우 <productname>Agens SQL</> 서버는 업데이트가 물리적으로 디스크에 기록되었는지를 
<function>fsync()</> 시스템 호출 또는 상응하는 다양한 메서드(<xref linkend="guc-wal-sync-method"> 참조)를 사용하여 확인하려고 한다. 
이로써 운영 체제 또는 하드웨어 충돌 후에 데이터베이스 클러스터를 일정한 상태로 복구할 수 있다.
 </para>

 <para>
<varname>fsync</varname>를 해제하는 것은 성능상 장점이 있지만, 결과적으로는 정전 또는 시스템 충돌의 경우에 데이터 손상이 복구 불가능할 수 있다. 
따라서 외부 데이터로 전체 데이터베이스를 손쉽게 재생성할 수 있는 경우에만 <varname>fsync</varname>를 해제하는 것이 바람직하다.
 </para>

 <para>
<varname>fsync</varname>를 해제하는 안전한 방법은 
데이터베이스를 폐기 및 재생성한 후의 데이터 일괄 처리하거나, 
빈번하게 재생성되고 장애처리(failover)용으로 사용되지 않는 읽기 전용 데이터베이스 클론인 경우에 데이터베이스를 사용하면서
백업 파일로부터 새 데이터베이스 클러스터를 초기 로딩하는 것이다.
고성능 하드웨어 단독으로는 <varname>fsync</varname>를 해제하는 합당한 이유가 될 수 없다.
 </para>

 <para>
<varname>fsync</varname>를 해제했다가 다시 설정하는 경우 복구 신뢰도를 위해 커널에서 변경된 모든 버퍼를 내구성이 좋은 저장소로 
강제 이동하는 것이 필요하다. 
이것은 클러스터가 셧다운 중이거나 fsync가 on일 때 <command>initdb
--sync-only</command>를 실행하거나, <command>sync</>를 실행하거나, 파일 시스템의 마운트를 해제하거나, 서버를 리부팅함으로써 가능하다.
 </para>

 <para>
여러 가지 상황에서 중요하지 않은 트랜잭션에 대해 <xref linkend="guc-synchronous-commit">를 해제하면 데이터 충돌 위험 없이 <varname>fsync</varname>를 해제함으로써 잠재적인 성능상 장점을 다수 얻을 수 있다.
 </para>

 <para>
<varname>fsync</varname>는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정할 수 있다. 이 매개변수를 해제할 경우 <xref linkend="guc-full-page-writes">의 해제도 고려해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
<term><varname>synchronous_commit</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>synchronous_commit</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
명령이 <quote>success</> 표시를 클라이언트에 리턴하기 전에 WAL 레코드가 디스크에 기록될 때까지 트랜잭션 커밋이 기다릴지 여부를 지정한다. 
유효 값은 <literal>on</> 및 
<literal>remote_write</>, <literal>local</>, <literal>off</>이다. 기본값 및 안전 설정은 <literal>on</>이다. <literal>off</>인 경우 success표시가 클라이언트에 전달되는 시간과 서버 충돌 없이 트랜잭션이 정말로 안전하다는 것이 보장되는 시간 사이에 지연이 생길 수 있다. 
(최대 지연은 <xref linkend="guc-wal-writer-delay">의 3배이다.) <xref linkend="guc-fsync">와 달리, 이 매개변수를 <literal>off</>로 설정하면 데이터베이스 불일치 위험이 발생하지 않는다. 
운영 체제 또는 데이터베이스 충돌은 이른바 최근에 커밋된 트랜잭션이 일부 분실되는 결과가 발생하지만 데이터베이스 상태는 해당 트랜잭션이 깔끔하게 중단된 것과 같다. 
따라서, 트랜잭션 영속성에 대해 정확한 확실성보다는 성능이 더 중요한 경우에 <varname>synchronous_commit</>를 해제하는 것이 유용한 대안일 수 있다. 자세한 내용은 <xref linkend="wal-async-commit">을 참조 바란다.
 </para>
 <para>
<xref linkend="guc-synchronous-standby-names">가 설정되면, 트랜잭션의 WAL 레코드가 대기 서버로 복제될 때까지 트랜잭션 커밋이 기다릴지의 여부를 이 매개변수로도 제어한다. 
<literal>on</>으로 설정되면, 트랜잭션의 커밋 레코드를 수신했고 디스크에 쓰기 되었다는 응답이 현재의 동기 대기 서버로부터 올 때까지 커밋이 대기한다. 
이것은 운영 서버 및 대기 서버 양쪽에서 데이터베이스 저장소의 손상이 없는 경우에 트랜잭션이 분실되지 않았음을 보장한다. 
<literal>remote_write</>로 설정되면, 트랜잭션의 커밋 레코드를 수신했고 대기 서버의 운영 체제에 쓰기 되었지만, 대기 서버의 안정된 저장소에 데이터가 도착했는지는 확실하지 않다는 응답이 현재의 동기 대기 서버로부터 올 때까지 커밋이 대기한다. 
데이터 보존을 위해서는 <productname>Agens SQL</>의 대기 서버 인스턴스가 충돌한 경우에도 이 설정으로 충분하지만 대기 서버가 운영 체제 수준에서 충돌이 발생한 경우는 그렇지 않다.
 </para>
 <para>
동기 복제를 사용 중인 경우 일반적으로 디스크에 로컬로 쓰기 되도록 기다리거나, WAL 레코드의 복제를 기다리거나, 트랜잭션이 비동기적으로 커밋되게 하는 것이 합리적이다. 
그러나, <literal>local</> 설정은 디스크에 로컬로 쓰기 되도록 기다리지만 동기 복제는 기다리지 않는 트랜잭션에 사용할 수 있다. 
<varname>synchronous_standby_names</>를 설정하지 않으면 <literal>on</> 및 <literal>remote_write</>, <literal>local</> 설정 모두 동일한 동기화 레벨을 제공하며 트랜잭션 커밋은 로컬로 디스크에 쓰기만을 기다린다.
 </para>
 <para>
이 매개변수는 언제든 변경할 수 있다. 모든 트랜잭션의 동작은 사실상 커밋되었을 때의 설정에 따라 결정된다. 따라서 일부 트랜잭션 커밋은 동기적으로, 그 외에는 비동기적으로 만드는 것이 가능하고 유용하다. 
예를 들면, 기본값이 반대인 경우 다중 문 트랜잭션 커밋 하나를 비동기적으로 만들려면 트랜잭션 내에서 <command>SET
LOCAL synchronous_commit TO OFF</>를 실행해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
<term><varname>wal_sync_method</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>wal_sync_method</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
디스크에 WAL을 강제로 업데이트할 때 사용되는 메서드. <varname>fsync</varname>가 off인 경우 WAL 파일을 일절 강제로 업데이트하지 않기 때문에 이 설정은 무관하다. 가능한 값은 다음과 같다.
 </para>
 <itemizedlist>
<listitem>
<para>
 <literal>open_datasync</> (<function>open()</> 옵션 <symbol>O_DSYNC</>를 사용하여 WAL 파일 쓰기)
</para>
</listitem>
<listitem>
<para>
 <literal>fdatasync</> (커밋마다 <function>fdatasync()</> 호출)
</para>
</listitem>
<listitem>
<para>
 <literal>fsync</> (커밋마다 <function>fsync()</> 호출)
</para>
</listitem>
<listitem>
<para>
 <literal>fsync_writethrough</> (커밋마다 <function>fsync()</> 호출, 모든 디스크 쓰기 캐시에서 write-through 강제)
</para>
</listitem>
<listitem>
<para>
 <literal>open_sync</> (<function>open()</> 옵션 <symbol>O_SYNC</>를 사용하여 WAL 파일 쓰기)
</para>
</listitem>
 </itemizedlist>
 <para>
<literal>open_</>* 옵션도 필요 시 <literal>O_DIRECT</>를 사용한다. 이와 같은 선택이 항상 모든 플랫폼에서 가능한 것은 아니다. 
기본값은 플랫폼에서 지원되는 위의 목록에서 첫 번째 메서드이다. 
단, Linux에서는 <literal>fdatasync</>가 기본값이다. 기본값이 반드시 이상적인 것은 아니다. 
충돌로부터 안전한 환경 설정을 만들거나 성능을 최적화하려면 값을 변경하거나 시스템 환경 설정의 다른 측면을 변경하는 것이 필요할 수도 있다. 
이러한 측면은 <xref linkend="wal-reliability">에서 다룬다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
<term><varname>full_page_writes</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>full_page_writes</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개변수가 on이면, <productname>Agens SQL</> 서버는 checkpoint 이후의 각 디스크 페이지를 처음 수정하는 도중에 해당 페이지의 전체 내용을 WAL에 기록한다. 
이것은, 운영 체제 충돌 시 진행 중인 페이지 쓰기가 부분적으로만 완료되어 디스크 상의 페이지에 옛날 데이터와 새 데이터가 공존할 수 있기 때문에 필요하다. 
일반적으로 WAL에 저장되는 행 수준(row-level) 변경 데이터는 충돌 후 복구 중에 그러한 페이지를 완전히 복구하는 데 충분하지 않다. 
전체 페이지 이미지를 저장하면 페이지의 올바른 복구가 보장되지만 WAL에 기록해야 하는 데이터량의 증가를 감수해야 한다. 
(WAL 리플레이는 항상 checkpoint에서 시작되므로 checkpoint 이후의 페이지별 첫 번째 변경 중에 해도 충분하다. 
그러므로 전체 페이지 쓰기 비용을 줄이는 한 가지 방법은 checkpoint 간격 매개변수를 늘리는 것이다.)
 </para>

 <para>
이 매개변수를 해제하면 정상적인 운영 속도가 빨라지지만 시스템 장애 발생 시 손상된 데이터가 복구 불가능하게 되거나 데이터 손상이 드러나지 않을 수 있다. 
이러한 위험은 규모는 작지만 <varname>fsync</varname>을 해제했을 때와 유사하며, 해당 매개변수에 대해 권장되는 것과 환경이 동일할 때만 해제해야 한다.
 </para>

 <para>
이 매개변수를 해제하는 것은 point-in-time recovery(PITR)용 WAL 아카이빙의 사용에는 영향을 미치지 않는다(<xref linkend="continuous-archiving"> 참조).
 </para>

 <para>
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-log-hints" xreflabel="wal_log_hints">
<term><varname>wal_log_hints</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>wal_log_hints</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개변수가 <literal>on</>이면, <productname>Agens SQL</> 서버는 checkpoint 이후의 각 디스크 페이지를 처음 수정하는 도중에, 소위 힌트 비트(hint bits)의 중요하지 않은 수정에 대해서도 해당 페이지의 전체 내용을 WAL에 기록한다.
 </para>

 <para>
데이터 체크섬이 사용으로 설정되면 힌트 비트(hint bit) 업데이트가 항상 WAL 로깅되고 이 설정은 무시된다. 
데이터베이스에서 데이터 체크섬이 사용으로 설정된 경우 이 설정을 사용하여 WAL 로깅이 추가로 얼마나 발생하는지 테스트할 수 있다.
 </para>

 <para>
이 매개변수는 서버 시작 시에만 설정 가능하다. 기본값은 <literal>off</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
<term><varname>wal_buffers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_buffers</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL 데이터에 사용되고 아직 디스크에 기록되지 않은 공유 메모리의 합계. 기본 설정 -1은 <xref linkend="guc-shared-buffers">의 1/32번째(약 3%)와 동일하게 선택한다. 
<literal>64kB</literal> 이상, WAL 세그먼트 1개 크기 이하여야 하며, 일반적으로 <literal>16MB</literal>이다. 이 값은 자동 선택이 너무 크거나 작은 경우에 직접 선택할 수 있으며, <literal>32kB</literal> 미만의 양의 값은 <literal>32kB</literal>로 처리된다. 
이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
WAL 버퍼의 내용은 모든 트랜잭션 커밋마다 디스크에 쓰기 되므로 극단적으로 큰 값은 별다른 장점이 없을 가능성이 높다. 
그러나, 이 값을 최소한 몇 메가바이트로 설정하면 여러 클라이언트가 한꺼번에 커밋함으로써 busy한 서버의 쓰기 성능이 개선된다. 
기본 설정 -1에 의해 선택된 자동 튜닝은 대부분의 경우 합당한 결과를 주어야 한다.
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
<term><varname>wal_writer_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_writer_delay</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL writer의 작업 라운드 사이의 지연을 지정한다. 각 라운드에서 writer는 WAL을 디스크에 기록한다. 그런 다음, <varname>wal_writer_delay</>밀리초 동안 슬립한 다음, 반복한다. 
기본값은 200밀리초이다(<literal>200ms</>). 다수의 시스템에서 슬립 지연의 효율적인 설정은 10밀리초이다. <varname>wal_writer_delay</>를 10의 배수가 아닌 다른 값으로 설정하면 10의 배수로 값을 올림하여 설정한 것과 결과가 동일하다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
<term><varname>commit_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>commit_delay</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>commit_delay</varname>는 WAL 쓰기를 초기화하기 전에 측정된 시간 지연을 마이크로초 단위로 추가한다. 
이것은 시스템 로드가 충분히 커서 주어진 간격 내에 트랜잭션을 추가로 커밋할 준비가 된 경우 단일 WAL 쓰기를 통해 대량의 트랜잭션이 커밋되게 함으로써 그룹 커밋 처리량을 개선할 수 있다. 
그러나 이것은 WAL 쓰기별로 대기 시간을 최대 <varname>commit_delay</varname> 마이크로초까지 늘리기도 한다. 커밋할 준비가 된 트랜잭션이 없을 경우 지연은 낭비되는 시간이므로 최소한 <varname>commit_siblings</varname>인 경우만 지연이 수행된다. 
쓰기가 곧 시작되는 경우 다른 트랜잭션이 작동된다. 또한 <varname>fsync</varname>가 비활성화되면 지연이 수행되지 않는다. 기본 <varname>commit_delay</>는 0이다(지연 없음). 수퍼유저만 이 설정을 변경할 수 있다.
 </para>
 <para>
9.3 이전의 <productname>Agens SQL</> 릴리스에서 <varname>commit_delay</varname>는 동작이 다르고 효과도 떨어진다. 이것은 모든 WAL 쓰기가 아닌 커밋에만 영향을 주었고 WAL 쓰기가 곧 완료된 경우에도 환경 설정된 지연 시간 동안 대기했다. 
<productname>Agens SQL</> 9.3 초반에, 쓸 준비가 된 첫 번째 프로세스는 환경 설정된 시간 간격을 기다리고, 후속 프로세스는 선행 프로세스의 쓰기 연산이 끝날 때까지 대기한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
<term><varname>commit_siblings</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>commit_siblings</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>commit_delay</> 지연을 수행하기 전에 필요한 동시 개방 트랜잭션의 최소 수. 값이 크면, 지연 간격 중에 커밋 준비가 된 다른 트랜잭션이 최소한 하나 이상일 확률이 높다. 기본값은 5개 트랜잭션이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>
 <sect2 id="runtime-config-wal-checkpoints">
 <title>Checkpoints</title>

<variablelist>
 <varlistentry id="guc-checkpoint-segments" xreflabel="checkpoint_segments">
<term><varname>checkpoint_segments</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>checkpoint_segments</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
자동 WAL checkpoints 간 로그 파일 세그먼트의 최대 수(각 세그먼트는 일반적으로 16메가바이트). 기본값은 3개 세그먼트이다. 이 매개변수를 늘리면 충돌 복구에 필요한 시간을 늘릴 수 있다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
<term><varname>checkpoint_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>checkpoint_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
자동 WAL checkpoints 간의 최대 시간. 초 단위. 기본값은 5분이다(<literal>5min</>). 이 매개변수를 늘리면 충돌 복구에 필요한 시간을 늘릴 수 있다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
<term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>checkpoint_completion_target</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
checkpoints 간 총 시간 분할로써, checkpoints 완료 목표를 지정한다. 기본값은 0.5이다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
<term><varname>checkpoint_warning</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>checkpoint_warning</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
checkpoint 세그먼트 파일을 채움으로써 checkpoints가 여기에 지정된 초 수보다 근접해서 발생한 경우 서버 로그에 메시지를 기록한다(<varname>checkpoint_segments</>를 증가시키는 것이 권장됨). 
기본값은 30초이다(<literal>30s</>). 0은 경고를 비활성화한다. <varname>checkpoint_timeout</varname>가 <varname>checkpoint_warning</varname> 미만이면 경고가 발생하지 않는다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>
 <sect2 id="runtime-config-wal-archiving">
 <title>Archiving</title>

<variablelist>
 <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
<term><varname>archive_mode</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>archive_mode</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>archive_mode</>을 사용하는 것으로 설정하면 완료된 WAL 세그먼트가 <xref linkend="guc-archive-command"> 설정에 의해 아카이브 저장소로 전달된다. 
<varname>archive_mode</> 및 <varname>archive_command</>는 별개의 변수이므로 아카이빙 모드를 해지하지 않고도 <varname>archive_command</>를 변경할 수 있다. 
이 매개변수는 서버 시작 시에만 설정 가능하다. <varname>wal_level</>이 <literal>minimal</>로 설정된 경우 <varname>archive_mode</>를 사용으로 설정할 수 없다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-archive-command" xreflabel="archive_command">
<term><varname>archive_command</varname> (<type>string</type>)
<indexterm>
 <primary><varname>archive_command</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
완료된 WAL 파일 세그먼트를 아카이브하기 위해 실행하는 로컬 쉘 명령. string에서 <literal>%p</>는 아카이브할 파일의 경로명으로 대체되고 <literal>%f</>는 파일명으로만 대체된다. 
(경로명은 서버(예: 클러스터의 데이터 디렉토리)의 작업 디렉토리에 상대적이다.) <literal>%</> 문자를 명령에 포함하려면 <literal>%%</>를 사용해야 한다. 성공한 경우에만 명령이 0 종료(zero exit) 상태를 리턴하는 것이 중요하다. 
자세한 내용은 <xref linkend="backup-archiving-wal">을 참조 바란다.
 </para>
 <para>
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. <varname>archive_mode</>가 서버 시작 시에 활성화되지 않은 경우 무시된다. 
<varname>archive_mode</>가 사용으로 설정된 상태에서 <varname>archive_command</>의 string이 비어 있는 경우(기본값) WAL 아카이빙이 일시적으로 비활성화되지만 서버는 명령이 곧 제시될 것이라는 기대를 갖고 WAL 세그먼트 파일을 계속 누적한다. 
<varname>archive_command</>가 true만 리턴하는 명령으로 설정하면(예: <literal>/bin/true</>)(Windows에서 <literal>REM</>), 아카이빙이 효율적으로 비활성화되지만, 아카이브 복구에 필요한 WAL 파일의 체인이 끊어지므로 특이한 환경에서만 사용되어야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
<term><varname>archive_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>archive_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<xref linkend="guc-archive-command">는 완료된 WAL 세그먼트를 호출만 한다. 그러므로, 서버에서는 WAL 트래픽이 발생되지 않아서(따라서 여유 시간이 있음) 트랜잭션의 완료 및 아카이브 저장소에서 안전한 기록 사이에 긴 지연이 발생할 수 있다. 
데이터가 아카이브되지 않은 채로 방치되지 않게 하기 위해 서버가 새 WAL 세그먼트 파일로 주기적으로 전환되도록 <varname>archive_timeout</>을 설정할 수 있다. 
이 매개변수가 0보다 큰 경우 마지막 세그먼트 파일로 전환한 이후로 여기서 지정된 초 시간을 경과할 때마다, 그리고 단일 checkpoint를 비롯한 데이터베이스 작업이 있을 때마다 서버는 새 세그먼트 파일로 전환한다. 
(<varname>checkpoint_timeout</>을 늘리면 유휴 시스템에서 불필요한 checkpoints가 줄어든다.) 강제 전환 때문에 일찌감치 폐쇄된 아카이브된 파일의 길이는 완전한 전체 파일과 동일하다는 점에 유의해야 한다. 
따라서, <varname>archive_timeout</>를 매우 짧게 하는 것은 아카이브 저장소를 부풀게 하므로 현명하지 못하다. <varname>archive_timeout</>을 1분 정도로 설정하는 것이 일반적으로 합당하다. 
데이터를 마스터 서버로 빠르게 복사하려면 아카이빙 대신 streaming replication의 사용을 고려해야 한다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

 </sect1>

 <sect1 id="runtime-config-replication">
<title>복제</title>

<para>
 이 설정은 내장 <firstterm>streaming replication</> 기능의 동작을 제어한다(<xref linkend="streaming-replication"> 참조). 서버는 마스터 서버거나 대기 서버다. 
 마스터 서버는 데이터를 전송할 수 있고, 대기 서버는 언제나 복제된 데이터의 수신자이다. cascading replication(<xref linkend="cascading-replication"> 참조)을 사용하는 경우 대기 서버는 수신자 겸 전송자일 수 있다. 
 매개변수는 주로 전송 및 대기 서버에 대한 것이며, 일부 매개변수는 마스터 서버에서만 의미가 있다. 클러스터 간에 설정은 필요 시 별 문제 없이 다르게 할 수 있다.
</para>

<sect2 id="runtime-config-replication-sender">
 <title>전송 서버(들)</title>

 <para>
이 매개변수는 복제 데이터를 하나 이상의 대기 서버로 전송하는 서버에 설정할 수 있다. 마스터는 항상 전송 서버 이므로 이 매개변수를 언제나 마스터에 설정해야 한다. 
이 매개변수의 역할 및 의미는 대기 서버가 마스터로 된 이후에 변경되지 않는다.
 </para>

 <variablelist>
<varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
 <term><varname>max_wal_senders</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>max_wal_senders</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
 <para>
대기 서버 또는 스트리밍 베이스 백업 클라이언트로부터의 동시 연결 최대 수를 지정한다(예: 동시에 실행 중인 WAL 전송자 프로세스의 최대 수). 
기본값은, 복제를 비활성화하는 0이다. WAL 전송자 프로세스는 총 연결 수에 포함되므로 매개변수를 <xref linkend="guc-max-connections">보다 큰 값으로 설정할 수 없다. 
스트리밍 클라이언트의 연결이 갑작스럽게 끊어지면 타임아웃이 될 때까지 고아 연결 슬롯이 생기므로, 예상되는 클라이언트의 최대 수보다 이 매개변수를 약간 더 크게 설정하여 연결이 끊어진 클라이언트가 즉시 재연결될 수 있도록 해야 한다. 
이 매개변수는 서버 시작 시에만 설정 가능하다. 대기 서버로부터의 연결이 가능하도록 <varname>wal_level</>은 <literal>archive</>와 같거나 크게 설정해야 한다.
 </para>
 </listitem>
</varlistentry>

<varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
 <term><varname>max_replication_slots</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>max_replication_slots</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 서버가 지원할 수 있는 복제 슬롯의 최대 수를 지정한다(<xref linkend="streaming-replication-slots"> 참조). 기본값은 0이다. 이 매개변수는 서버 시작 시에만 설정 가능하다. 
 복제 슬롯의 사용이 가능하도록 <varname>wal_level</varname>은 <literal>archive</literal>와 같거나 크게 설정해야 한다. 현재 존재하는 복제 슬롯 수보다 작은 값으로 설정하면 서버가 시작되지 않는다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-wal-keep-segments" xreflabel="wal_keep_segments">
 <term><varname>wal_keep_segments</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>wal_keep_segments</> 환경 설정 매개변수</primary>
 </indexterm>
 </term>
 <listitem>
 <para>
대기 서버가 streaming replication을 위해 과거 로그 파일을 가져와야 하는 경우 <filename>pg_xlog</> 디렉토리에 저장되는 과거 로그 파일 세그먼트의 최소 수를 지정한다. 
각 세그먼트는 보통 16메가바이트이다. 전송 서버에 연결된 대기 서버가 <varname>wal_keep_segments</> 세그먼트에 휠씬 못 미치면 전송 서버는 대기 서버에 의해 필요한 만큼 WAL 세그먼트를 삭제하고, 이때 복제 연결이 중단된다. 
다운스트림 연결도 결과적으로 실패한다. (단, 대기 서버는 WAL 아카이빙이 사용 중인 경우 아카이브에서 세그먼트를 가져와서 복구할 수 있다.)
 </para>

 <para>
이것은, <filename>pg_xlog</>에 저장되는 최소 세그먼트 수만 지정한다. 시스템은 WAL 아카이브용으로 또는 checkpoint에서 복구용으로 세그먼트를 좀 더 보유해야 할 수 있다. 
<varname>wal_keep_segments</>가 0(기본값)인 경우 시스템은 대기 서버를 위한 추가 세그먼트를 유지하지 않으므로, 대기 서버에서 사용 가능한 예전 WAL 세그먼트의 수는 이전 checkpoint의 위치 및 WAL 아카이빙의 상태 함수이다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 </listitem>
</varlistentry>

 <varlistentry id="guc-wal-sender-timeout" xreflabel="wal_sender_timeout">
<term><varname>wal_sender_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_sender_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
지정된 밀리초 이상 작동되지 않은 복제 연결이 중단된다. 이것은 전송 서버가 대기 서버 충돌 또는 네트워크 중단을 검출할 때 유용하다. 0 값은 시스템 타임아웃 메커니즘을 비활성화한다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 60초이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-replication-master">
 <title>마스터 서버</title>

 <para>
이 매개변수는 복제 데이터를 하나 이상의 대기 서버로 전송하는 마스터/운영 서버에 설정할 수 있다. 
이 매개변수 외에, <xref linkend="guc-wal-level">은 마스터 서버에 적절하게 설정되어야 하고 옵션으로 WAL 아카이빙도 활성화될 수 있다(<xref linkend="runtime-config-wal-archiving"> 참조). 
사용자가 대기 서버가 마스터가 될 가능성에 대비하여 이 매개변수를 설정하고 싶어 하더라도 대기 서버의 이 매개변수 값은 아무 상관이 없다.
 </para>

<variablelist>

 <varlistentry id="guc-synchronous-standby-names" xreflabel="synchronous_standby_names">
<term><varname>synchronous_standby_names</varname> (<type>string</type>)
<indexterm>
 <primary><varname>synchronous_standby_names</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<xref linkend="synchronous-replication">에 설명된 대로 <firstterm>동기 복제</>를 지원할 수 있는 대기 서버 이름을 쉼표로 구분된 목록으로 지정한다. 작동 중인 동기 대기 서버는 한 번에 많아야 하나이다. 
커밋 대기 중인 트랜잭션은 이 대기 서버가 데이터 수신을 확인한 후에 진행이 허용된다. 
동기 대기 서버는 이 목록 중에서 현재 연결되어 있고 실시간으로 데이터를 스트리밍하는 첫 번째 대기 서버다(<link linkend="monitoring-stats-views-table">
<literal>pg_stat_replication</></link> 뷰에서 <literal>streaming</literal> 상태로 표시됨). 
이 목록에서 나중에 나타난 다른 대기 서버는 잠재적 동기 대기 서버를 나타낸다. 현재 동기 대기 서버가 어떤 이유로든 연결이 끊어진 경우 우선 순위가 그 다음으로 높은 대기 서버로 즉시 대체된다.
대기 서버 이름을 2개 이상 지정하면 매우 높은 고가용성을 달성할 수 있다.
 </para>
 <para>
대기 서버의 WAL 수신자의 <varname>primary_conninfo</>에 설정된 대로 이런 용도의 대기 서버 이름은 대기 서버의 <varname>application_name</> 설정이다. 고유성을 적용하는 메커니즘은 없다. 
복제의 경우, 일치하는 대기 서버 중 하나는 정확히 어떤 것인지 가늠하기 어렵지만 동기 대기 서버가 되도록 선택된다. 특수 항목 <literal>*</>는 <literal>walreceiver</>의 기본 애플리케이션 이름을 비롯한 모든 <varname>application_name</>과 일치한다.
 </para>
 <para>
동기 대기 서버 이름이 여기서 지정되지 않으면 동기 복제는 활성화되지 않고 트랜잭션 커밋은 복제를 기다리지 않는다. 이것은 기본 환경 설정이다. 
동기 복제가 활성화되더라도 개별 트랜잭션은 <xref linkend="guc-synchronous-commit"> 매개변수를 <literal>local</> 또는 <literal>off</>로 설정함으로써 복제를 기다리지 않도록 환경 설정할 수 있다.
 </para>
 <para>
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-defer-cleanup-age" xreflabel="vacuum_defer_cleanup_age">
<term><varname>vacuum_defer_cleanup_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_defer_cleanup_age</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</> 및 <acronym>HOT</> 업데이트가 데드 로우(dead row) 버전의 클린업을 연기하기 되는 트랜잭션 수를 지정한다. 기본값은 0개 트랜잭션이다. 
이것은 데드 로우(dead row) 버전이 열린 트랜잭션에서 더 이상 보이지 않는 즉시, 가능한 한 빨리 제거될 수 있다는 것을 의미한다. 
사용자는 <xref linkend="hot-standby">에 설명된 대로 핫 스탠바이가 지원하는 운영 서버에서 이 값을 0이 아닌 다른 값으로 설정하고 싶을 수도 있다. 
이것은 행의 조기 클린업에 의한 충돌 없이 대기 서버에서 쿼리가 완료되는 시간적 여유를 허용한다. 
그러나, 운영 서버에서 발생한 쓰기 트랜잭션 수에 관해서 값이 평가되므로, 대기 서버 쿼리에 대해 얼마만큼의 유예 시간이 가능한지를 예측하기는 어렵다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
대체 서버로서 대기 서버의 <varname>hot_standby_feedback</>을 이 매개변수의 사용으로 설정하는 것도 고려해야 한다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-replication-standby">
 <title>대기 서버</title>

 <para>
이 설정은 복제 데이터를 수신하는 대기 서버의 동작을 제어한다. 마스터 서버의 값은 무관하다.
 </para>

<variablelist>

 <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
<term><varname>hot_standby</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>hot_standby</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<xref linkend="hot-standby">에 설명된 대로 복구 중에 사용자가 쿼리를 연결하고 실행할 수 있는지를 지정한다. 기본값은 <literal>off</literal>이다. 이 매개변수는 서버 시작 시에만 설정 가능하다. 
복구 중 또는 대기 서버 모드에서만 효과가 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
<term><varname>max_standby_archive_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_standby_archive_delay</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
핫 스탠바이가 작동 중이면 <xref linkend="hot-standby-conflict">에서 설명된 대로 이 매개변수는 적용 직전의 WAL 항목과 충돌하는 대기 서버 쿼리를 취소하기 전에 대기 서버가 기다려야 하는 시간을 결정한다. 
WAL 데이터를 WAL 아카이브에서 읽어오는 경우(따라서 현재가 아닌 경우) <varname>max_standby_archive_delay</>가 적용된다. 기본값은 30초이다. 
지정되지 않으면 단위는 밀리초이다. -1 값은 쿼리 충돌이 완료될 때까지 대기 서버가 무한정 대기하도록 허용한다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
취소 전 쿼리를 실행할 수 있는 시간 길이와 <varname>max_standby_archive_delay</>는 동일하지 않는 점에 유의해야 한다. 오히려 이것은 WAL 세그먼트의 데이터를 적용하는 것이 허용된 최대 총 시간이다. 
따라서 WAL 세그먼트 초반에 어떤 쿼리 때문에 상당한 지연이 발생한 경우 후속 충돌 쿼리는 유예 시간이 훨씬 짧아진다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
<term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_standby_streaming_delay</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
핫 스탠바이가 작동 중이면 <xref linkend="hot-standby-conflict">에서 설명된 대로 이 매개변수는 적용 직전의 WAL 항목과 충돌하는 대기 서버 쿼리를 취소하기 전에 대기 서버가 기다려야 하는 시간을 결정한다. 
WAL 데이터를 스트리밍 복제를 통해 수신하는 경우 <varname>max_standby_streaming_delay</>가 적용된다. 기본값은 30초이다. 지정되지 않으면 단위는 밀리초이다. -1 값은 쿼리 충돌이 완료될 때까지 대기 서버가 무한정 대기하도록 허용한다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
취소 전 쿼리를 실행할 수 있는 시간 길이와 <varname>max_standby_streaming_delay</>는 동일하지 않은 점에 유의해야 한다. 오히려 이것은 운영 서버로부터 수신했던 WAL데이터를 적용하는 것이 허용된 최대 총 시간이다. 
따라서 어떤 쿼리 때문에 상당한 지연이 발생한 경우 후속 충돌 쿼리는 대기 서버가 다시 따라잡을 때까지 유예 시간이 훨씬 짧아진다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-receiver-status-interval" xreflabel="wal_receiver_status_interval">
<term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_receiver_status_interval</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
<para>
 대기 서버의 WAL 수신자 프로세스가 복제 프로세스에 대한 정보를 운영 서버 또는 업스트림 스탠바이로 전송하는 최소 빈도를 지정한다. 이것은 <link linkend="monitoring-stats-views-table">
 <literal>pg_stat_replication</></link> 뷰를 사용하여 볼 수 있다. 
 대기 서버는 작성된 마지막 트랜잭션 로그 위치, 디스크에 기록한 마지막 위치 및 적용된 마지막 위치를 알려 준다. 이 매개변수의 값은 리포트 지점간 초 단위의 최대 간격이다. 
 업데이트는 쓰기 또는 플러시(flush) 위치가 변경될 때마다 전송되거나 최소한 이 매개변수가 지정한 빈도로 전송된다. 따라서 적용 위치는 실제 위치보다 약간 뒤처질 수 있다. 
 이 매개변수를 0으로 설정하면 상태 업데이트가 완전히 비활성화된다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 10초이다.
</para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-hot-standby-feedback" xreflabel="hot_standby_feedback">
<term><varname>hot_standby_feedback</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>hot_standby_feedback</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
핫 스탠바이가 대기 서버에서 현재 실행 중인 쿼리에 대해 운영 서버 또는 업스트림 스탠바이로 피드백을 전송할 것인지를 지정한다. 
이 매개변수는 클린업 레코드에 의해 야기된 쿼리 취소를 없애는 데 사용할 수 있지만 일부 작업 부하의 경우 운영 서버에서 데이터베이스 팽창을 초래할 수 있다. 
피드백 메시지는 <varname>wal_receiver_status_interval</>당 한 번 이상 전송되지 않는다. 기본값은 <literal>off</literal>이다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
케스케이드형 복제를 사용 중인 경우 운영 서버에 도달할 때까지 피드백이 상류로 전달된다. 상류 전달 외에, 대기 서버는 수신하는 피드백을 다른 용도로 사용하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-receiver-timeout" xreflabel="wal_receiver_timeout">
<term><varname>wal_receiver_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_receiver_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
지정된 밀리초 이상 작동되지 않은 복제 연결이 중단된다. 이것은 대기 서버가 프라이머리 노드 충돌 또는 네트워크 중단을 검출할 때 유용하다. 
0 값은 시스템 타임아웃 메커니즘을 비활성화한다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 60초이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-query">
<title>쿼리 플랜</title>

<sect2 id="runtime-config-query-enable">
 <title>플래너 방법 환경 설정</title>

<para>
 이 환경 설정 매개변수는 쿼리 옵티마이저에 의해 선택된 쿼리 플랜에 영향을 주는 대략적인 방법을 제공한다. 
 특정 쿼리에 대한 옵티마이저에 의해 선택된 기본 플랜이 최적이 아닌 경우 <emphasis>임시</> 솔루션이 이 환경 설정 매개변수 중 하나를 사용하여 옵티마이저가 다른 플랜을 선택하게 강제할 수 있다. 
 옵티마이저가 선택한 플랜의 수준을 개선하는 더 나은 방법은 플래너 비용 상수를 조절하고(<xref linkend="runtime-config-query-constants"> 참조), ANALYZE를 수동으로 실행하고, <xref
 linkend="guc-default-statistics-target"> 환경 설정 매개변수 늘리고, <command>ALTER TABLE SET
 STATISTICS</command>를 사용하여 특정 칼럼에 대해 수집된 통계량을 늘리는 것이다.
</para>

 <variablelist>
 <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
<term><varname>enable_bitmapscan</varname> (<type>boolean</type>)
<indexterm>
 <primary>bitmap scan</primary>
</indexterm>
<indexterm>
 <primary><varname>enable_bitmapscan</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 bitmap-scan plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
<term><varname>enable_hashagg</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_hashagg</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 hashed aggregation plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
<term><varname>enable_hashjoin</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_hashjoin</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 hash-join plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
<term><varname>enable_indexscan</varname> (<type>boolean</type>)
<indexterm>
 <primary>index scan</primary>
</indexterm>
<indexterm>
 <primary><varname>enable_indexscan</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 index-scan plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-indexonlyscan" xreflabel="enable_indexonlyscan">
<term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)
<indexterm>
 <primary>index-only scan</primary>
</indexterm>
<indexterm>
 <primary><varname>enable_indexonlyscan</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 index-only-scan plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-material" xreflabel="enable_material">
<term><varname>enable_material</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_material</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 materialization의 사용을 활성화 또는 비활성화한다. materialization을 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 정확도가 요구되는 경우 외에는 플래너의 materialize 노드 삽입이 방지된다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
<term><varname>enable_mergejoin</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_mergejoin</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 merge-join plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
<term><varname>enable_nestloop</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_nestloop</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 nested-loop join plans 사용을 활성화 또는 비활성화한다. 
nested-loop joins를 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 사용 가능한 다른 방법이 있는 경우 플래너가 하나를 사용하는 것이 방지된다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
<term><varname>enable_seqscan</varname> (<type>boolean</type>)
<indexterm>
 <primary>sequential scan</primary>
</indexterm>
<indexterm>
 <primary><varname>enable_seqscan</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 sequential scan plan types 사용을 활성화 또는 비활성화한다. 
sequential scans를 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 사용 가능한 다른 방법이 있는 경우 플래너가 하나를 사용하는 것이 방지된다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
<term><varname>enable_sort</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_sort</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 explicit sort steps 사용을 활성화 또는 비활성화한다. 
explicit sorts를 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 사용 가능한 다른 방법이 있는 경우 플래너가 하나를 사용하는 것이 방지된다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
<term><varname>enable_tidscan</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_tidscan</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 <acronym>TID</> scan plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>
 <sect2 id="runtime-config-query-constants">
 <title>플래너 비용 상수</title>

<para>
 이 절에서 설명하는 <firstterm>cost</> 변수는 임의의 규모로 계산된다. 동일한 계수로 상향 또는 하향되는 상대적인 값만 플래너의 선택으로 바뀌지 않는다. 기본적으로, 이러한 비용 변수는 순차적 페이지 가져오기 비용을 근거로 한다. 
 즉, <varname>seq_page_cost</>는 인습적으로 <literal>1.0</>으로 설정되며, 다른 비용 변수는 그것을 기준으로 설정된다. 그러나 사용자가 원한다면 특정 머신에서 밀리초 단위의 실제 실행 시간 같이 다른 스케일을 사용할 수도 있다.
</para>

 <note>
<para>
 아쉽게도 비용 변수에 대한 이상적인 값을 결정하는 제대로 정의된(well-defined) 방법은 없다. 특정한 설치가 수신하는 전체 쿼리 믹스에 대한 평균으로 처리하는 것이 최선이다. 
 이것은 몇 가지 경험에 비추어 값을 변경하는 것은 매우 위험할 수 있음을 의미한다.
</para>
 </note>

 <variablelist>

 <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
<term><varname>seq_page_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>seq_page_cost</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한, 순차 가져오기 시리즈의 일부분인 디스크 페이지 가져오기 비용을 설정한다. 기본값은 1.0이다. 
이 값은 동일한 이름의 테이블스페이스 매개변수 설정에 의해 특수한 테이블스페이스의 테이블과 인덱스를 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
<term><varname>random_page_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>random_page_cost</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한, 비순차적으로 가져온 디스크 페이지의 처리 비용을 설정한다. 기본값은 4.0이다. 
이 값은 동일한 이름의 테이블스페이스 매개변수 설정에 의해 특수한 테이블스페이스의 테이블과 인덱스를 오버라이드할 수 있다.
 </para>

 <para>
이 값을 <varname>seq_page_cost</>에 비례하여 줄이면 시스템이 인덱스 스캔 쪽으로 치우치게 된다. 이 값을 늘리면 인덱스 스캔이 좀 더 비싸진다. 
양쪽 값을 함께 늘리거나 줄여서 CPU 비용에 비례하여 디스크 I/O 비용의 중요도를 변경할 수 있다. 이것은 이후의 매개변수에서 설명된다.
 </para>

 <para>
기계적 디스크 저장소에 대한 랜덤 액세스는 일반적으로 순차 액세스보다 4배 이상 비싸다. 
그러나 인덱싱된 읽기 같이 디스크에 대한 랜덤 액세스 대부분은 캐시에서 일어나므로 작은 기본값이 사용된다(4.0). 
랜덤 읽기의 90%는 캐싱되는 것으로 예상되는 반면, 기본값은 순차보다 모델링 랜덤 액세스가 40배 느린 것으로 생각될 수 있다.
 </para>

 <para>
사용자의 작업 부하에서 90%의 캐시율이 잘못된 가정인 경우 random_page_cost를 늘려서 랜덤 저장소 읽기의 실제 비용이 반영되도록 할 수 있다. 그에 따라, 총 서버 메모리보다 데이터베이스가 작아서 데이터가 완전히 캐시되는 경우 random_page_cost를 줄이는 것이 적절할 수 있다. 반도체 드라이브 같이 랜덤 읽기 비용이 시퀀스에 비해 상대적으로 낮은 저장소는 더 낮은 random_page_cost 값으로 모델링이 더 잘 될 수도 있다.
 </para>

 <tip>
<para>
 <varname>random_page_cost</>를 <varname>seq_page_cost</> 미만으로 설정하는 것이 시스템에서 허용되더라도 실제로는 그렇게 하는 것이 합리적이지 않다. 
 단, 데이터베이스 전체가 RAM에 캐치되는 경우에는 시퀀스 밖 페이지를 손대는 것에 대한 패널티가 없으므로 동일하게 설정하는 것은 괜찮다. 
 또한 과도하게 캐시되는 데이터베이스에서 RAM에 이미 있는 페이지를 가져오는 비용이 일반적인 상태의 것보다 훨씬 적으므로 사용자는 CPU 매개변수에 비례하여 양쪽 값을 줄여야 한다. 
</para>
 </tip>
</listitem>
 </varlistentry>

 <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
<term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cpu_tuple_cost</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한 쿼리 도중 각 행의 처리 비용을 설정한다. 기본값은 0.01이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
<term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cpu_index_tuple_cost</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한 인덱스 스캔 도중 각 인덱스 항목의 처리 비용을 설정한다. 기본값은 0.005이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
<term><varname>cpu_operator_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cpu_operator_cost</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한, 쿼리 도중 실행된 각 연산자 또는 함수의 처리 비용을 설정한다. 기본값은 0.0025이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
<term><varname>effective_cache_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>effective_cache_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
단일 쿼리에 사용할 수 있는 디스크 캐시의 효율적인 크기에 대한 플래너의 가정을 설정한다. 이것은 인덱스를 사용하는 비용 추정에 반영된다. 
값이 클수록 인덱스 스캔이 사용될 가능성이 높다. 값이 작을수록 순차 스캔이 사용될 가능성이 높다. 
이 매개변수를 설정하는 경우 <productname>Agens SQL</productname>의 공유 버퍼와, <productname>Agens SQL</productname> 데이터 파일에 사용되는 커널의 디스크 캐시 부분을 모두 고려해야 한다. 
또한 사용 가능한 공간을 공유해야 하므로 서로 다른 테이블에 대해 예상되는 동시 쿼리 수도 고려해야 한다. 
이 매개변수는 <productname>Agens SQL</productname>에 의해 할당된 공유 메모리 크기에는 효과가 없으며, 커널 디스크 캐시도 예약하지 않는다. 
추정용으로만 사용된다. 또한 시스템은 디스크 캐시에 쿼리 간 데이터가 잔류할 것이라고 가정하지 않는다. 기본값은 4기가바이트이다(<literal>4GB</>).
 </para>
</listitem>
 </varlistentry>

 </variablelist>

</sect2>
 <sect2 id="runtime-config-query-geqo">
 <title>제네릭 쿼리 옵티마이저</title>

 <para>
제네릭 쿼리 옵티마이저(GEQO)는 휴리스틱 검색을 사용하는 쿼리 플래닝을 하는 알고리즘이다. 
이것은 검색 비용이 많이 드는 일반 알고리즘보다 적은 플랜 생성 비용으로, 복잡한 쿼리(다수의 관계 조인)의 플래닝 시간을 줄인다. 
 </para>

 <variablelist>

 <varlistentry id="guc-geqo" xreflabel="geqo">
<term><varname>geqo</varname> (<type>boolean</type>)
<indexterm>
 <primary>genetic query optimization</primary>
</indexterm>
<indexterm>
 <primary>GEQO</primary>
 <see>genetic query optimization</see>
</indexterm>
<indexterm>
 <primary><varname>geqo</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
전체 쿼리 최적화를 활성화 또는 비활성화한다. 기본값은 on이다. 
보통은 운영 중 해제하지 않는 것이 최선이며 <varname>geqo_threshold</varname> 변수는 좀 더 세분화된 GEQO 제어를 제공한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
<term><varname>geqo_threshold</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_threshold</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
최소한 <literal>FROM</> 항목에 관련된 수만큼 쿼리를 플랜하는 전체 쿼리 최적화을 사용한다. (<literal>FULL OUTER JOIN</> 구문은 하나의 <literal>FROM</> 항목으로 계산된다.) 기본값은 12이다. 
단순 쿼리의 경우는 일반적으로 정규, 소모성 검색 플래너를 사용하는 것이 낫지만, 테이블이 다수 있는 쿼리의 경우 소모성 검색은 너무 오래 걸리며, 차선의 플랜을 실행하는 것보다 더 오래 걸릴 수도 있다. 
따라서 쿼리 크기에 대한 임계값은 GEQO 사용 관리에 편리한 방법이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
<term><varname>geqo_effort</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_effort</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GEQO에서 플래닝 시간과 쿼리 플랜의 수준 간 트레이드 오프를 제어한다. 이 변수는 1 ~ 10 사이의 integer여야 한다. 
기본값은 5이다. 값이 클수록 쿼리 플래닝에 소요되는 시간이 늘어나지만, 효율적인 쿼리 플랜이 선택될 가능성도 높아진다.
 </para>

 <para>
<varname>geqo_effort</varname>가 직접 아는 일은 실제로 없다. GEQO 동작에 영향을 미치는 다른 변수에 대한 기본 값을 계산하는 데에만 이용된다(아래에 설명). 
원한다면 그 대신 다른 매개변수를 직접 설정할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
<term><varname>geqo_pool_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_pool_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GEQO에서 사용되는 풀 크기를 제어한다. 풀 크기는 제네틱 채우기(genetic population)에서의 개체 수를 뜻한다. 
이것은 최소 2 이상의 유용한 값이어야 하며, 일반적으로 100 ~ 1000이다. 0으로 설정되면(기본 설정) 적정값이 <varname>geqo_effort</varname> 및 쿼리의 테이블 수에 따라 선택된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
<term><varname>geqo_generations</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_generations</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
알고리즘 반복 숫자이자, GEQO에서 사용되는 생성 수를 제어한다. 이것은 최소 1 이상이어야 하며, 유용한 값은 풀 크기와 동일한 범위 내이다. 
0으로 설정되면(기본 설정) 적정값이 <varname>geqo_pool_size</varname>에 따라 선택된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
<term><varname>geqo_selection_bias</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>geqo_selection_bias</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GEQO에 의해 사용된 selection bias를 제어한다. selection bias는 채우기 내부의 선택적 압력이다. 값은 1.50 ~ 2.00일 수 있으며, 후자가 기본값이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
<term><varname>geqo_seed</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>geqo_seed</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
조인 순서 검색 공간의 랜덤 경로를 선택하기 위해 GEQO에 의한 난수 발생기의 초기값을 제어한다. 값은 0(기본값) ~ 1일 수 있다. 
값을 변경하면 탐색할 조인 경로 집합이 바뀌고 결과적으로 발견된 최상의 경로가 좋을 수도 있고 나쁠 수도 있다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 <sect2 id="runtime-config-query-other">
 <title>Other Planner Options</title>

 <variablelist>

 <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
<term><varname>default_statistics_target</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>default_statistics_target</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>ALTER TABLE
SET STATISTICS</>를 통해 설정된 칼럼 특정 타겟 없이, 테이블 칼럼에 대한 기본 통계 타겟을 설정한다. 
큰 값을 설정하면 <command>ANALYZE</>를 수행하는 데 필요한 시간이 늘어나지만 플래너 평가 수준을 높일 수 있다. 기본값은 100이다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
<term><varname>constraint_exclusion</varname> (<type>enum</type>)
<indexterm>
 <primary>constraint exclusion</primary>
</indexterm>
<indexterm>
 <primary><varname>constraint_exclusion</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 최적화를 위해 쿼리 플래너의 테이블 제약 조건을 제어한다. 
<varname>constraint_exclusion</>의 허용 값은 <literal>on</>(모든 테이블에 대해 제약 조건 검사), <literal>off</>(제약 조건 검사 안함) 및 <literal>partition</>(상속 자식 테이블 및 <literal>UNION ALL</> 하위 쿼리에 대해서만 제약 조건 검사)이다. 
<literal>partition</>은 기본 설정이다. 
</para>

 <para>
이 매개변수가 이것을 특정 테이블에 대해 허용하면 플래너가 쿼리 조건을 테이블의 <literal>CHECK</> 제약 조건과 비교하고 제약 조건에 위배되는 테이블을 검색하는 것은 생략한다. 
예를 들면:

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>

제약 조건 배제가 활성화되면 이 <command>SELECT</>는 성능 개선을 위해 <structname>child1000</>을 일절 스캔하지 않는다.
 </para>

 <para>
현재, 제약 조건 배제는 테이블 파티션에 주로 사용되는 경우에만 기본값으로 활성화된다. 모든 테이블에 대해 활성화되며, 간단한 쿼리에도 눈에 띄게 플래닝 오버헤드가 가중되어 간단한 쿼리의 장점이 상쇄된다. 
파티션된 테이블이 없을 경우 전적으로 해제하는 것이 좋다.
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
<term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cursor_tuple_fraction</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
검색할 커서 행의 분할에 대한 플래너의 추정치를 설정한다. 기본값은 0.1이다. 
값이 작을수록 플래너가 커서에 대해 <quote>fast start</> 플랜을 사용하도록 유도되고, 그러면 전체 행을 가져오느라 시간이 오래 걸리는 와중에 처음 몇 개의 행만 빠르게 검색된다. 
값이 클수록 총 예상 시간이 중요해진다. 최대 설정 1.0에서는 커서가 정확히 일반 쿼리처럼 플랜되어 총 예상 시간만 고려되고, 첫 번째 행을 얼마나 빨리 가져오는지는 고려하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
<term><varname>from_collapse_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>from_collapse_limit</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
결과로 나온 <literal>FROM</literal> 목록에 이 숫자만큼의 항목이 없을 경우 플래너가 하위 쿼리를 상위 쿼리에 병합한다. 값이 작을수록 플래닝 시간은 짧아지지만 하위 쿼리 플랜이 나올 수 있다. 
기본값은 8이다. 
 </para>

 <para>
이 값을 <xref linkend="guc-geqo-threshold"> 이상으로 설정하면 GEQO 플래너의 사용이 트리거되어 결과적으로 최적화되지 않은 플랜이 된다. <xref linkend="runtime-config-query-geqo">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
<term><varname>join_collapse_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>join_collapse_limit</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
결과 목록이 이 항목에 미치지 못할 경우 플래너는 명시적 <literal>JOIN</> 구문(<literal>FULL JOIN</> 제외)을 <literal>FROM</> 항목으로 재작성한다. 값이 작을수록 플래닝 시간은 짧아지지만 하위 쿼리 플랜이 나올 수 있다.
 </para>

 <para>
기본적으로 이 변수는 <varname>from_collapse_limit</varname>와 동일하게 설정되며, 대부분의 사용에 적합하다. 1로 설정하면 명시적 <literal>JOIN</>의 재정렬이 방지된다. 따라서 이 쿼리에서 지정된 명시적 조인 순서는 관계가 조인되는 실제 순서가 된다. 
쿼리 플래너가 항상 최적의 조인 순서를 선택하는 것은 아니므로 고급 사용자는 이 변수를 임시로 1로 선택한 다음, 원하는 조인 순서를 명시적으로 지정할 수 있다. 
 </para>

 <para>
이 값을 <xref linkend="guc-geqo-threshold"> 이상으로 설정하면 GEQO 플래너의 사용이 트리거되어 결과적으로 최적화되지 않은 플랜이 된다. 
<xref linkend="runtime-config-query-geqo">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-logging">
<title>에러 리포팅 및 로깅</title>

<indexterm zone="runtime-config-logging">
 <primary>server 로그</primary>
</indexterm>

<sect2 id="runtime-config-logging-where">
 <title>Where To 로그</title>

 <indexterm zone="runtime-config-logging-where">
<primary>where to 로그</primary>
 </indexterm>

 <variablelist>

 <varlistentry id="guc-log-destination" xreflabel="log_destination">
<term><varname>log_destination</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_destination</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>Agens SQL</productname>은 <systemitem>stderr</systemitem> 및 <systemitem>csvlog</systemitem>, 
<systemitem>syslog</systemitem>를 비롯한 서버 메시지를 로깅하는 몇 가지 메서드를 지원한다. 
Windows의 경우, <systemitem>eventlog</systemitem>로 지원한다. 원하는 로그 대상 목록을 쉼표로 구분하여 이 매개변수를 설정한다. 
기본값은 <systemitem>stderr</systemitem>로만 로깅하는 것이다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
<systemitem>csvlog</>가 <varname>log_destination</>에 포함된 경우 로그 항목은 프로그램으로 로그를 로딩하기 편리한 <quote>comma separated value</>(CSV) 형식으로 출력된다. 
자세한 내용은 <xref linkend="runtime-config-logging-csvlog">을 참조 바란다. 
CSV 형식 로그 출력을 사용으로 설정하려면 <xref linkend="guc-logging-collector">를 사용으로 설정해야 한다.
 </para>

 <note>
<para>
 대부분의 Unix 시스템에서 <varname>log_destination</> 옵션의 <application>syslog</application>를 사용하려면 <systemitem>syslog</systemitem> 데몬의 환경 설정을 변경해야 한다. 
 <productname>Agens SQL</productname>은 <application>syslog</application> 기능 <literal>LOCAL0</> ~ <literal>LOCAL7</>(<xref
 linkend="guc-syslog-facility"> 참조)로 로깅할 수 있지만 대부분의 플랫폼에서 기본값 <application>syslog</application> 환경 설정은 모든 해당 메시지를 취소한다. 
 이것이 작동되게 하려면 다음과 같은 문장을,
<programlisting>
local0.*/var/log/postgresql
</programlisting>
 <application>syslog</application> 데몬의 환경 설정 파일에 추가해야 할 수 있다.
</para>
<para>
 Windows에서 <varname>log_destination</>의 <literal>eventlog</literal> 옵션을 사용하는 경우 이벤트 소스와 라이브러리를 운영 체제에 등록해서 Windows 이벤트 뷰어가 이벤트 로그 메시지를 명확하게 표시하도록 해야 한다. 
 자세한 내용은 <xref linkend="event-log-registration">을 참조 바란다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
<term><varname>logging_collector</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>logging_collector</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 이 매개변수는 <systemitem>stderr</>로 전송된 로그 메시지를 캡처하여 로그 파일로 리다이렉트하는 <firstterm>logging collector</> 백그라운드 프로세스를 활성화한다. 
 일부 메시지 유형은 <application>syslog</> 출력에 나타나지 않을 수 있으므로 <application>syslog</>에 로깅하는 것보다 이 방법은 대체로 유용하다. 
 (공통된 예시 중 한 가지는 동적 링커 실패 메시지이고, 또 다른 예시는 <varname>archive_command</> 같은 스크립트에서 생성된 에러 메시지이다.) 이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <note>
<para>
 logging collector를 사용하지 않고 <systemitem>stderr</>에 로깅하는 것이 가능하다. 서버의 <systemitem>stderr</>가 다이렉트된 곳이면 어디든 로그 메시지가 출력된다. 
 그러나, 해당 메서드는 로그 파일을 로테이션하는 편리한 방법을 제공하지 않으므로 로그 양이 적을 때만 적당하다. 
 또한 logging collector를 사용하지 않는 일부 플랫폼은 복수 프로세스가 동일한 로그 파일에 동시에 쓰기 때문에 서로가 덮어쓰기 되므로 결과적으로 로그 출력이 왜곡되거나 분실된다.
</para>
 </note>

 <note>
<para>
logging collector는 메시지 분실을 방지하는 용도로 고안되었다. 이것은 부하가 매우 심한 경우에, 컬렉터가 뒤처졌을 경우 서버 프로세스가 추가 로그 메시지의 전송을 시도하면서 차단이 일어날 수 있다. 
반대로, 기록할 수 없을 때는 <application>syslog</>가 메시지를 드롭하는데, 이것은 이러한 상황에서 일부 메시지를 로깅하는 데는 실패했지만 시스템의 나머지는 블로킹하지 않음을 의미한다.
</para>
 </note>

</listitem>
 </varlistentry>

 <varlistentry id="guc-log-directory" xreflabel="log_directory">
<term><varname>log_directory</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_directory</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</>를 사용으로 설정하면 이 매개변수는 로그 파일이 생성되는 디렉토리를 결정한다. 절대 경로 또는 클러스터 데이터 디렉토리에 대한 상대 경로로 설정할 수 있다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 <literal>pg_log</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-filename" xreflabel="log_filename">
<term><varname>log_filename</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_filename</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>를 사용으로 설정하면 이 매개변수는 생성된 로그 파일의 파일 이름을 설정한다. 
값은 <function>strftime</function> 패턴으로 처리되므로, <literal>%</literal> 이스케이프를 사용하여 시간에 따라 바뀌는 파일 이름을 지정할 수 있다. (시간대 의존적 <literal>%</literal> 이스케이프가 있을 경우 <xref linkend="guc-log-timezone">에서 지정된 시간대로 계산된다.) 
지원되는 <literal>%</literal> 이스케이프는 Open Group의 <ulink
url="http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime
</ulink> 규격에 등재된 것과 유사하다. 시스템의 <systemitem>strftime</systemitem>이 직접 사용되지는 않으므로 플랫폼 특정(비표준) 확장자가 효력이 없다. 기본값은 <literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>이다.
 </para>
 <para>
이스케이프 없이 파일 이름을 지정하면 로그 로테이션 유틸리티를 사용하여 결국에는 전체 파일이 채워지는 것을 방지하는 계획을 세워야 한다. 
8.4 이전 릴리스에서, <literal>%</literal> 이스케이프가 사용되지 않으면 <productname>Agens SQL</productname>은 새 로그 파일 생성 시간 epoch를 추가했었는데, 이 기능은 사라졌다. 
 </para>
 <para>
<varname>log_destination</>에서 CSV 형식 출력을 사용으로 설정한 경우 타임스탬프 로그 파일 이름 뒤에 <literal>.csv</>가 추가되어 CSV 형식 출력 파일 이름이 만들어진다. (<varname>log_filename</>이 <literal>.log</>로 끝나는 경우 접미사가 대신 사용된다.)
 </para>
 <para>
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
<term><varname>log_file_mode</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_file_mode</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
Unix 시스템에서, 이 매개변수는 <varname>logging_collector</varname>가 사용으로 설정된 경우 로그 파일에 대한 권한을 설정한다. (Microsoft Windows에서 이 매개변수는 무시된다.) 
매개변수 값은, <function>chmod</function> 및 <function>umask</function> 시스템 쉘에서 수용되는 형식으로 지정된 숫자 형식이어야 한다. (관례적인 8진수 형식을 사용하려면 <literal>0</literal>(영)으로 시작되는 숫자여야 한다.)
 </para>
 <para>
기본 권한은, 서버 소유자만 로그 파일을 읽거나 쓸 수 있는 <literal>0600</>이다. 일반적으로 유용한 다른 설정은, 소유자 그룹의 멤버가 파일을 읽을 수 있는 <literal>0640</>이다. 
그러나, 해당 설정을 사용하려면 클러스터 데이터 디렉토리 바깥에서도 파일을 저장하도록 <xref linkend="guc-log-directory">를 변경해야 한다. 
로그 파일에 중요한 데이터가 포함되어 있을 수도 있으므로 어떤 경우든 로그 파일을 누구나 읽을 수 있게 하는 것은 현명하지 못하다.
 </para>
 <para>
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
<term><varname>log_rotation_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_rotation_age</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>를 사용으로 설정하면 이 매개변수는 개별 로그 파일의 최대 수명을 결정한다. 여기서 지정된 분 시간이 경과된 후 새로운 로그 파일이 생성된다. 
시간을 기준으로 새 로그 파일을 생성하지 않으려면 0으로 설정한다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
<term><varname>log_rotation_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_rotation_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>를 사용으로 설정하면 이 매개변수는 개별 로그 파일의 최대 크기를 결정한다. 여기서 지정된 킬로바이트가 로그 파일에 방출된 후 새로운 로그 파일이 생성된다. 
크기를 기준으로 새 로그 파일을 생성하지 않으려면 0으로 설정한다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
<term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_truncate_on_rotation</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>가 사용으로 설정된 경우 이 매개변수에 의해 <productname>Agens SQL</productname>가 이름이 동일한 기존 로그 파일에 추가하는 것이 아니라 파일을 비운다(덮어쓰기). 
단, 비우기는 서버 시작 시 또는 크기 기준 로테이션이 아니라 시간 기준 로테이션에 의해 새 파일이 열린 경우에만 실행된다. off인 경우에는 모든 경우에 기존 파일이 추가된다. 
예를 들면, <literal>postgresql-%H.log</literal> 같은 <varname>log_filename</varname>과 함께 이 설정을 사용하면 24시간마다 로그 파일을 생성하고 주기적으로 덮어쓰기 된다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
예: 7일간 로그를 유지하고, 1일 1로그 파일의 이름을 <literal>server_log.Mon</literal>, <literal>server_log.Tue</literal> 등으로 명명하고, 마지막 주의 로그를 이 주의 로그로 자동 덮어쓰기 하려면 <varname>log_filename</varname>은 <literal>server_log.%a</literal>로 설정하고, 
<varname>log_truncate_on_rotation</varname>은 <literal>on</literal>으로 설정하고, <varname>log_rotation_age</varname>는 <literal>1440</literal>으로 설정해야 한다.
 </para>
 <para>
예: 24시간 로그를 유지하고, 1시간당 1개 로그 파일을 생성하되, 로그 파일 크기가 1GB를 초과하면 곧장 로테이션되게 하려면 <varname>log_filename</varname>은 <literal>server_log.%H%M</literal>으로 설정하고, <varname>log_truncate_on_rotation</varname>은 <literal>on</literal>으로 설정하고, 
<varname>log_rotation_age</varname>는 <literal>60</literal>으로 설정하고, <varname>log_rotation_size</varname>는 <literal>1000000</literal>으로 설정해야 한다. <varname>log_filename</varname> 파일에서 <literal>%M</>을 포함하면 크기 구동 로테이션으로 시간의 초기 파일 이름과는 다른 파일 이름이 선택되도록 할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
<term><varname>syslog_facility</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>syslog_facility</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<application>syslog</>에 로깅하도록 설정된 경우 이 매개변수는 사용할 <application>syslog</application> <quote>facility</quote>를 결정한다.
<literal>LOCAL2</>, <literal>LOCAL3</>, <literal>LOCAL4</>,
<literal>LOCAL5</>, <literal>LOCAL6</>, <literal>LOCAL7</> 중에서 선택할 수 있으며, 기본값은 <literal>LOCAL0</>이다. 
시스템의 <application>syslog</application> 데몬에 관한 문서를 참조하기 바란다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
<term><varname>syslog_ident</varname> (<type>string</type>)
<indexterm>
 <primary><varname>syslog_ident</> 환경 설정 매개변수</primary>
</indexterm>
</term>
 <listitem>
<para>
 <application>syslog</>에 로깅하도록 설정된 경우 이 매개변수는 <application>syslog</application> 로그에서 <productname>Agens SQL</productname> 메시지를 식별하기 위해 사용되는 프로그램 이름을 결정한다. 기본값은 <literal>postgres</literal>이다. 
 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
</para>
 </listitem>
</varlistentry>

 <varlistentry id="guc-event-source" xreflabel="event_source">
<term><varname>event_source</varname> (<type>string</type>)
<indexterm>
 <primary><varname>event_source</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<application>event log</>에 로깅하도록 설정된 경우 이 매개변수는 syslog 로그에서 <productname>Agens SQL</productname> 메시지를 식별하기 위해 사용되는 프로그램 이름을 결정한다. 기본값은 <literal>Agens SQL</literal>이다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

</variablelist>
</sect2>
 <sect2 id="runtime-config-logging-when">
 <title>When To 로그</title>

 <variablelist>

 <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
<term><varname>client_min_messages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>client_min_messages</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
클라이언트로 전송할 메시지 레벨을 제어한다. 유효 값은 <literal>DEBUG5</> 및 
<literal>DEBUG4</>, <literal>DEBUG3</>, <literal>DEBUG2</>, 
<literal>DEBUG1</>, <literal>LOG</>, <literal>NOTICE</>, 
<literal>WARNING</>, <literal>ERROR</>, <literal>FATAL</>, 
<literal>PANIC</>이다. 각 레벨에는 후속되는 모든 레벨이 포함된다. 
후속 레벨일수록 메시지가 적게 전송된다. 기본값은 <literal>NOTICE</>이다. <literal>LOG</>는 여기서 <varname>log_min_messages</>와는 다른 랭크를 갖는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
<term><varname>log_min_messages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_min_messages</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 로그에 기록할 메시지 레벨을 제어한다. 유효 값은 <literal>DEBUG5</> 및 <literal>DEBUG4</>,
<literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>,
<literal>INFO</>, <literal>NOTICE</>, <literal>WARNING</>,
<literal>ERROR</>, <literal>LOG</>, <literal>FATAL</>, and
<literal>PANIC</>이다. 각 레벨에는 후속되는 모든 레벨이 포함된다. 
후속 레벨일수록 메시지가 로그에 적게 전송된다. 기본값은 <literal>WARNING</>이다. <literal>LOG</>는 여기서 <varname>client_min_messages</>와는 다른 랭크를 갖는다. 수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
<term><varname>log_min_error_statement</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_min_error_statement</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
에러 상태를 유발한 SQL 문이 서버 로그에 기록되는 것을 제어한다. 메시지가 지정된 심각도 이상일 경우 현재 SQL 문이 로그 항목에 포함된다. 
유효 값은 <literal>DEBUG5</literal> 및 
<literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
<literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
<literal>INFO</literal>, <literal>NOTICE</literal>,
<literal>WARNING</literal>, <literal>ERROR</literal>,
<literal>LOG</literal>,
<literal>FATAL</literal>, <literal>PANIC</literal>이다. 기본값은, 에러, 로그 메시지, 심각한 에러 또는 패닉을 유발한 문(statement)을 로깅하는 <literal>ERROR</literal>이다. 
실패 문의 로깅을 효율적으로 해제하려면 이 매개변수를 <literal>PANIC</literal>으로 설정해야 한다. 수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
<term><varname>log_min_duration_statement</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_min_duration_statement</> 환경 설정 매개변수</primary>
</indexterm>
</term>
 <listitem>
<para>
 최소한 지정된 밀리 초 동안 문이 실행된 경우 완료된 문별로 지속 시간이 로깅되게 한다. 이것을 0으로 설정하면 모든 문의 기간이 인쇄된다. -1(기본값)은 로깅 문 기간을 비활성화한다. 
 예를 들어, <literal>250ms</literal>로 설정하면 250ms 이상 실행된 모든 SQL 문이 로깅된다. 이 매개변수를 활성화하면 애플리케이션에서 최적화되지 않은 쿼리를 찾아내는 데 도움이 된다. 수퍼유저만 이 설정을 변경할 수 있다.
</para>

<para>
 확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 Parse, Bind 및 Execute 단계의 지속 시간이 각각 로깅된다.
</para>

 <note>
<para>
 이 옵션을 <xref linkend="guc-log-statement">와 함께 사용하면 로그 메시지 지속 시간에 <varname>log_statement</>가 반복되지 않으므로 문의 텍스트가 로깅되지 않는다. 
 <application>syslog</>를 사용하지 않는 경우 프로세스 ID 또는 세션 ID를 사용하여 문 메시지를 나중의 지속 시간 메시지에 연결할 수 있는 <xref linkend="guc-log-line-prefix">를 사용하여 PID 또는 세션 ID를 로깅하는 것이 좋다.
</para>
 </note>
 </listitem>
</varlistentry>

 </variablelist>

<para>
 <xref linkend="runtime-config-severity-levels">은 <productname>Agens SQL</>에서 사용되는 메시지 심각도 레벨을 설명한다. 
 로깅 출력이 <systemitem>syslog</systemitem> 또는 Windows의 <systemitem>eventlog</systemitem>에 전송되는 경우 심각도 레벨은 표에 나타난 대로 해석된다.
</para>

<table id="runtime-config-severity-levels">
 <title>메시지 심각도 레벨</title>
 <tgroup cols="4">
<thead>
 <row>
<entry>심각도</entry>
<entry>용도</entry>
<entry><systemitem>syslog</></entry>
<entry><systemitem>eventlog</></entry>
 </row>
</thead>

<tbody>
 <row>
<entry><literal>DEBUG1..DEBUG5</></entry>
<entry>개발자를 위한 상세 정보를 제공한다.</entry>
<entry><literal>DEBUG</></entry>
<entry><literal>INFORMATION</></entry>
 </row>

 <row>
<entry><literal>INFO</></entry>
<entry><command>VACUUM VERBOSE</>로부터 출력 같은 사용자가 암시적으로 요청한 정보를 제공한다.</entry>
<entry><literal>INFO</></entry>
<entry><literal>INFORMATION</></entry>
 </row>

 <row>
<entry><literal>NOTICE</></entry>
<entry>긴 식별자 잘라내기에 대한 공지 같이 사용자에게 유익한 정보가 제공된다.</entry>
<entry><literal>NOTICE</></entry>
<entry><literal>INFORMATION</></entry>
 </row>

 <row>
<entry><literal>WARNING</></entry>
<entry>트랜잭션 블록 외부로 <command>COMMIT</> 같은 문제의 가능성이 있는 경고를 제공한다.</entry>
<entry><literal>NOTICE</></entry>
<entry><literal>WARNING</></entry>
 </row>

 <row>
<entry><literal>ERROR</></entry>
<entry>현재 명령이 중단된 원인이 되는 에러를 알려준다.</entry>
<entry><literal>WARNING</></entry>
<entry><literal>ERROR</></entry>
 </row>

 <row>
<entry><literal>LOG</></entry>
<entry>checkpoint 작업 같이 관리자가 관심 있어 할 정보를 알려준다.</entry>
<entry><literal>INFO</></entry>
<entry><literal>INFORMATION</></entry>
 </row>

 <row>
<entry><literal>FATAL</></entry>
<entry>현재 세션이 중단된 원인이 되는 에러를 알려준다.</entry>
<entry><literal>ERR</></entry>
<entry><literal>ERROR</></entry>
 </row>

 <row>
<entry><literal>PANIC</></entry>
<entry>모든 데이터베이스 세션이 중단된 원인이 되는 에러를 알려준다.</entry>
<entry><literal>CRIT</></entry>
<entry><literal>ERROR</></entry>
 </row>
</tbody>
 </tgroup>
</table>

</sect2>
 <sect2 id="runtime-config-logging-what">
 <title>What To 로그</title>

 <variablelist>

 <varlistentry id="guc-application-name" xreflabel="application_name">
<term><varname>application_name</varname> (<type>string</type>)
<indexterm>
 <primary><varname>application_name</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>application_name</varname>은 <symbol>NAMEDATALEN</> 글자 수(표준 빌드에서 64자) 이내의 string일 수 있다. 이것은 일반적으로 서버 연결 시 애플리케이션에 의해 설정된다. 이름은 <structname>pg_stat_activity</> 뷰에 표시되고 CSV 로그 항목에 포함된다. 
<xref linkend="guc-log-line-prefix"> 매개변수를 통해 일반 로그 항목에 포함될 수도 있다. 인쇄 가능한 ASCII 문자만 <varname>application_name</varname> 값으로 사용된다. 다른 문자는 물음표(<literal>?</literal>)로 대체된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>debug_print_parse</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_print_parse</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<term><varname>debug_print_rewritten</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_print_rewritten</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<term><varname>debug_print_plan</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_print_plan</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개변수는 다양한 디버깅 출력을 활성화한다. 설정된 경우 결과로 나온 파싱 트리, 쿼리 재작성 출력 또는 실행된 각 쿼리별로 실행 플랜이 인쇄된다. 
이 메시지는 <literal>LOG</> 메시지 수준으로 출력되므로 기본적으로 서버 로그에 나타나지만 클라이언트로 전송되지는 않는다. <xref linkend="guc-client-min-messages"> 및/또는 <xref linkend="guc-log-min-messages">를 조절하여 변경할 수 있다. 이 매개변수의 기본값은 off이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>debug_pretty_print</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_pretty_print</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우, <varname>debug_pretty_print</varname>는 <varname>debug_print_parse</varname>, <varname>debug_print_rewritten</varname> 또는 <varname>debug_print_plan</varname>에 의해 생성된 메시지를 들여쓰기 한다. 
따라서 가독성이 증가하는 대신, off로 설정된 경우의 <quote>compact</> 형식보다 출력이 길어진다. 기본값은 on이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-checkpoints" xreflabel="log_checkpoints">
<term><varname>log_checkpoints</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_checkpoints</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
checkpoints 및 restartpoints가 서버 로그에 로깅되게 한다. 일부 통계는 작성된 버퍼 수 및 작성할 때 소요된 시간을 비롯한 로그 메시지에 포함된다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 off이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-connections" xreflabel="log_connections">
<term><varname>log_connections</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_connections</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버로의 각 연결 시도 및 성공한 클라이언트 인증 완료가 로깅되게 한다. 이 매개변수는 세션 시작 후에는 변경할 수 없다. 기본값은 off이다.
 </para>

 <note>
<para>
 <application>psql</> 같은 일부 클라이언트 프로그램은 패스워드가 필수인지 판단하면서 2번 연결을 시도하므로<quote>connection received</> 메시지가 중복되어 나타나도 문제를 뜻하지는 않는다. 
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
<term><varname>log_disconnections</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_disconnections</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 세션을 중단할 때 외에는 <varname>log_connections</varname>와 유사하게 서버 로그에 한 줄을 출력하고 세션의 지속 시간을 포함한다. 기본값은 off이다. 이 매개변수는 세션 시작 후에는 변경할 수 없다.
 </para>
</listitem>
 </varlistentry>


 <varlistentry id="guc-log-duration" xreflabel="log_duration">
<term><varname>log_duration</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_duration</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
완료된 모든 문의 지속 시간이 로깅 되게 한다. 기본값은 <literal>off</>이다. 수퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <para>
확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 Parse, Bind 및 Execute 단계의 지속 시간이 각각 로깅된다.
 </para>

 <note>
<para>
 이 옵션과 <xref linkend="guc-log-min-duration-statement">를 0으로 설정하는 것의 차이는 <varname>log_min_duration_statement</>를 초과하면 쿼리 텍스트가 강제로 로깅되지만, 이 옵션은 그렇지 않다는 것이다. 
 따라서 <varname>log_duration</>이 <literal>on</>으로 설정되고 <varname>log_min_duration_statement</>가 양의 값을 갖는 경우 모든 지속 시간이 로깅되지만 쿼리 텍스트는 임계값을 초과하는 문인 경우에만 포함된다. 
 이러한 동작은 고부하 설치에서 통계를 수집할 때 유용하다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
<term><varname>log_error_verbosity</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_error_verbosity</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
로깅된 각 메시지에 대해 서버 로그에 작성되는 상세 내역을 제어한다. 유효 값은, 각각 메시지에 표시되는 필드를 나타내는 <literal>TERSE</> 및 
<literal>DEFAULT</>, <literal>VERBOSE</>이다. 
<literal>TERSE</>는 <literal>DETAIL</> 및 <literal>HINT</>,
<literal>QUERY</>, <literal>CONTEXT</> 에러 정보의 로깅을 제외한다. 
<literal>VERBOSE</> 출력은 <symbol>SQLSTATE</> 에러 코드 및 소스 코드 파일 이름, 함수 이름 및 에러 발생 줄 번호를 포함한다. 
수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
<term><varname>log_hostname</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_hostname</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
기본적으로, 연결 로그 메시지는 연결 호스트의 IP 주소만 표시한다. 이 매개변수를 활성화하면 호스트 이름도 로깅된다. 
호스트 이름 설정에 따라 이것이 상당한 성능 패널티를 부과할 수도 있다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
<term><varname>log_line_prefix</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_line_prefix</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 이것은 각 로그 줄의 처음에 출력되는 <function>printf</> 스타일 string이다. <literal>%</> 문자는 <quote>이스케이프 시퀀스</>로 시작되며 아래 요약된 상태 정보로 대체된다. 미인식 이스케이프는 무시된다. 
 다른 문자는 로그 줄에 직접 복사된다. 
 일부 이스케이프는 세션 프로세스에 의해 인식만 된고, 메인 서버 프로세스 같은 백그라운드 프로세스에 의해 빈 것으로 처리된다. 
 상태 정보는 % 뒤, 옵션 앞에 숫자 리터럴을 지정함으로써 왼쪽 또는 오른쪽에 정렬될 수 있다. 
 음의 값은 최소 너비를 갖도록 상태 정보를 오른쪽에서 공백으로 채우고, 양의 값은 왼쪽에서 공백으로 채운다. 
 패딩(padding)은 로그 파일의 가독성을 늘릴 때 유용하다. 
 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
 기본값은 비어 있는 string이다.
 <informaltable>
<tgroup cols="3">
 <thead>
<row>
 <entry>Escape</entry>
 <entry>Effect</entry>
 <entry>Session only</entry>
 </row>
</thead>
 <tbody>
<row>
 <entry><literal>%a</literal></entry>
 <entry>어플리케이션 이름</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%u</literal></entry>
 <entry>사용자 이름</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%d</literal></entry>
 <entry>데이터베이스 이름</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%r</literal></entry>
 <entry>원격 호스트 이름 또는 IP 주소 및 원격 포트</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%h</literal></entry>
 <entry>원격 호스트 이름 또는 IP 주소</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%p</literal></entry>
 <entry>프로세스 ID</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%t</literal></entry>
 <entry>밀리초 없는 타임스탬프</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%m</literal></entry>
 <entry>밀리초 있는 타임스탬프</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%i</literal></entry>
 <entry>명령 태그: 세션의 현재 명령 유형</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%e</literal></entry>
 <entry>SQLSTATE 에러 코드</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%c</literal></entry>
 <entry>세션 ID: 아래 참조</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%l</literal></entry>
 <entry>1부터 시작하는 각 세션 또는 프로세스의 로그 줄 번호</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%s</literal></entry>
 <entry>프로세스 시작 타임스탬프</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%v</literal></entry>
 <entry>가상 트랜잭션 ID(backendID/localXID)</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%x</literal></entry>
 <entry>트랜잭션 ID(아무것도 할당되지 않은 경우 0)</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%q</literal></entry>
 <entry>출력은 하지 않지만 이 시점에서 중단을 위한 비 세션 프로세스를 표시하며, 세션 프로세스에 의해 무시된다.</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%%</literal></entry>
 <entry>리터럴 <literal>%</></entry>
 <entry>no</entry>
</row>
 </tbody>
</tgroup>
 </informaltable>
 <literal>%c</> 이스케이프는 점으로 구분된 4바이트 16진수(선행 0 없음) 2개로 환경 설정되는 의사 고유(quasi-unique) 세션을 인쇄한다. 
 숫자는 프로세스 시작 시간 및 프로세스 ID이므로 해당 항목의 인쇄 공간 절약 방법으로 <literal>%c</>를 사용할 수도 있다. 예를 들면, <literal>pg_stat_activity</>의 세션 식별자를 생성하려면 아래 쿼리를 사용한다.
<programlisting>
SELECT to_hex(EXTRACT(EPOCH FROM backend_start)::integer) || '.' ||
 to_hex(pid)
FROM pg_stat_activity;
</programlisting>

 </para>

 <tip>
<para>
 <varname>log_line_prefix</>에 비어 있지 않은 값을 설정하면 보통은 마지막 문자가 공백이 되도록 해서 로그 줄의 나머지와 육안상 구분이 되게 해야 한다. 
 문장 부호를 사용할 수도 있다.
</para>
 </tip>

 <tip>
<para>
 <application>Syslog</>는 자체 타임스탬프와 프로세스 ID 정보를 생성하므로 <application>syslog</>에 로깅하는 경우 사용자는 이러한 이스케이프를 포함하는 것을 원하지 않을 수도 있다.
</para>
 </tip>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-lock-waits" xreflabel="log_lock_waits">
<term><varname>log_lock_waits</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_lock_waits</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
잠금 획득을 위해 세션이 <xref linkend="guc-deadlock-timeout"> 이상 대기한 경우 로그 메시지를 생성할 것인지를 제어한다. 
잠금 대기가 성능 저하의 원인이 되는지를 판단할 때 유용하다. 기본값은 <literal>off</>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-statement" xreflabel="log_statement">
<term><varname>log_statement</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_statement</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
로깅할 SQL 문을 제어한다. 유효 값은 <literal>none</>(off), <literal>ddl</>, <literal>mod</>, <literal>all</>(모든 문)이다. <literal>ddl</>은 <command>CREATE</> 및 <command>ALTER</>, 
<command>DROP</> 문 같은 모든 데이터 정의 문을 로깅한다. 
<literal>mod</>는 모든 <literal>ddl</> 문과 <command>INSERT</> 및
<command>UPDATE</>, <command>DELETE</>, <command>TRUNCATE</>, <command>COPY FROM</>같은 데이터 수정 문을 로깅한다. <command>PREPARE</> 및 <command>EXECUTE</>, 
<command>EXPLAIN ANALYZE</>문도 포함된 명령이 적절한 타입인 경우 로깅된다. 
확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 Execute 메시지를 수신하면 로깅이 발생되고, Bind 매개변수의 값이 포함된다(작은따옴표를 겹쳐서 사용).
 </para>

 <para>
기본값은 none이다. 수퍼유저만 이 설정을 변경할 수 있다.
The default is <literal>none</>. Only superusers can change this
setting.
 </para>

 <note>
<para>
 기본 파싱이 완료되어 문 타입이 결정된 후에만 로그 메시지가 발생되므로 <varname>log_statement</> = <literal>all</> 설정에 의해서도 간단한 구문 에러가 포함된 문은 로깅되지 않는다. 
 확장 쿼리 프로토콜의 경우 이 설정은 Execute 단계 전에 실패한 문을 로깅하지 않는다(예: 파싱 분석 또는 플래닝 도중). 
 해당 문을 로깅하려면 <varname>log_min_error_statement</>를 <literal>ERROR</>(또는 그 이상)로 설정해야 한다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-temp-files" xreflabel="log_temp_files">
<term><varname>log_temp_files</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_temp_files</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임시 파일 이름과 크기의 로깅을 제어한다. 정렬, 해시 및 임시 쿼리 결과를 위해 임시 파일을 생성할 수 있다. 로그는 각 임시 파일이 삭제된 경우 입력된다. 
0 값은 모든 임시 파일 정보를 로깅하고, 양의 값은 크기가 지정된 킬로바이트 이상일 때만 로깅된다. 기본값은, 해당 로깅이 비활성화되는 -1이다. 수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-timezone" xreflabel="log_timezone">
<term><varname>log_timezone</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_timezone</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 로그에 작성되는 타임스탬프에 사용할 시간대를 설정한다. <xref linkend="guc-timezone">과 달리, 이 값은 클러스터 차원(cluster-wide)의 값이므로 모든 세션이 일관되게 타임스탬프를 알려준다. 
내장 기본값은 <literal>GMT</>이지만, 일반적으로 <filename>postgresql.conf</>에 오버라이드되고 <application>initdb</>는 시스템 환경에 해당되는 곳에 설정을 설치한다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 <sect2 id="runtime-config-logging-csvlog">
 <title>CSV 형식 로그 출력 사용</title>

 <para>
<varname>log_destination</> 목록에서 <literal>csvlog</>를 포함하면 로그 파일을 데이터베이스 테이블에 편리하게 가져올 수 있다. 
이 옵션은 쉼표로 구분된 값(<acronym>CSV</>) 형식으로 로그 줄을 출력하며, 밀리초의 타임스탬프, 사용자 이름, 데이터베이스 이름, 프로세스 ID, 클라이언트 호스트:포트 번호, 세션 ID, 세션별 줄 번호, 명령 태그, 세션 시작 시간, 
가상 트랜잭션 ID, 일반 트랜잭션 ID, 에러 심각도, SQLSTATE 코드, 에러 메시지, 에러 메시지 상세, 힌트, 에러 유발 내부 쿼리(있을 경우), 에러 위치의 문자 카운트, 에러 문맥, 
에어 유발 사용자 쿼리(있을 경우 및 <varname>log_min_error_statement</>에서 활성화된 경우), 에러 위치의 문자 카운트, Agens SQL 소스 코드에서 에러의 위치(<varname>log_error_verbosity</>가 <literal>verbose</>로 설정된 경우) 및 애플리케이션 이름의 칼럼으로 
환경 설정되어 있다. CSV 형식 로그 파일 출력을 저장하기 위한 샘플 테이블 정의는 다음과 같다.
<programlisting>
CREATE TABLE postgres_log
(
log_time timestamp(3) with time zone,
user_name text,
database_name text,
process_id integer,
connection_from text,
session_id text,
session_line_num bigint,
command_tag text,
session_start_time timestamp with time zone,
virtual_transaction_id text,
transaction_id bigint,
error_severity text,
sql_state_code text,
message text,
detail text,
hint text,
internal_query text,
internal_query_pos integer,
context text,
query text,
query_pos integer,
location text,
application_name text,
PRIMARY KEY (session_id, session_line_num)
);
</programlisting>
 </para>

 <para>
로그 파일을 이 테이블로 가져오려면 <command>COPY FROM</> 명령을 사용해야 한다.
<programlisting>
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
</programlisting>
 </para>

 <para>
 CSV 로그 파일 가져오기를 단순화하려면 몇 가지 작업이 필요하다.
 <orderedlist>
 <listitem>
 <para>
로그 파일에 대한 일관되고, 예측 가능한 네이밍 체계를 제공하려면 <varname>log_filename</varname> 및 <varname>log_rotation_age</>를 설정해야 한다. 
이로써 사용자는 파일 이름과 개별 로그 파일이 완료되는 시점을 예상할 수 있으므로 
가져오기에 대한 대비를 할 수 있다.
 </para>
</listitem>

<listitem>
 <para>
<varname>log_rotation_size</varname>를 0으로 설정하면 로그 파일 이름을 예상하기 어려워지므로 크기 기반 로그 파일 로테이션이 비활성화된다.
 </para>
</listitem>

<listitem>
<para>
 오래된 로그 데이터가 새 데이터와 동일한 파일에 혼재되지 않게 하려면 <varname>log_truncate_on_rotation</varname>을 <literal>on</>으로 설정해야 한다.
</para>
</listitem>

<listitem>
<para>
 위의 테이블 정의에는 프라이머리 키 규격이 포함되어 있다. 이것은 동일한 정보를 두 번 가져오는 실수를 방지하는 데 유용하다. 
 <command>COPY</> 명령은 한 번에 가져올 모든 데이터를 커밋하므로 에러 발생 시 가져오기 전체가 실패하게 된다. 
 로그 파일을 일부만 가져오고, 나중에 완료 시 다시 파일을 가져오는 경우 프라이머리 키 위반 때문에 가져오기가 실패할 수 있다. 
 가져오기 전에 로그가 완료되고 닫힐 때까지 기다려야 한다. 
 이 절차는 또한 기록이 아직 완료되지 않은 일부 라인을 가져오는 실수를 함으로써 <command>COPY</>가 실패하게 되는 사태를 방지한다.
</para>
</listitem>
</orderedlist>
</para>

</sect2>
 </sect1>

 <sect1 id="runtime-config-statistics">
<title>실시간 통계</title>

<sect2 id="runtime-config-statistics-collector">
 <title>쿼리 및 인덱스 통계 콜렉터</title>

 <para>
이 매개변수는 서버 차원(server-wide)의 통계 수집 기능을 제어한다. 
통계 수집이 활성화되면 생성된 데이터는 <structname>pg_stat</structname> 및 <structname>pg_statio</structname> 계열 시스템 뷰를 통해 액세스할 수 있다. 
자세한 내용은 <xref linkend="monitoring">을 참조 바란다.
 </para>

 <variablelist>

 <varlistentry id="guc-track-activities" xreflabel="track_activities">
<term><varname>track_activities</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>track_activities</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 세션에서 현재 실행 중인 명령의 실행이 시작될 때 해당 명령에 대한 정보 수집을 활성화한다. 
이 매개변수의 기본값은 on이다. 
활성화된 경우에도 이 정보가 모든 사용자에게 보이는 것은 아니며, 수퍼유저 및 리포트되는 세션의 소유자에게만 표시되므로 보안 위험을 나타내서는 안 된다. 
수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-activity-query-size" xreflabel="track_activity_query_size">
<term><varname>track_activity_query_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>track_activity_query_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 각각의 활성 세션에 대해 현재 실행 중인 명령을 추적하기 위해 <structname>pg_stat_activity</>.<structfield>query</> 필드에 예약된 바이트 수를 지정한다. 
 기본값은 1024이다. 이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-counts" xreflabel="track_counts">
<term><varname>track_counts</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>track_counts</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 작업에 대한 통계 수집을 활성화한다. 
autovacuum은 수집된 정보를 필요로 하므로 이 매개변수의 기본값은 on이다. 
수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-io-timing" xreflabel="track_io_timing">
<term><varname>track_io_timing</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>track_io_timing</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 I/O 호출의 타이밍을 활성화한다. 
운영 체제에 현재 시간을 반복해서 쿼리함으로써 일부 플랫폼에서는 상당한 오버헤드가 발생되므로 이 매개변수는 기본적으로 off이다. 
사용자 시스템에서 타이밍 오버헤드를 측정하기 위해 pg_test_timing 도구를 사용할 수 있다. 
I/O 타이밍 정보는 BUFFERS 옵션이 사용되는 경우 및 pg_stat_statements에 의해 EXPLAIN 출력에서 <xref linkend="pg-stat-database-view">에 표시된다. 
수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-functions" xreflabel="track_functions">
<term><varname>track_functions</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>track_functions</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
함수 호출 횟수 및 사용된 시간의 추적을 활성화한다. 
프로시저 언어 함수 <literal>all</literal>만 추적하기 위해 <literal>pl</literal>를 지정하면 SQL 및 C 언어 함수도 추적한다. 
기본값은, 함수 통계 추적을 비활성화하는 <literal>none</literal>이다. 
수퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <note>
<para>
 호출 쿼리에 간단하게 <quote>inlined</>되는 SQL 언어 함수는 이 설정과 무관하게 추적되지 않는다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
<term><varname>update_process_title</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>update_process_title</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
새 SQL 명령이 서버에서 수신될 때마다 프로세스 제목 업데이트를 활성화한다. 
프로세스 제목은 일반적으로 <command>ps</> 명령으로 보거나 <application>Process Explorer</>를 사용하여 Windows에서 볼 수 있다. 
수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-stats-temp-directory" xreflabel="stats_temp_directory">
<term><varname>stats_temp_directory</varname> (<type>string</type>)
<indexterm>
 <primary><varname>stats_temp_directory</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임시 통계 데이터를 저장할 디렉토리를 설정한다. 디렉토리에 대한 상대 경로이거나 절대 경로일 수 있다. 
기본값은 <filename>pg_stat_tmp</filename>이다. RAM 기본 파일 시스템에서 이것을 지정하면 물리적 I/O 요구 사항이 줄어들고 성능 개선으로 이어질 수 있다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-statistics-monitor">
 <title>통계 모니터링</title>
 <variablelist>

 <varlistentry>
<term><varname>log_statement_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_statement_stats</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<term><varname>log_parser_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_parser_stats</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<term><varname>log_planner_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_planner_stats</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<term><varname>log_executor_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_executor_stats</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 쿼리에 대해 각 모듈의 성능 통계를 서버 로그에 출력한다. 이것은 Unix <function>getrusage()</> 운영 체제 기능과 유사한 대략적인 프로파일링 방법이다. 
<varname>log_statement_stats</varname>는 총 문 통계를 리포트하고, 그 외의 것은 모듈별 통계를 알려준다. 
<varname>log_statement_stats</varname>는 모듈별 옵션과 함께 활성화될 수 없다. 이 옵션은 모두 기본적으로 비활성화된다. 수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>

</sect2>
 </sect1>

 <sect1 id="runtime-config-autovacuum">
<title>자동 Vacuuming</title>

<indexterm>
 <primary>autovacuum</primary>
 <secondary>환경 설정 매개변수s</secondary>
</indexterm>

 <para>
이 설정은 <firstterm>autovacuum</> 기능의 동작을 제어한다. 자세한 내용은 <xref linkend="autovacuum">을 참조 바란다.
 </para>

<variablelist>

 <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
<term><varname>autovacuum</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>autovacuum</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버가 autovacuum 런처 데몬을 실행해야 하는지를 제어한다. 
기본값은 on이지만, autovacuum이 작동되게 하려면 <xref linkend="guc-track-counts">도 활성화해야 한다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
이 매개변수가 비활성화된 경우 필요시 시스템이 autovacuum 프로세스를 실행하여 트랜잭션 ID 랩어라운드를 방지한다. 자세한 내용은 <xref
linkend="vacuum-for-wraparound">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-autovacuum-min-duration" xreflabel="log_autovacuum_min_duration">
<term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_autovacuum_min_duration</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
최소한 지정된 밀리초 동안 autovacuum에 의해 실행된 각각의 액션이 로깅되게 한다. 
0으로 설정하면 모든 autovacuum 액션이 로깅된다. -1(기본값)은 autovacuum 액션을 비활성화한다. 
예를 들면, 이것을 <literal>250ms</literal>로 설정한 경우 250ms 이상 지속되는 모든 자동 vacuums 및 분석이 로깅된다. 
또한 이 매개변수가 <literal>-1</literal> 이외의 다른 값으로 설정된 경우 잠금 충돌이 존재하여 autovacuum 액션을 건너뛰면 메시지가 로깅된다. 
이 매개변수를 활성화하면 autovacuum 작업을 추적하는 데 도움이 된다. 
이 설정은 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-max-workers" xreflabel="autovacuum_max_workers">
<term><varname>autovacuum_max_workers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_max_workers</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
한 번에 실행할 수 있는 autovacuum 프로세스(autovacuum 제외)의 최대 수를 지정한다. 기본값은 3이다. 
이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
<term><varname>autovacuum_naptime</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_naptime</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
주어진 데이터베이스에서 autovacuum 실행 사이의 최소 지연을 지정한다. 
각 라운드에서 데몬은 데이터베이스를 검사하고 필요 시 해당 데이터베이스 테이블에 대해 <command>VACUUM</> 및 <command>ANALYZE</> 명령을 실행한다. 
지연은 초 단위로 측정되며 기본값은 1분이다(<literal>1min</>). 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
<term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_threshold</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임의의 테이블에서 <command>VACUUM</>을 트리거하는 데 필요한 업데이트 또는 삭제된 튜플의 최소 수를 지정한다. 
기본값은 50튜플이다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
<term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_analyze_threshold</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임의의 테이블에서 <command>ANALYZE</>을 트리거하는 데 필요한 삽입, 업데이트 또는 삭제된 튜플의 최소 수를 지정한다. 
기본값은 50튜플이다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
<term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_scale_factor</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</>의 트리거 여부를 결정할 때 <varname>autovacuum_vacuum_threshold</varname>에 추가할 테이블 크기의 부분을 지정한다. 
기본값은 0.2이다(테이블 크기의 20%). 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
<term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>autovacuum_analyze_scale_factor</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>ANALYZE</>의 트리거 여부를 결정할 때 <varname>autovacuum_analyze_threshold</varname>에 추가할 테이블 크기의 부분을 지정한다. 
기본값은 0.1이다(테이블 크기의 10%). 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
<term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_freeze_max_age</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블 내 트랜잭션 ID 랩어라운드를 방지하기 위해 <command>VACUUM</> 명령을 강제로 실행하기 전에 테이블의 <structname>pg_class</>.<structfield>relfrozenxid</> 필드가 도달할 수 있는 연령(트랜잭션에서)을 지정한다. 
autovacuum이 달리 비활성화된 경우에도 시스템은 랩어라운드를 방지하기 위해 autovacuum 프로세스를 실행한다는 점에 유의해야 한다.
 </para>

 <para>
Vacuum은 pg_clog 서브 디렉토리에서 오래된 파일도 제거하는데, 이는 기본값이 2억 트랜잭션으로 상대적으로 낮기 때문이다. 
이 매개변수는 서버 시작 시에만 설정할 수 있지만 저장소 매개변수를 변경함으로써 개별 테이블에 대한 설정을 줄일 수 있다. 자세한 내용은 23.1.5절을 참조 바란다.
Vacuum also allows removal of old files from the
<filename>pg_clog</> subdirectory, which is why the default
is a relatively low 200 million transactions.
This parameter can only be set at server start, but the setting
can be reduced for individual tables by
changing storage parameters.
For more information see <xref linkend="vacuum-for-wraparound">.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-multixact-freeze-max-age" xreflabel="autovacuum_multixact_freeze_max_age">
<term><varname>autovacuum_multixact_freeze_max_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_multixact_freeze_max_age</varname> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블 내 multixact ID 랩어라운드를 방지하기 위해 <command>VACUUM</> 명령을 강제하기 전에 테이블의 <structname>pg_class</>.<structfield>relminmxid</> 필드가 도달할 수 있는 연령(multixacts에서)을 지정한다. 
autovacuum이 달리 비활성화된 경우에도 시스템은 랩어라운드를 방지하기 위해 autovacuum 프로세스를 실행한다는 점에 유의해야 한다.
 </para>

 <para>
Vacuuming multixacts는 <filename>pg_multixact/members</> 및 <filename>pg_multixact/offsets</> 서브 디렉토리에서 오래된 파일도 제거하는데, 이는 기본값이 4억 multixacts로 상대적으로 낮기 때문이다. 
이 매개변수는 서버 시작 시에만 설정할 수 있지만 저장소 매개변수를 변경함으로써 개별 테이블에 대한 설정을 줄일 수 있다. 자세한 내용은 <xref linkend="vacuum-for-multixact-wraparound">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
<term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_cost_delay</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
자동 <command>VACUUM</> 명령에 사용되는 비용 지연 값을 지정한다. -1을 지정하면 일반 <xref linkend="guc-vacuum-cost-delay"> 값이 사용된다. 
기본값은 20밀리초이다. 이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
<term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_cost_limit</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
자동 <command>VACUUM</> 명령에 사용되는 비용 제한 값을 지정한다. 
-1을 지정하면(기본값) 일반 <xref linkend="guc-vacuum-cost-limit"> 값이 사용된다. 
실행 중인 autovacuum workers가 하나 이상 있을 경우 각 worker 제한의 합계가 이 변수의 제한값을 초과하지 않도록 값이 비례 분배된다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

</variablelist>
 </sect1>

 <sect1 id="runtime-config-client">
<title>클라이언트 연결 기본값</title>

<sect2 id="runtime-config-client-statement">
 <title>문 동작</title>
 <variablelist>

 <varlistentry id="guc-search-path" xreflabel="search_path">
<term><varname>search_path</varname> (<type>string</type>)
<indexterm>
 <primary><varname>search_path</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>path</><secondary>for schemas</></>
</term>
<listitem>
 <para>
이 변수는 개체(테이블, 데이터 타입, 함수 등)를 스키마가 지정되지 않은 간단한 이름으로 참조하는 경우 스키마가 검색되는 순서를 지정한다. 
서로 다른 스키마에 이름이 동일한 개체가 있는 경우 사용된 검색 경로에 처음 발견된 것이 사용된다. 
검색 경로에서 어떤 스키마에도 없는 개체는 스키마를 구체화(점을 이용해서) 한 이름으로 지정하여 참조 가능하다.
 </para>

 <para>
<varname>search_path</varname>에 대한 값은 스키마 이름을 쉼표로 구분한 목록이다. 
스키마에 존재하지 않는 이름이거나, 사용자가 <literal>USAGE</> 권한이 없는 스키마 이름은 조용히 무시된다.
 </para>

 <para>
목록 항목 중 하나가 특수한 이름 <literal>$user</literal>인 경우, 해당 스키마 및 사용자에게 <literal>USAGE</> 권한이 있으면 <function>SESSION_USER</>가 리턴한 이름의 스키마는 대체된다. 
(그 외에는 <literal>$user</literal>가 무시된다.)
 </para>

 <para>
시스템 카탈로그 스키마 <literal>pg_catalog</>는 경로에 있든 없든 항상 검색된다. 경로에 있을 경우 지정된 순서대로 검색된다. <literal>pg_catalog</>가 경로에 없으면 경로 항목을 검색하기 <emphasis>전</>에 검색된다.
 </para>

 <para>
마찬가지로, 현재 세션의 임시 테이블 스키마 <literal>pg_temp_<replaceable>nnn</></>은 존재할 경우 항상 검색된다. 
<literal>pg_temp</><indexterm><primary>pg_temp</></> 별칭을 사용함으로써 경로에 명시적으로 나열할 수 있다. 
경로에 나열하지 않으면 검색부터 된다(<literal>pg_catalog</>를 검색하기도 전에). 
그러나, 관계(테이블, 뷰, 시퀀스 등) 및 데이터 타입 이름에 대한 임시 스키마만 검색된다. 
함수 또는 연산자 이름으로는 절대 검색되지 않는다.
 </para>

 <para>
특별한 타겟 스키마를 지정하지 않고 개체를 생성한 경우 <varname>search_path</varname>에 명명된 첫 번째 유효 스키마에 배치된다. 
검색 경로가 비어 있으면 에러가 리포트된다.
 </para>

 <para>
이 매개변수의 기본값은 <literal>"$user", public</literal>이다. 
이 설정은 데이터베이스의 공유 사용(사용자에게 개인 스키마가 없고 모두 <literal>public</>의 공유 사용인 경우), 개인 사용자별 스키마 및 이러한 것들의 조합을 지원한다. 
전역적 또는 사용자별 기본 검색 경로 설정을 전환함으로써 다른 효과를 얻을 수도 있다.
 </para>

 <para>
검색 경로에서 현재 효과적인 값은 <acronym>SQL</acronym> 함수 <function>current_schemas</>를 통해서 검사할 수 있다. 
<function>current_schemas</>는 <varname>search_path</varname>에 표시되는 항목이 해결되는 방법을 표시하므로 이것은 <varname>search_path</varname> 값을 검사하는 것과 다르다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
<term><varname>default_tablespace</varname> (<type>string</type>)
<indexterm>
 <primary><varname>default_tablespace</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>tablespace</><secondary>default</></>
</term>
<listitem>
 <para>
이 변수는 <command>CREATE</> 명령이 테이블스페이스를 명시적으로 지정하지 않는 경우 개체(테이블 및 인덱스)가 생성되는 기본 테이블스페이스를 지정한다.
 </para>

 <para>
값은 테이블스페이스의 이름 또는 현재 데이터베이스의 기본 테이블스페이스를 사용하여 지정하기 위한 비어 있는 string이다. 
기존 테이블스페이스의 이름과 값이 일치하지 않으면 <productname>Agens SQL</>이 자동으로 현재 데이터베이스의 기본 테이블스페이스를 사용한다. 
기본값이 아닌 테이블스페이스가 지정되면 사용자는 <literal>CREATE</> 권한이 있어야 하며, 그렇지 않으면 생성 시도에 실패한다.
 </para>

 <para>
이 변수를 임시 테이블에는 사용되지 않으며, 대신 <xref linkend="guc-temp-tablespaces">를 사용해야 한다.
 </para>

 <para>
이 변수는 데이터베이스 생성 시 사용되지 않는다. 
기본적으로 새 데이터베이스는 복사되었던 템플릿 데이터베이스로부터 테이블스페이스 설정을 상속받는다.
 </para>

 <para>
테이블스페이스에 대한 자세한 내용은 <xref linkend="manage-ag-tablespaces">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-temp-tablespaces" xreflabel="temp_tablespaces">
<term><varname>temp_tablespaces</varname> (<type>string</type>)
<indexterm>
 <primary><varname>temp_tablespaces</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>tablespace</><secondary>temporary</></>
</term>
<listitem>
 <para>
이 변수는 <command>CREATE</> 명령이 테이블스페이스를 명시적으로 지정하지 않는 경우 임시 개체(임시 테이블 및 임시 테이블의 인덱스)가 생성되는 테이블스페이스를 지정한다. 
대형 데이터집합 정렬 같은 용도의 임시 파일도 이 테이블스페이스에서 생성된다.
 </para>

 <para>
값은 테이블스페이스의 이름 목록이다. 
목록에서 이름이 2개 이상 있는 경우, 트랜잭션 내에서 연속 생성된 임시 개체가 목록에서 연속 테이블스페이스에 매치되는 것 외에는 <productname>Agens SQL</>는 임시 개체를 생성할 때마다 목록에서 멤버를 임의로 선택한다. 
목록에서 선택된 요소가 비어 있는 string인 경우 <productname>Agens SQL</>이 현재 데이터베이스의 기본 테이블 스페이스를 자동으로 대신 사용한다.
 </para>

 <para>
사용자에게 <literal>CREATE</> 권한이 없는 테이블스페이스를 지정하는 것이므로, <varname>temp_tablespaces</>가 인터랙티브하게 설정된 경우 존재하지 않는 테이블스페이스를 지정하는 것은 에러이다. 
단, 사용자에게 <literal>CREATE</> 권한이 없는 테이블스페이스이므로, 이전에 설정된 값을 사용하는 경우 존재하지 않는 테이블스페이스는 무시된다. 
특히, 이 규칙은 <filename>postgresql.conf</>에 설정된 값을 사용하는 경우에 적용된다.
 </para>

 <para>
기본 값은, 현재 데이터베이스의 기본 테이블스페이스에서 모든 임시 개체가 생성되는 비어 있는 string이다.
default_tablespace도 참조 바란다.
 </para>

 <para>
See also <xref linkend="guc-default-tablespace">.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
<term><varname>check_function_bodies</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>check_function_bodies</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개변수는 일반적으로 on이다. <literal>off</>로 설정되면 CREATE FUNCTION 중에 함수 본문 string의 검증이 비활성화된다. 
검증을 비활성화하면 검증 프로세스의 부작용이 예방되고 전방 참조 같은 문제로 인한 거짓 긍정이 방지된다. 
다른 사용자를 위해 함수를 로딩하기 전에 이 매개변수를 <literal>off</>로 설정해야 한다. 
<application>pg_dump</>는 자동으로 off로 설정한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
<term><varname>default_transaction_isolation</varname> (<type>enum</type>)
<indexterm>
 <primary>transaction isolation level</primary>
 <secondary>setting default</secondary>
</indexterm>
<indexterm>
 <primary><varname>default_transaction_isolation</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 SQL 트랜잭션은 <quote>read uncommitted</quote> 또는 <quote>read
committed</quote>, <quote>repeatable read</quote>, 
<quote>serializable</quote>의 격리 레벨을 갖고 있다. 
이 매개변수는 새 트랜잭션마다 기본 격리 레벨을 제어한다. 기본값은 <quote>read committed</quote>이다.
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
<term><varname>default_transaction_read_only</varname> (<type>boolean</type>)
<indexterm>
 <primary>read-only transaction</primary>
 <secondary>setting default</secondary>
</indexterm>
<indexterm>
 <primary><varname>default_transaction_read_only</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
읽기 전용 SQL 트랜잭션은 비 임시 테이블은 변경할 수 없다. 
이 매개변수는 새 트랜잭션마다 기본 읽기 전용 상태를 제어한다. 기본값은 <literal>off</>이다(읽기/쓰기).
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-default-transaction-deferrable" xreflabel="default_transaction_deferrable">
<term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)
<indexterm>
 <primary>deferrable transaction</primary>
 <secondary>setting default</secondary>
</indexterm>
<indexterm>
 <primary><varname>default_transaction_deferrable</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<literal>serializable</> 격리 수준에서 실행 중인 경우 진행을 허용하기 전에 유예 가능한 읽기 전용 SQL 트랜잭션을 지연시킬 수 있다. 
그러나 실행이 시작되면, 오버헤드가 발생하지 않고 직렬화를 보장하기 때문에 직렬화 코드는 동시 업데이트 때문에 강제 중단을 할 이유가 없어진다. 장기 실행되는 읽기 전용 트랜잭션에 적합하다.
</para>

<para>
이 매개변수는 새 트랜잭션마다 유예 가능한 기본 상태를 제어한다. 
이것은 현재 읽기 전용 트랜잭션에 아무런 효과가 없고, <literal>serializable</>보다 낮은 격리 수준에서 작동되는 트랜잭션에는 효과가 없다. 기본값은 <literal>off</>이다.
 </para>

</listitem>
 </varlistentry>


 <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
<term><varname>session_replication_role</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>session_replication_role</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
복제 관련 트리거 시작 및 현재 세션의 규칙을 제어한다. 
이 변수를 설정하려면 수퍼유저 권한이 필요하고, 따라서 이전에 캐시된 쿼리 플랜이 삭제된다. 가능한 값은 <literal>origin</>(기본값), <literal>replica</> 및 <literal>local</>이다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
<term><varname>statement_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>statement_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
명령이 클라이언트에서 서버로 도착한 때부터 걸린 시간이 지정된 밀리초를 초과한 문을 중단한다. 
<varname>log_min_error_statement</>가 <literal>ERROR</> 이하로 설정되면 타임아웃된 문도 로깅된다. 0 값(기본값)은 이것을 해제한다.
 </para>

 <para>
모든 세션에 영향을 줄 수 있으므로 <filename>postgresql.conf</>에서 <varname>statement_timeout</>을 설정하는 것은 권장하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lock-timeout" xreflabel="lock_timeout">
<term><varname>lock_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>lock_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블, 인덱스, 행 또는 기타 데이터베이스 개체의 잠금을 획득하기 위해 대기한 시간이 지정된 밀리초를 초과하면 문을 중단한다. 
획득 시도별로 시간 제한이 개별적으로 적용된다. 
이 제한은 명시적 잠금 요청(예: <command>LOCK TABLE</> 또는 <literal>NOWAIT</>하지 않은 <command>SELECT
FOR UPDATE</>) 및 암시적으로 획득한 잠금에 모두 적용된다. 
<varname>log_min_error_statement</>가 <literal>ERROR</> 이하로 설정되면 타임아웃된 문이 로깅된다. 
0 값(기본값)은 이것을 해제한다.
 </para>

 <para>
<varname>statement_timeout</>과 달리, 이 타임아웃은 잠금 대기 시에만 발생한다. 
<varname>statement_timeout</>이 0이 아닌 경우, 문 타임아웃이 항상 먼저 트리거되므로 <varname>lock_timeout</>을 동일한 값이나 큰 값으로 설정하는 것은 무의미하다.
 </para>

 <para>
모든 세션에 영향을 줄 수 있으므로 <filename>postgresql.conf</>에서 <varname>lock_timeout</>을 설정하는 것은 권장되지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
<term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_freeze_table_age</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</>은 테이블의 <structname>pg_class</>.<structfield>relfrozenxid</> 필드가 이 설정에서 지정된 연령에 도달한 경우 전체 테이블 스캔을 수행한다. 기본값은 1억 5천만 트랜잭션이다. 
사용자는 이 값을 0 ~ 20억 중 아무거나 설정할 수 있지만 <command>VACUUM</>은 유효 값을 <xref linkend="guc-autovacuum-freeze-max-age">의 95%로 슬며시 제한하므로 랩어라운드 방지 autovacuum이 테이블에서 실행되기 주기적으로 직접 <command>VACUUM</>할 수 있다. 
자세한 내용은 <xref linkend="vacuum-for-wraparound">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
<term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_freeze_min_age</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블 스캔 중 행 버전 동결 여부를 결정할 때 <command>VACUUM</>이 사용해야 하는 컷오프 연령(트랜잭션에서)을 지정한다. 기본값은 5천만 트랜잭션이다. 
사용자는 이 값을 0 ~ 10억 중 아무거나 설정할 수 있지만 <command>VACUUM</>은 유효 값을 <xref linkend="guc-autovacuum-freeze-max-age">의 절반으로 슬며시 제한하므로 강제 autovacuum들 사이에 시간이 불합리하게 짧은 경우는 없다. 
자세한 내용은 <xref
linkend="vacuum-for-wraparound">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-multixact-freeze-table-age" xreflabel="vacuum_multixact_freeze_table_age">
<term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_multixact_freeze_table_age</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</>은 테이블의 <structname>pg_class</>.<structfield>relminmxid</> 필드가 이 설정에서 지정된 연령에 도달한 경우 전체 테이블 스캔을 수행한다. 기본값은 1억 5천만 multixact이다. 
사용자는 이 값을 0 ~ 20억 중 아무거나 설정할 수 있지만 <command>VACUUM</>은 유효 값을 <xref linkend="guc-autovacuum-multixact-freeze-max-age">의 95%로 슬며시 제한하므로 랩어라운드 방지가 테이블에서 실행되기 전에 주기적으로 직접 <command>VACUUM</>할 수 있다. 
자세한 내용은 <xref linkend="vacuum-for-multixact-wraparound">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-multixact-freeze-min-age" xreflabel="vacuum_multixact_freeze_min_age">
<term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_multixact_freeze_min_age</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블 스캔 중 행 multixact ID를 후속 트랜잭션 ID 또는 multixact ID로 교체 여부를 결정할 때 <command>VACUUM</>이 사용해야 하는 컷오프 연령(multixact에서)을 지정한다. 
기본값은 5백만 multixact이다. 사용자는 이 값을 0 ~ 10억 중 아무거나 설정할 수 있지만 <command>VACUUM</>은 유효 값을 <xref linkend="guc-autovacuum-multixact-freeze-max-age">의 절반으로 슬며시 제한하므로 강제 autovacuum들 사이에 시간이 불합리하게 짧은 경우는 없다. 
자세한 내용은 <xref linkend="vacuum-for-multixact-wraparound">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
<term><varname>bytea_output</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>bytea_output</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
타입 <type>bytea</type> 타입의 값에 대한 출력 형식을 설정한다. 유효 값은 <literal>hex</literal>(기본값) 및 <literal>escape</literal>(전형적인 Agens SQL 형식)이다. 
<type>bytea</type> 타입은 이 설정과 무관하게 입력에서 항상 두양쪽 형식을 수용한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
<term><varname>xmlbinary</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>xmlbinary</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
바이너리 값이 XML로 인코딩되는 방법을 설정한다. 
이것은 예를 들면 <type>bytea</type> 값이 <function>xmlelement</function> 또는 <function>xmlforest</function> 함수에 의해 XML로 변환되는 경우에 적용된다. 
가능한 값은, XML 스키마 표준에서 정의된 <literal>base64</literal> 및 <literal>hex</literal>이다. 
기본값은 <literal>base64</literal>이다. 
 </para>

 <para>
여기서 선택한 것을 실제로 선호도의 문제로, 클라이언트 애플리케이션에서 가능한 제약에 의해서만 제한된다. 
양쪽 방법은 hex 인코딩이 base64 인코딩보다 다소 크더라도 가능한 모든 값을 지원한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-xmloption" xreflabel="xmloption">
<term><varname>xmloption</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>xmloption</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm>
 <primary><varname>SET XML OPTION</></primary>
</indexterm>
<indexterm>
 <primary>XML option</primary>
</indexterm>
</term>
<listitem>
 <para>
XML과 문자 string 값 사이의 변환 시 <literal>DOCUMENT</literal> 또는 <literal>CONTENT</literal>가 암시적인지를 설정한다. 
유효 값은 <literal>DOCUMENT</literal> 및 <literal>CONTENT</literal>이다. 기본값은 <literal>CONTENT</literal>이다.
 </para>

 <para>
SQL 표준에 따라 이 옵션을 설정하는 명령은 다음과 같다.
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
이 구문은 Agens SQL에서도 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 <sect2 id="runtime-config-client-format">
 <title>로케일(locale) 및 형식 지정</title>

 <variablelist>

 <varlistentry id="guc-datestyle" xreflabel="DateStyle">
<term><varname>DateStyle</varname> (<type>string</type>)
<indexterm>
 <primary><varname>DateStyle</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
날짜 및 시간 값의 표시 형식과, 애매한 날짜 입력 값을 해석하는 규칙을 설정한다. 
역사적인 이유로, 이 변수는 두 가지 독립적인 요소인 출력 형식 명세(<literal>ISO</> 또는
<literal>Postgres</>, <literal>SQL</>, <literal>German</>)와 연/월/일 순서의 입력/출력 명시(<literal>DMY</> 또는 <literal>MDY</>, <literal>YMD</>)로 환경 설정된다. 
이것은 별개로 설정하거나 함께 설정할 수 있다. 키워드 <literal>Euro</> 및 <literal>European</>은 <literal>DMY</>의 동의어이고, 키워드 <literal>US</>, <literal>NonEuro</> 및 <literal>NonEuropean</>은 <literal>MDY</>의 동의어이다. 
내장된 기본값은 <literal>ISO, MDY</>이지만 <application>initdb</application>는 선택된 <varname>lc_time</varname> 로케일(locale)의 동작에 해당되는 설정으로 환경 설정 파일을 초기화한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-intervalstyle" xreflabel="IntervalStyle">
<term><varname>IntervalStyle</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>IntervalStyle</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
간격 값에 대한 표시 형식을 설정한다. <literal>sql_standard</>는 <acronym>SQL</acronym> 표준 간격 리터럴과 일치하는 출력을 생성한다. 
<literal>postgres</> 값(기본값)은 <xref linkend="guc-datestyle"> 매개변수가 <literal>ISO</>로 설정된 경우 <productname>Agens SQL</> 8.4 이전 릴리스와 일치하는 출력을 생성한다. 
<literal>postgres_verbose</> 값은 <varname>DateStyle</> 매개변수가 비 <literal>ISO</> 출력으로 설정된 경우 <productname>Agens SQL</> 8.4 이전 릴리스와 일치하는 출력을 생성한다. 
<literal>iso_8601</> 값은 ISO 8601의 section 4.4.3.2에 정의된 <quote>format with designators</> 시간 간격과 일치하는 출력을 생성한다.
 </para>
 <para>
<varname>IntervalStyle</> 파라미터매개변수 또한 애매한 간격 입력을 해석하는 데 영향을 준다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-timezone" xreflabel="TimeZone">
<term><varname>TimeZone</varname> (<type>string</type>)
<indexterm>
 <primary><varname>TimeZone</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>time zone</></>
</term>
<listitem>
 <para>
타임스탬프를 표시 및 해석하기 위한 시간대를 설정한다. 
내장 기본값은 <literal>GMT</>이지만, 일반적으로 <filename>postgresql.conf</>에 오버라이드되고 <application>initdb</>는 시스템 환경에 해당되는 곳에 설정을 설치한다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
<term><varname>timezone_abbreviations</varname> (<type>string</type>)
<indexterm>
 <primary><varname>timezone_abbreviations</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>time zone names</></>
</term>
<listitem>
 <para>
서버에서 datetime 입력으로 수용되는 시간대 약어 컬렉션을 설정한다. 
기본값은, 거의 전세계적으로 적용되는 컬렉션인 <literal>'Default'</>이며, 특정 설치용으로 정의할 수 있는 <literal>'Australia'</literal>와 <literal>'India'</literal> 및 기타 컬렉션도 있다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
<term><varname>extra_float_digits</varname> (<type>integer</type>)
<indexterm>
 <primary>significant digits</primary>
</indexterm>
<indexterm>
 <primary>floating-point</primary>
 <secondary>display</secondary>
</indexterm>
<indexterm>
 <primary><varname>extra_float_digits</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개변수는 <type>float4</>, <type>float8</> 및 기하학적(geometric) 데이터 타입을 비롯한 floating-point 값에 대해 표시할 수 있는 자릿수를 조절한다. 
매개변수 값은 표준 자릿수에 추가된다(<literal>FLT_DIG</> 또는 <literal>DBL_DIG</>를 적절하게). 
부분적 유효 숫자를 포함하여 값은 최대 3까지 설정할 수 있다. 이것은 정확한 복원이 필요한 부동 데이터를 덤프할 때 특히 유용하다. 
또는 불필요한 숫자가 나타나지 않도록 음수로 설정할 수도 있다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
<term><varname>client_encoding</varname> (<type>string</type>)
<indexterm>
 <primary><varname>client_encoding</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>character set</></>
</term>
<listitem>
 <para>
클라이언트 측 인코딩(문자 집합)을 설정한다. 기본값은 데이터베이스 인코딩을 사용하는 것이다. 
<productname>Agens SQL</productname> 서버에서 지원하는 문자 집합은 <xref linkend="multibyte-charset-supported">에 나와 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
<term><varname>lc_messages</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_messages</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
메시지가 표시되는 언어를 설정한다. 허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref linkend="locale">을 참조 바란다. 
변수가 비어 있는 string으로 설정된 경우(기본값), 값은 시스템 의존적인 방법으로 서버의 실행 환경으로부터 상속된다.
 </para>

 <para>
일부 시스템에서 이 로케일(locale) 카테고리는 존재하지 않는다. 이 변수의 설정은 계속 유효하지만 아무런 효과는 없다. 
또한 원하는 언어로 번역된 메시지가 존재하지 않을 수도 있다. 이런 경우 영어 메시지를 확인할 수 있다.
 </para>

 <para>
서버 로그 및 클라이언트로 전송되는 메시지에 영향을 줄 수 있고 부적절한 값이 서버 로그의 가독성을 해칠 수 있으므로 수퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
<term><varname>lc_monetary</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_monetary</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
통화 형식 지정에 사용되는 로케일(locale)을 지정한다. 예를 들면, 함수의 <function>to_char</function> 계열을 사용한다. 
허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref
linkend="locale">을 참조 바란다. 
변수가 비어 있는 string으로 설정된 경우(기본값), 값은 시스템 의존적인 방법으로 서버의 실행 환경으로부터 상속된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
<term><varname>lc_numeric</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_numeric</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
숫자 형식 지정에 사용되는 로케일(locale)을 지정한다. 예를 들면, 함수의 <function>to_char</function> 계열을 사용한다. 
허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref
linkend="locale">을 참조 바란다. 
변수가 비어 있는 string으로 설정된 경우(기본값), 값은 시스템 의존적인 방법으로 서버의 실행 환경으로부터 상속된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-time" xreflabel="lc_time">
<term><varname>lc_time</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_time</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
날짜 및 시간 형식 지정에 사용되는 로케일(locale)을 지정한다. 예를 들면, 함수의 <function>to_char</function> 계열을 사용한다. 
허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref
linkend="locale">을 참조 바란다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
<term><varname>default_text_search_config</varname> (<type>string</type>)
<indexterm>
 <primary><varname>default_text_search_config</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
환경 설정을 지정하는 명시적 인수 없이, 텍스트 검색 함수의 변형에서 사용되는 텍스트 검색 환경 설정을 선택한다. 
내장된 기본값은 <literal>pg_catalog.simple</>이지만 로케일(locale) 일치 환경 설정을 식별할 수 있는 경우 <application>initdb</application>는 선택된 <varname>lc_ctype</varname> 로케일(locale)에 해당되는 설정으로 환경 설정 파일을 초기화한다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>

</sect2>

<sect2 id="runtime-config-client-preload">
 <title>공유 라이브러리 사전 로드</title>

 <para>
추가 기능을 로드하거나 성능상 이점을 위해 몇 가지 설정을 서버로의 공유 라이브러리 사전 로드에 사용할 수 있다. 
예를 들면, <literal>'$libdir/mylib'</literal> 설정은 <literal>mylib.so</>(또는 일부 플랫폼에서, <literal>mylib.sl</>)가 설치 표준 라이브러리 디렉토리로부터 사전 로드되게 한다. 설정 간 차이라면 효과가 나타나는 시간과, 변경 시 필요한 권한이다.
 </para>

 <para>
<productname>Agens SQL</productname> 프로시저 언어 라이브러리는 이와 같은 방식으로 사전 로드할 수 있으며, 일반적으로 <literal>'$libdir/plXXX'</literal> 구문이 사용된다. 
여기서 <literal>XXX</literal>는 <literal>pgsql</>, <literal>perl</>, <literal>tcl</> 또는 <literal>python</>이다.
 </para>

 <para>
각 매개변수별로 2개 이상의 라이브러리를 로드하는 경우 이름은 쉼표로 구분해야 한다. 
모든 라이브러리 이름은 큰따옴표를 사용하지 않는 한 소문자로 변환된다.
 </para>

 <para>
특별히 Agens SQL과 함께 사용하려는 공유 라이브러리만 이와 같은 방식으로 로드할 수 있다. 
모든 Agens SQL 지원 라이브러리는 호환성 보장을 검사하는 <quote>magic block</>이 있다. 
이러한 이유로 비 Agens SQL 라이브러리는 이 방식으로 로드할 수 없다. 
이를 위해 <envar>LD_PRELOAD</envar> 같은 운영 체제 기능을 사용할 수는 있다.
 </para>

 <para>
일반적으로 해당 모듈을 로드하는 권장 방법은 특정 모듈에 대한 문서를 참조 바란다.
 </para>

 <variablelist>
 <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
<term><varname>local_preload_libraries</varname> (<type>string</type>)
<indexterm>
 <primary><varname>local_preload_libraries</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm>
 <primary><filename>$libdir/plugins</></primary>
</indexterm>
</term>
<listitem>
 <para>
이 변수는 연결 시작 시 사전 로드되는 공유 라이브러리를 하나 이상 지정한다. 
특정 세션 시작 후에는 이 매개변수를 변경할 수 없다. 지정된 라이브러리를 찾지 못하면 연결 시도가 실패한다.
 </para>

 <para>
이 옵션은 사용자가 설정할 수 있다. 따라서 로드된 라이브러리는 설치의 표준 라이브러리 디렉토리의 <filename>plugins</> 서브 디렉토리에 나타나는 것으로 한정된다. 
(<quote>안전한</> 라이브러리만 설치되게 하는 것은 데이터베이스 관리자의 책임이다.) 
예를 들면, <literal>$libdir/plugins/mylib</literal> 같이 <varname>local_preload_libraries</>의 항목은 이 디렉토리를 명시적으로 지정할 수 있으며, 
또는 라이브러리 이름 <literal>mylib</literal>는 <literal>$libdir/plugins/mylib</literal>와 효과가 동일할 수 있다.
 </para>

 <para>
수퍼유저 이외에 사용자가 이러한 방식으로 사용할 수 있도록 모듈이 특수하게 디자인되어 있지 않는 한 이것은 일반적으로 올바른 설정 방법이 아니다. 
대신 <xref linkend="guc-session-preload-libraries">를 찾아 보기 바란다.
 </para>
</listitem>
 </varlistentry>


 <varlistentry id="guc-session-preload-libraries" xreflabel="session_preload_libraries">
<term><varname>session_preload_libraries</varname> (<type>string</type>)
<indexterm>
 <primary><varname>session_preload_libraries</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 변수는 연결 시작 시 사전 로드되는 공유 라이브러리를 하나 이상 지정한다. 수퍼유저만 이 설정을 변경할 수 있다. 
매개변수 값은 연결 시작 시에만 효과가 있다. 후속 변경은 무효하다. 
지정된 라이브러리를 찾지 못하면 연결 시도가 실패한다.
 </para>

 <para>
이 기능은 명시적 <command>LOAD</> 명령 없이 디버깅 또는 성능 평가 라이브러리가 특정 세션에 로드되도록 한다. 
예를 들면, <command>ALTER ROLE SET</>를 사용하여 이 매개변수를 설정하면 주어진 사용자 이름 하의 모든 세션에 대해 auto_explain의 활성화가 가능하다.
또한 이 매개변수는 서버 재시작 없이 변경 가능하므로(단, 세션을 새로 시작하는 경우에만 효과가 있다), 새 모듈을 모든 세션에 적용해야 하더라도 이렇게 추가하는 것이 쉽다.
 </para>

 <para>
<xref linkend="guc-shared-preload-libraries">와 달리, 세션을 먼저 사용한 경우보다 세션 시작 시 라이브러리를 로딩하는 것이 큰 장점은 없다. 
그래도, 연결 풀링을 사용하는 경우에는 장점이 약간 있기는 하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
<term><varname>shared_preload_libraries</varname> (<type>string</type>)
<indexterm>
 <primary><varname>shared_preload_libraries</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 변수는 서버 시작 시에 사전 로드할 하나 이상의 공유 라이브러리를 쉼표를 사용하여 지정한다. 
이 매개변수는 서버 시작 시에만 설정 가능하다. 지정된 라이브러리를 찾지 못하면 서버 시작이 실패한다.
 </para>

 <para>
일부 라이브러리는 공유 메모리 할당, 경량 잠금 예약 또는 백그라운드 worker 시작 같은 postmaster 시작 시에만 일어날 수 있는 특정한 명령을 수행해야 한다. 
해당 라이브러리는 이 매개변수를 통해 서버 시작 시에만 로드해야 한다. 
자세한 내용은 각 라이브러리의 문서를 참조 바란다.
 </para>

 <para>
다른 라이브러리는 사전 로드할 수도 있다. 공유 라이브러리를 사전 로드해서 라이브러리를 먼저 사용하는 경우 라이브러리 시작 시간은 라이브러리가 처음 사용될 때 바뀐다. 
단, 해당 프로세스가 라이브러리를 사용하지 않더라도 각각의 새로운 서버 프로세스 시작 시간이 약간 늘어날 수 있다. 
따라서 이 매개변수는 대부분의 세션에서 사용되는 라이브러리인 경우에만 권장된다. 
또한 이 매개변수를 변경하면 서버를 재시작해야 하므로 단기간 디버깅 시에는 설정이 바람직하지 않다. 
대신 <xref linkend="guc-session-preload-libraries">를 사용해야 한다.
 </para>

<note>
 <para>
Windows 호스트에서 서버 시작 시 라이브러리를 사전 로드하는 것은 각각의 새 서버 프로세스를 시작하는 데 필요한 시간을 줄이지 않는다. 
각 서버 프로세스는 모든 사전 로드 라이브러리를 리로드한다. 
그러나, postmaster 시작 시에 명령을 수행해야 하는 라이브러리의 경우 <varname>shared_preload_libraries
</varname>는 Windows 호스트에 여전히 유용하다.
 </para>
</note>
</listitem>
 </varlistentry>
</variablelist>
 </sect2>

 <sect2 id="runtime-config-client-other">
 <title>그 외 기본값</title>

 <variablelist>

 <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
<term><varname>dynamic_library_path</varname> (<type>string</type>)
<indexterm>
 <primary><varname>dynamic_library_path</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>dynamic loading</></>
</term>
<listitem>
 <para>
동적 로드 가능한 모듈을 열어야 하고 <command>CREATE FUNCTION</command> 또는 <command>LOAD</command> 명령에서 지정된 파일 이름에 디렉토리 성분이 없는 경우(예: 이름에 슬래시가 없음) 시스템은 필요한 파일에 대한 이 경로를 검색한다.
 </para>

 <para>
 <varname>dynamic_library_path</varname>에 대한 값은 콜론(또는 Windows에서 세미콜론)으로 구분된 절대 디렉토리 경로 목록이어야 한다. 
 목록 요소가 특수 문자 <literal>$libdir</literal>로 시작되는 경우 컴파일된 <productname>Agens SQL</productname> 패키지 라이브러리 디렉토리가 $libdir에 대체된다. 
 이것은 표준 <productname>Agens SQL</productname> 배포에 의해 제공된 모듈이 설치되는 경우에 해당된다. 
 (이 디렉토리의 이름을 찾으려면 <literal>pg_config --pkglibdir</literal>을 사용해야 한다.) 예를 들면:
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
또는 Windows 환경에서:
or, in a Windows environment:
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
 </para>

 <para>
이 매개변수의 기본값은 <literal>'$libdir'</literal>이다. 값이 비어 있는 string으로 설정되면, 자동 경로 검색이 해제된다.
 </para>

 <para>
이 매개변수는 런타임 시 변경될 수 있지만 해당 설정은 클라이언트 연결이 끝날 때까지만 유지되므로 이 방법은 개발 단계에서 따로 준비해야 한다. 
권장 방법은 <filename>postgresql.conf</filename> 환경 설정 파일에서 이 매개변수를 설정하는 것이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
<term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>gin_fuzzy_search_limit</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GIN 인덱스 스캔에 의해 리턴된 설정 크기에 대한 상한. 
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-locks">
<title>잠금(lock) 관리</title>

 <variablelist>

 <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
<term><varname>deadlock_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary>deadlock</primary>
 <secondary>timeout during</secondary>
</indexterm>
<indexterm>
 <primary>timeout</primary>
 <secondary>deadlock</secondary>
</indexterm>
<indexterm>
 <primary><varname>deadlock_timeout</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 데드록 상황인지 검사하기 전에 잠금을 대기하는 밀리초 단위의 시간이다. 
데드록에 대한 검사는 상대적으로 고비용이므로 잠금을 기다릴 때마다 서버가 검사를 실행하지는 않는다. 
실제 운영 중인 애플리케이션에서 데드록이 일반적이지는 않으며, 데드록 검사 전에 잠시 잠금을 기다리는 것이라고 긍정적으로 가정한다. 
이 값을 늘리면 불필요한 데드록 검사를 위해 대기하는 시간이 줄어들지만 실제 데드록 에러 리포팅이 느려진다. 기본값은, 실제로 사용자가 희망하는 최소값일 가능성이 높은 1초이다(<literal>1s</>). 
로드가 과도한 서버에서는 이 값을 올리고 싶을 것이다. 
이상적으로, waiter가 데드록 검사를 결정하기 전에 잠금이 해제되는 이상한 상황을 개선하려면 이 설정은 사용자의 일반적인 트랜잭션 시간을 초과해야 한다. 
수퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <para>
<xref linkend="guc-log-lock-waits">가 설정된 경우 이 매개변수는 잠금 대기에 대한 로그 메시지가 발생되기 전에 기다려야 하는 시간도 결정한다. 
잠금 지연을 조사하려는 사용자라면 일반적인 <varname>deadlock_timeout</varname>보다 짧게 설정할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
<term><varname>max_locks_per_transaction</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_locks_per_transaction</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
공유 잠금 테이블은 <varname>max_locks_per_transaction</varname> * (<xref
linkend="guc-max-connections"> + <xref
linkend="guc-max-prepared-transactions">) 개체(예: 테이블)에 대한 잠금을 추적하므로 이 개체 수 이하를 언제든 잠글 수 있다. 
이 매개변수는 트랜잭션별로 할당된 평균 개체 잠금 수를 제어한다. 개별 트랜잭션은 모든 트랜잭션의 잠금이 잠금 테이블에 적합한 경우에 개체를 추가로 잠글 수 있다. 
이것은 잠글 수 있는 행 수는 <emphasis>아니다</>. 
해당 값은 무제한이다. 기본값으로 64가 충분한 것으로 입증되었지만, 쿼리가 단일 트랜잭션으로 서로 다른 여러 가지 테이블에 액세스하는 경우라면 이 값을 늘려야 할 수도 있다(예: 자식이 다수 있는 부모 테이블에 대한 쿼리).
이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
대기 서버 실행 중에 사용자는 이 매개변수를 마스터 서버 값보다 크거나 같게 설정해야 한다. 그렇지 않으면 대기 서버에서 쿼리가 허용되지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-pred-locks-per-transaction" xreflabel="max_pred_locks_per_transaction">
<term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_pred_locks_per_transaction</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
공유 예측 잠금 테이블은 <varname>max_pred_locks_per_transaction</varname> * (<xref
linkend="guc-max-connections"> + <xref
linkend="guc-max-prepared-transactions">) 개체(예: 테이블)에 대한 잠금을 추적하므로 이 개체 수 이하를 언제든 잠글 수 있다. 
이 매개변수는 트랜잭션별로 할당된 평균 개체 잠금 수를 제어한다. 개별 트랜잭션은 모든 트랜잭션의 잠금이 잠금 테이블에 적합한 경우에 개체를 추가로 잠글 수 있다. 
이것은 잠글 수 있는 행의 수는 <emphasis>아니다</>. 
해당 값은 무제한이다. 기본값으로 64가 테스트 시 충분한 것으로 입증되었지만, 클라이언트가 직렬화 가능한 트랜잭션으로 서로 다른 여러 가지 테이블에 액세스하는 경우라면 이 값을 늘려야 할 수도 있다. 
이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>

</listitem>
 </varlistentry>

 </variablelist>
 </sect1>

 <sect1 id="runtime-config-compatible">
<title>버전 및 플랫폼 호환성</title>

<sect2 id="runtime-config-compatible-version">
 <title>이전 Agens SQL 버전</title>

 <variablelist>

 <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
<term><varname>array_nulls</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>array_nulls</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 따옴표 없는 <literal>NULL</>을 null 배열 요소로 지정하는 것으로 배열 입력 파서에 인식시킬 것인지를 제어한다. 
기본적으로 이것은, null 값이 포함된 배열값의 입력을 허용하는 <literal>on</>이다. 
단, 8.2 이전 버전의 <productname>Agens SQL</>은 배열에서 null 값을 지원하지 않으며, 따라서 string 값 <quote>NULL</>을 사용하는 일반적인 배열 요소를 지정하는 것으로 <literal>NULL</>을 처리한다. 
예전 동작을 필요로 하는 어플리케이션 이전 버전과의 호환성 때문에 이 변수를 <literal>off</>로 설정할 수 있다.
 </para>

 <para>
이 변수가 <literal>off</>인 경우에도 null 값을 포함한 배열 변수를 생성하는 것도 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
<term><varname>backslash_quote</varname> (<type>enum</type>)
<indexterm><primary>strings</><secondary>backslash quotes</></>
<indexterm>
 <primary><varname>backslash_quote</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 string 리터럴에서 따옴표를 <literal>\'</>로 표기할 수 있는지를 제어한다. 따옴표를 SQL 표준 방식으로 표기하는 방법은 이중으로 사용하는 것(<literal>''</>)이지만 <productname>Agens SQL</>은 오래 전부터 <literal>\'</>도 허용해 왔다. 
그러나, <literal>\'</>를 사용하면 일부 클라이언트 문자 집합 인코딩에서 마지막 바이트가 수치상 ASCII <literal>\</>와 동일한 멀티바이트 문자가 있기 때문에 보안상 위험하다. 클라이언트 측 코드가 잘못 이스케이프할 경우 SQL 인젝션 공격이 가능하다. 
이러한 위험은, 역슬래시에 의해 이스케이프되는 따옴표가 있는 경우에 서버가 쿼리를 거부하도록 함으로써 예방할 수 있다. 
<varname>backslash_quote</>의 허용 값은 <literal>on</>(항상 <literal>\'</> 허용), <literal>off</>(항상 거부) 및 <literal>safe_encoding</>(클라이언트 인코딩이 멀티바이트 문자 내에서 ASCII <literal>\</>를 수락하지 않는 경우에만 허용)이다. 
기본 설정은 <literal>safe_encoding</>이다.
 </para>

 <para>
표준 준수 string 리터럴에서, <literal>\</>는 <literal>\</>라는 점에 유의해야 한다. 
이 매개변수는 이스케이프 string 구문(<literal>E'...'</>)을 비롯한 비 표준 준수 리터럴의 처리에만 영향을 준다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-with-oids" xreflabel="default_with_oids">
<term><varname>default_with_oids</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>default_with_oids</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 <literal>WITH OIDS</literal> 또는 <literal>WITHOUT OIDS</literal>가 지정되지 않은 경우 <command>CREATE TABLE</command> 및 <command>CREATE TABLE AS</command>가 새로 생성된 테이블에서 OID 칼럼을 포함할 것인지를 제어한다. 
또한 OID를 <command>SELECT INTO</command>에 의해 생성된 테이블에 포함할 것인지를 결정한다. 이 매개변수는 기본적으로 <literal>off</>이며, <productname>Agens SQL</> 8.0 이전 버전에서는 기본적으로 on이다.
 </para>

 <para>
사용자 테이블에서 OID의 사용은 사용 가치가 없는 것(deprecated)으로 간주되므로 대부분의 설치는 이 변수를 비활성화해야 한다. 
특별한 테이블에 OID가 필요한 애플리케이션은 테이블 생성 시 <literal>WITH OIDS</literal>를 지정해야 한다. 
이 변수는 이 동작을 따르지 않는 예전 애플리케이션과의 호환성을 위해 활성화할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
<term><varname>escape_string_warning</varname> (<type>boolean</type>)
<indexterm><primary>strings</><secondary>escape warning</></>
<indexterm>
 <primary><varname>escape_string_warning</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on인 경우 역슬래시(<literal>\</>)가 일반 string 리터럴(<literal>'...'</> 구문)에 있고 <varname>standard_conforming_strings</varname>가 off인 경우 경고가 나타난다. 
기본값은 <literal>on</>이다.
 </para>
 <para>
SQL 표준에 따라 일반 string의 기본 동작은 역슬래시를 일반 문자로 처리하기 때문에 역슬래시를 이스케이프로 사용하려는 애플리케이션은 이스케이프 string 구문(<literal>E'...'</>)을 수정해야 한다. 
이 변수를 활성화하면 수정이 필요한 코드를 찾는 데 도움이 된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
<term><varname>lo_compat_privileges</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>lo_compat_privileges</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
9.0 이전의 <productname>Agens SQL</> 릴리스에서 거대(large) 개체는 액세스 권한이 없었으며, 항상 모든 사용자에 의해 읽기 및 쓰기가 가능했었다. 
이 변수를 <literal>on</>으로 설정하면 이전 릴리스와의 호환성에 대한 새 권한 검사가 비활성화된다. 
기본값은 <literal>off</>이다. 수퍼유저만 이 설정을 변경할 수 있다.
 </para>
 <para>
이 변수를 설정한다고 해서 거대(large) 개체와 관련된 모든 보안 검사가 비활성화되는 것은 아니다. 기본 동작에 대한 것만 <productname>Agens SQL</> 9.0에서 변경되었다. 
예를 들면, <literal>lo_import()</literal> 및 <literal>lo_export()</literal>는 이 설정과 무관하게 수퍼유저 권한이 필요하다.
 </para>
</listitem>
 </varlistentry>

<varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
<term><varname>quote_all_identifiers</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>quote_all_identifiers</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스가 SQL을 생성하는 경우 (현재) 키워드가 없더라도 모든 식별자에서 따옴표를 사용해야 한다. 
이것은 <command>EXPLAIN</> 출력과 <function>pg_get_viewdef</> 같은 함수의 결과에 영향을 준다. 
pg_dump 및 pg_dumpall의 <option>--quote-all-identifiers</option> 옵션도 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-sql-inheritance" xreflabel="sql_inheritance">
<term><varname>sql_inheritance</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>sql_inheritance</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>inheritance</></>
</term>
<listitem>
 <para>
이 설정은 장식이 없는 테이블 참조가 상속 자식 테이블을 포함하는 것으로 간주할 것인지를 제어한다. 
기본값은, 자식 테이블이 포함됨을 의미하는 <literal>on</>이다(따라서 <literal>*</> 접미사가 기본적으로 추정된다). 
<literal>off</>으로 설정되면 자식 테이블이 포함되지 않는다(따라서 <literal>ONLY</literal> 접두사가 추정된다). 
SQL 표준은 포함할 자식 테이블이 필요하므로, <literal>off</> 설정은 규격에 맞지 않지만 7.1 이전 <productname>Agens SQL</> 릴리스와의 호환성을 위해 제공된다. 
 </para>

 <para>
<varname>sql_inheritance</>를 off로 설정하는 것은 동작이 오류가 발생하기 쉽고 SQL 표준에도 반하기 때문에 의미가 없다(deprecated). 
이 설명서 다른 곳에서 논의된 상속 동작은 보통 <literal>on</>인 것으로 가정한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
<term><varname>standard_conforming_strings</varname> (<type>boolean</type>)
<indexterm><primary>strings</><secondary>standard conforming</></>
<indexterm>
 <primary><varname>standard_conforming_strings</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 대개 string 리터럴(<literal>'...'</>)이 역슬래시를 SQL 표준에 지정된 대로 문자 그대로 처리할 것인지 제어한다. 
<productname>Agens SQL</productname> 9.1 초반에는 기본값이 <literal>on</>이다(이전 릴리스에서는 기본값이 <literal>off</>). 
애플리케이션은 string 리터럴 처리하는 방법을 결정하는 이 매개변수를 검사한다. 
이 매개변수가 존재하면 이스케이프 string 구문(<literal>E'...'</>)이 지원되는 것으로 볼 수 있다. 
애플리케이션이 역슬래시를 이스케이프 문자로 처리하기를 원할 경우에는 이스케이프 string 구문을 사용해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
<term><varname>synchronize_seqscans</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>synchronize_seqscans</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 거대(large) 테이블의 순차 스캔을 허용하여 서로를 동기화하므로 동시 스캔은 동일한 시간에 동일한 블록을 읽고 I/O 작업 부하를 공유한다. 
이것이 활성화되면 스캔이 테이블 중간에서 시작되며, 이미 진행 중인 스캔 활동과 동기화되도록 모든 행을 끝까지 <quote>랩어라운드</>한다. 
이것은 결과적으로 <literal>ORDER BY</> 절이 없는 쿼리에 의해 리턴된 행 정렬에서 예측 불가능한 변경으로 이어진다. 
이 매개변수를 <literal>off</>로 설정하면 순차 스캔이 항상 테이블 초반에 시작되는 8.3 이전의 동작이 보장된다. 
기본값은 <literal>on</>이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-compatible-clients">
 <title>플랫폼 및 클라이언트 호환성</title>
 <variablelist>

 <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
<term><varname>transform_null_equals</varname> (<type>boolean</type>)
<indexterm><primary>IS NULL</></>
<indexterm>
 <primary><varname>transform_null_equals</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정되면 양식의 표현식 <literal><replaceable>expr</> =
NULL</literal>(또는 <literal>NULL =
<replaceable>expr</></literal>)은 <literal><replaceable>expr</> IS NULL</literal>로 처리된다. 
즉, <replaceable>expr</>가 null 값으로 평가되면 true가 리턴되고, 그 외에는 false가 리턴된다. 
<literal><replaceable>expr</> = NULL</literal>의 올바른 SQL 규격 호환 동작은 항상 null을 리턴한다(알 수 없음). 
그러므로 이 매개변수의 기본값은 <literal>off</>이다.
 </para>

 <para>
그러나, <productname>Microsoft
Access</productname>에서 필터링된 양식은 <literal><replaceable>expr</> = NULL</literal>을 사용하여 null 값을 테스트하기 위한 쿼리를 생성하므로 해당 인터페이스를 사용하여 데이터베이스에 액세스하는 경우 사용자는 이 옵션을 on으로 설정하고자 할 수 있다. 
표현식 <literal><replaceable>expr</> = NULL</literal>은 항상 null 값을 리턴하므로(SQL 표준 해석 사용), 그다지 유용하지 않고, 일반적인 애플리케이션에 거의 나타나지 않으므로 실제로 이 옵션은 해가 되지 않는다. 
하지만 새 사용자는 null 값이 관련된 표현식을 헷갈려 하므로 이 옵션은 기본적으로 off로 설정되어 있다.
 </para>

 <para>
이 옵션은 정확한 양식 <literal>= NULL</>에만 영향을 미치며, 다른 비교 연산자 또는 동일한 연산자(예: <literal>IN</literal>)와 관련된 몇몇 표현식과 계산상 동일한 다른 표현식에는 영향을 미치지는 않는다. 
따라서 이 옵션이 나쁜 프로그래밍에 대한 해결책은 아니다.
 </para>

</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-error-handling">
<title>에러 처리</title>

<variablelist>

 <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
<term><varname>exit_on_error</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>exit_on_error</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
true인 경우 어떤 에러가 발생했든 현재 세션이 중단된다. 기본적으로 이것은 false로 설정되고 FATAL 에러 시 세션이 중단된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
<term><varname>restart_after_crash</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>restart_after_crash</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
기본값인 true로 설정되면 백엔드 충돌 후 <productname>Agens SQL</>이 자동으로 재초기화된다. 
이 값을 계속 true로 설정하는 것은 일반적으로 데이터베이스의 가용성을 최대화하는 최고의 방법이다. 
그러나, 클러스터웨어에서 <productname>Agens SQL</>를 호출하는 경우처럼 경우에 따라 재시작을 비활성화해서 클러스터웨어가 제어를 획득하고 적절하다고 생각되는 조치를 취할 수 있게 하는 점이 유용하다.
 </para>
</listitem>
 </varlistentry>

</variablelist>

 </sect1>

 <sect1 id="runtime-config-preset">
<title>프리셋 옵션</title>

<para>
 다음 <quote>매개변수</>는 읽기 전용이며, <productname>Agens SQL</productname>이 컴파일 되거나 설치된 경우에만 결정된다. 
 따라서 <filename>postgresql.conf</> 샘플 파일에서는 제외되었다. 
 이 옵션은 특정 애플리케이션, 특히 관리 프론트 엔드에 도움이 되는 <productname>Agens SQL</productname> 동작의 다양한 측면을 보여준다.
</para>

<variablelist>

 <varlistentry id="guc-block-size" xreflabel="block_size">
<term><varname>block_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>block_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
디스크 블록의 크기를 알려준다. 이것은 서버 빌드 시 <literal>BLCKSZ</> 값에 의해 결정된다. 기본값은 8192바이트이다. 
일부 환경 설정 변수(예: <xref linkend="guc-shared-buffers">)의 의미는 <varname>block_size</varname>의 영향을 받는다. 
자세한 내용은 <xref linkend="runtime-config-resource">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-data-checksums" xreflabel="data_checksums">
<term><varname>data_checksums</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>data_checksums</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터 체크섬이 이 클러스터에 대해 활성화되었는지를 알려준다. 자세한 내용은 데이터 체크섬을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
<term><varname>integer_datetimes</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>integer_datetimes</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>Agens SQL</>이 64비트 integer 날짜 및 시간으로 빌드되었는지를 알려준다. 
<productname>Agens SQL</> 빌드 시 <literal>--disable-integer-datetimes</>로 환경 설정하면 이것을 비활성화할 수 있다. 
기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
<term><varname>lc_collate</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_collate</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
텍스트 데이터의 정렬 로케일(locale)을 알려준다. 
자세한 내용은 <xref linkend="locale">을 참조 바란다. 
이 값은 데이터베이스를 생성할 때 결정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
<term><varname>lc_ctype</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_ctype</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
문자 분류를 결정하는 로케일(locale)을 알려준다. 자세한 내용은 <xref linkend="locale">을 참조 바란다. 
이 값은 데이터베이스를 생성할 때 결정된다. 대개는 <varname>lc_collate</varname>와 동일하지만 특수한 애플리케이션의 경우 다르게 설정될 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
<term><varname>max_function_args</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_function_args</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
함수 인수의 최대 수를 알려준다. 이것은 서버 빌드 시 <literal>FUNC_MAX_ARGS</> 값에 의해 결정된다. 
기본값은 100개 인수이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
<term><varname>max_identifier_length</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_identifier_length</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
최대 식별자 길이를 알려준다. 이것은 서버 빌드 시 <literal>NAMEDATALEN</> 값보다 하나 작게 결정된다. 
<literal>NAMEDATALEN</>의 기본값이 64이므로 <varname>max_identifier_length</varname> 기본값은 63바이트이며, 이것은 멀티바이트 인코딩 시 63자 미만일 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
<term><varname>max_index_keys</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_index_keys</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
인덱스 키의 최대 수를 알려준다. 이것은 서버 빌드 시 <literal>INDEX_MAX_KEYS</> 값에 의해 결정된다. 
기본값은 32개 키이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-segment-size" xreflabel="segment_size">
<term><varname>segment_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>segment_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
파일 세그먼트 내에서 저장할 수 있는 블록(페이지)의 수를 알려준다. 이것은 서버 빌드 시 <literal>RELSEG_SIZE</> 값에 의해 결정된다. 
세그먼트 파일의 최대 크기(바이트 단위)는 <varname>block_size</>를 곱한 <varname>segment_size</>와 같으며, 기본값은 1GB이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
<term><varname>server_encoding</varname> (<type>string</type>)
<indexterm>
 <primary><varname>server_encoding</> 환경 설정 매개변수</primary>
</indexterm>
<indexterm><primary>character set</></>
</term>
<listitem>
 <para>
데이터베이스 인코딩(문자 집합)을 알려준다. 데이터베이스를 생성할 때 결정된다. 
대개, 클라이언트는 <xref linkend="guc-client-encoding"> 값만 사용해서 연결해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-server-version" xreflabel="server_version">
<term><varname>server_version</varname> (<type>string</type>)
<indexterm>
 <primary><varname>server_version</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버의 버전 번호를 알려준다. 이것은 서버 빌드 시 <literal>PG_VERSION</> 값에 의해 결정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
<term><varname>server_version_num</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>server_version_num</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버의 버전 번호를 integer로 알려준다. 이것은 서버 빌드 시 <literal>PG_VERSION_NUM</> 값에 의해 결정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
<term><varname>wal_block_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_block_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL 디스크 블록의 크기를 알려준다. 이것은 서버 빌드 시 <literal>XLOG_BLCKSZ</> 값에 의해 결정된다. 기본값은 8192바이트이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
<term><varname>wal_segment_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_segment_size</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL 세그먼트 파일 내에서 블록(페이지)의 수를 알려준다. 
WAL 세그먼트 파일의 총 크기(바이트 단위)는 <varname>wal_block_size</>를 곱한 <varname>wal_segment_size</>와 같으며, 기본값은 16GB이다. 
자세한 내용은 <xref linkend="wal-configuration">을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

</variablelist>
 </sect1>

 <sect1 id="runtime-config-custom">
<title>커스텀 옵션</title>

<para>
 이 기능은 일반적으로 <productname>Agens SQL</productname>이 알지 못하는 매개변수를 추가 모듈로 추가할 수 있게 한다(예: 프로시저 언어). 
 이렇게 하면 표준 방식으로 확장 모듈을 환경 설정할 수 있다.
</para>

<para>
 커스텀 옵션은 확장명 다음에 점, 다음에 적절한 매개변수 이름의 두 부분으로 환경 설정되며, SQL의 정규화된 이름과 아주 유사하다. 
 예를 들면, <literal>plpgsql.variable_conflict</>와 같다.
</para>

<para>
 커스텀 옵션은 관련 확장 모듈이 로드되지 않은 프로세스에서 설정되어야 하므로, <productname>Agens SQL</>은 두 부분의 매개변수 이름에 대한 설정을 허용한다. 
 해당 변수는 플레이스 홀더로 처리되며 변수를 정의하는 모듈이 로드되기 전까지는 함수를 갖지 않는다. 
 확장 모듈이 로드된 경우 변수 정의가 추가되고, 해당 변수에 따라 플레이스 홀더 값이 변환되고, 확장명으로 시작되는데 인식되지 않는 플레이스 홀더에 대해 경고를 보낸다.
</para>
 </sect1>

 <sect1 id="runtime-config-developer">
<title>개발자 옵션</title>

<para>
 다음 매개변수는 <productname>Agens SQL</productname> 소스 코드에서 사용할 수 있으며 경우에 따라 심각한 데이터베이스 손상을 복구하는 데에도 도움이 된다. 
 실제 운영 중인 데이터베이스에서 이 매개변수를 사용할 이유는 없다. 
 따라서 <filename>postgresql.conf</> 샘플 파일에서는 제외되었다. 
 이러한 매개변수 다수는 어쨌든 제대로 작동하려면 특수한 소스 컴파일 플래그가 필요하다.
</para>

<variablelist>
 <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
<term><varname>allow_system_table_mods</varname> (<type>boolean</type>)
<indexterm>
<primary><varname>allow_system_table_mods</varname> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
시스템 테이블의 구조 수정을 허용한다. 이것은 <command>initdb</command>에서 사용된다. 이 매개변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
<term><varname>debug_assertions</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_assertions</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
다양한 assertion 검사를 사용으로 설정한다. 이것은 디버깅 시 도움이 된다. 
이상한 문제가 발생하거나 충돌이 있는 경우 프로그래밍 실수에 의한 것일 수 있으므로 사용자는 이것을 사용 설정하려고 할 수 있다. 
이 매개변수를 사용하려면 <productname>Agens SQL</productname>을 빌드할 때 매크로 <symbol>USE_ASSERT_CHECKING</symbol>을 정의해야 한다(<command>configure</command> 옵션 <option>--enable-cassert</option>로 가능). 
assertion이 활성화된 상태에서 <productname>Agens SQL</productname>을 빌드하면 <varname>debug_assertions</varname>의 기본값은 <literal>on</>이 된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
<term><varname>ignore_system_indexes</varname> (<type>boolean</type>)
<indexterm>
<primary><varname>ignore_system_indexes</varname> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
시스템 테이블을 읽을 때 시스템 인덱스를 무시한다(그러나, 테이블을 수정하면 인덱스는 계속 수정된다). 
이것은 손상된 시스템 인덱스를 복구할 때 유용하다. 이 매개변수는 세션 시작 후에는 변경할 수 없다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
<term><varname>post_auth_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>post_auth_delay</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
0이 아닌 경우 인증 절차를 수행한 후 새 서버 프로세스가 시작되면 이 초 단위 수만큼의 지연이 발생한다. 
이것은 개발자가 디버거를 사용하여 서버 프로세스에 접속할 수 있는 기회를 제공하기 위한 것이다. 
이 매개변수는 세션 시작 후에는 변경할 수 없다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
<term><varname>pre_auth_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>pre_auth_delay</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
0이 아닌 경우 인증 절차를 수행하기 전 새 서버 프로세스가 시작된 직후 이 초 단위 수만큼의 지연이 발생한다. 
이것은 개발자가 디버거를 사용하여 인증 오류를 추적할 수 있도록 서버 프로세스에 접속할 수 있는 기회를 제공하기 위한 것이다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
<term><varname>trace_notify</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_notify</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>LISTEN</command> 및 <command>NOTIFY</command> 명령에 대한 대량의 디버깅 출력을 생성한다. 
이 출력을 클라이언트 또는 서버 로그에 각각 전송하려면 <xref linkend="guc-client-min-messages"> 또는 <xref linkend="guc-log-min-messages">는 <literal>DEBUG1</literal>이어야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-trace-recovery-messages" xreflabel="trace_recovery_messages">
<term><varname>trace_recovery_messages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>trace_recovery_messages</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
복구 관련 디버깅 출력의 로깅을 활성화한다. 그 외에는 로깅되지 않는다. 
이 매개변수는 사용자가 <xref linkend="guc-log-min-messages">의 일반 설정을 오버라이드할 수 있지만, 특정 메시지에만 해당된다. 
이것은 핫 스탠바이에서 사용된다. 유효 값은 <literal>DEBUG5</> 및 <literal>DEBUG4</>,
<literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>, <literal>LOG</>이다.
기본적으로, <literal>LOG</>는 로깅 결정에 전혀 영향을 주지 않는다. 
다른 값들은 <literal>LOG</> 우선 순위가 있어도 해당 우선 순위보다 높은 복구 관련 디버그 메시지를 발생시킨다. 
<varname>log_min_messages</>의 공통 설정의 경우 이것은 서버 로그로 무조건 메시지를 전송한다. 
이 매개변수는 <filename>postgresql.conf</> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
<term><varname>trace_sort</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_sort</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 리소스 사용량에 대한 정보를 출력한다. 
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>TRACE_SORT</symbol> 매크로가 정의된 경우에만 사용할 수 있다. 
(단, <symbol>TRACE_SORT</symbol>는 현재 기본적으로 정의된다.)
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_locks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_locks</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 잠금 사용에 대한 정보를 출력한다. 덤프된 정보에는 잠금 명령, 
잠금 유형, 잠금 또는 잠금 해제된 개체의 고유 식별자가 포함된다. 
이 개체에 이미 부여된 잠금 유형 및 이 개체를 기다리는 잠금 유형에 대한 비트 마스크도 포함된다. 
각 잠금 유형의 경우 부여된 잠금 및 대기 중인 잠금 수에 대한 카운트 및 총계도 덤프된다. 
로그 파일 출력에 대한 예제는 다음과 같다.
<screen>
LOG:LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
wait(0) type(AccessShareLock)
LOG:GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
wait(0) type(AccessShareLock)
LOG:UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
wait(0) type(AccessShareLock)
LOG:CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
wait(0) type(INVALID)
</screen>
덤프되는 구조에 대한 자세한 내용은 <filename>src/include/storage/lock.h</filename>에서 찾을 수 있다.
 </para>
 <para>
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_lwlocks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_lwlocks</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 가벼운 잠금(lightweight lock) 사용에 대한 정보를 출력한다. 
가벼운 잠금(lightweight lock)은 주로 공유 메모리 데이터 구조에 대한 상호 배제 액세스를 제공하기 위함이다.
 </para>
 <para>
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_userlocks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_userlocks</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 사용자 잠금(user lock) 사용에 대한 정보를 출력한다. 
보조 잠금(advisory locks)인 경우에만 출력이 <symbol>trace_locks</symbol>와 동일하다.
 </para>
 <para>
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_lock_oidmin</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>trace_lock_oidmin</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 이 OID 아래 테이블에 대해 잠금을 추적하지 않는다. (시스템 테이블에 출력을 방지하려고 사용)
 </para>
 <para>
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_lock_table</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>trace_lock_table</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 테이블(OID)에 대한 잠금을 무조건 추적한다.
 </para>
 <para>
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>debug_deadlocks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_deadlocks</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 데드락 타임아웃 발생 시 현재 모든 잠금에 대한 정보를 덤프한다.
 </para>
 <para>
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>log_btree_build_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_btree_build_stats</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 다양한 B-트리 명령에서 시스템 리소스 사용량 통계(메모리 및 CPU)를 로깅한다.
 </para>
 <para>
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>BTREE_BUILD_STATS</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
<term><varname>wal_debug</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>wal_debug</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 WAL 관련 디버깅 출력을 내보낸다. 
이것은 <productname>Agens SQL</productname>이 컴파일된 경우 <symbol>WAL_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

<varlistentry id="guc-ignore-checksum-failure" xreflabel="ignore_checksum_failure">
<term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>ignore_checksum_failure</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
data checksums가 활성화된 경우에만 효과가 있다.
 </para>
 <para>
읽기 중 체크섬 실패를 감지하면 <productname>Agens SQL</>이 에러를 보고하고, 현재 트랜잭션을 중단한다. 
<varname>ignore_checksum_failure</>를 on으로 설정하면 시스템이 실패(그래도 경고는 보고된다)를 무시하고 프로세싱을 계속한다. 
이러한 동작은 <emphasis>충돌 또는 충돌 전파, 숨김, 기타 심각한 문제를 초래한다</>. 
그러나, 블록 헤더가 온전한 경우에는 에러를 무시하고 테이블에 잔존해 있을 수 있는 미손상 튜플을 검색할 수 있다. 
블록 헤더가 손상된 경우 이 옵션이 활성화돼도 에러가 보고된다. 기본값은 <literal>off</>이고 수퍼유저에 의해서만 변경 가능하다.
 </para>
</listitem>
 </varlistentry>

<varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
<term><varname>zero_damaged_pages</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>zero_damaged_pages</> 환경 설정 매개변수</primary>
</indexterm>
</term>
<listitem>
 <para>
손상된 페이지 헤더가 감지되면 <productname>Agens SQL</>이 에러를 보고하고 현재 트랜잭션을 중단한다. 
<varname>zero_damaged_pages</>를 on으로 설정하면 시스템이 대신 경고를 보고하고, 메모리에서 손상된 페이지를 0으로 처리하고, 프로세싱을 계속한다. 
이러한 작업은 손상된 페이지의 모든 행, 즉 <emphasis>데이터를 소멸시킨다</>. 
그러나 이것을 이용하면 사용자는 에러를 무시하고 테이블에 남아 있을 수 있는 미손상 페이지에서 행을 검색할 수 있다. 
이것은 하드웨어 또는 소프트웨어 에러에 의한 손상이 발생된 경우 데이터를 복구할 때 유용하다. 
테이블의 손상된 페이지에서 데이터를 복구하지 않기로 결정하기 전에는 이것을 on으로 설정하면 안 된다. 
0으로 처리된 페이지는 디스크에 강제로 쓰여지지 않으므로 이 매개변수를 off로 다시 설정하기 전에 테이블 또는 인덱스를 재생하는 것이 좋다. 
기본값은 <literal>off</>이고 수퍼유저에 의해서만 변경 가능하다.
 </para>
</listitem>
 </varlistentry>
 </variablelist>
</sect1>
<sect1 id="runtime-config-short">
 <title>단축 옵션</title>

 <para>
편의상 일부 매개변수에서는 1글자 커맨드 라인 옵션 스위치를 사용할 수 있다. <xref linkend="runtime-config-short-table">에 나와 있다. 
이 옵션 중 일부는 그 존재 이유에 나름의 내력이 있으며, 1글자 옵션이라고 해서 많이 사용해도 되는 것은 아니다.
 </para>

<table id="runtime-config-short-table">
 <title>단축 옵션 키</title>
 <tgroup cols="2">
<thead>
 <row>
<entry>단축 옵션</entry>
<entry>동등</entry>
 </row>
</thead>

<tbody>
 <row>
<entry><option>-A <replaceable>x</replaceable></option></entry>
<entry><literal>debug_assertions = <replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-B <replaceable>x</replaceable></option></entry>
<entry><literal>shared_buffers = <replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-d <replaceable>x</replaceable></option></entry>
<entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-e</option></entry>
<entry><literal>datestyle = euro</></entry>
 </row>
 <row>
<entry>
<option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
<option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
<option>-fs</option>, <option>-ft</option>
 </entry>
 <entry>
<literal>enable_bitmapscan = off</>,
<literal>enable_hashjoin = off</>,
<literal>enable_indexscan = off</>,
<literal>enable_mergejoin = off</>,
<literal>enable_nestloop = off</>,
<literal>enable_indexonlyscan = off</>,
<literal>enable_seqscan = off</>,
<literal>enable_tidscan = off</>
 </entry>
 </row>
 <row>
<entry><option>-F</option></entry>
<entry><literal>fsync = off</></entry>
 </row>
 <row>
<entry><option>-h <replaceable>x</replaceable></option></entry>
<entry><literal>listen_addresses = <replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-i</option></entry>
<entry><literal>listen_addresses = '*'</></entry>
 </row>
 <row>
<entry><option>-k <replaceable>x</replaceable></option></entry>
<entry><literal>unix_socket_directories = <replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-l</option></entry>
<entry><literal>ssl = on</></entry>
 </row>
 <row>
<entry><option>-N <replaceable>x</replaceable></option></entry>
<entry><literal>max_connections = <replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-O</option></entry>
<entry><literal>allow_system_table_mods = on</></entry>
 </row>
 <row>
<entry><option>-p <replaceable>x</replaceable></option></entry>
<entry><literal>port = <replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-P</option></entry>
<entry><literal>ignore_system_indexes = on</></entry>
 </row>
 <row>
<entry><option>-s</option></entry>
<entry><literal>log_statement_stats = on</></entry>
 </row>
 <row>
<entry><option>-S <replaceable>x</replaceable></option></entry>
<entry><literal>work_mem = <replaceable>x</replaceable></></entry>
 </row>
 <row>
<entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
<entry><literal>log_parser_stats = on</>,
<literal>log_planner_stats = on</>,
<literal>log_executor_stats = on</></entry>
 </row>
 <row>
<entry><option>-W <replaceable>x</replaceable></option></entry>
<entry><literal>post_auth_delay = <replaceable>x</replaceable></></entry>
 </row>
</tbody>
 </tgroup>
</table>

</sect1>
</chapter>
