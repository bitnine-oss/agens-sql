<!-- doc/src/sgml/wal.sgml -->

<chapter id="wal">
 <title>안정성 및 Write-Ahead 로그</title>

 <para>
  이 장에서는 효율적이고 안정된 운용을 위해 Write-Ahead 로그를 사용하는 방법에 대해 설명한다.
 </para>

 <sect1 id="wal-reliability">
  <title>안정성</title>

  <para>
   안정성은 중요 데이터베이스 시스템에서 중요한 성질이며 <productname>Agens SQL</>은 안정된 실행을 보장하기 위해 할 수 있는 모든 것을 한다. 
   안정된 실행의 한 가지 측면은, 커밋된 트랜잭션에 의해 기록된 모든 데이터를 비휘발성 영역에 저장해서 정전, 운영 체제 실패 및 하드웨어 고장의 영향으로부터 안전하도록 보장하는 것이다
   (비휘발성 영역 자체의 실패는 제외). 컴퓨터의 영구적 저장소(디스크 드라이브 등)에 데이터를 성공적으로 기록하면 일반적인 이러한 요구 조건에 부합된다. 
   사실, 컴퓨터가 치명적으로 손상되었더라도 디스크 드라이브가 망가지지 않아서 
   유사 하드웨어의 다른 컴퓨터로 옮길 수만 있다면, 모든 커밋된 트랜잭션은 온전하게 유지할 수 있다.
  </para>

  <para>
   데이터를 디스크 플래터에 강제로 쓰는 것은 간단한 명령처럼 보이지만 그렇지 않다. 
   디스크 드라이브가 메인 메모리와 CPU보다 훨씬 느려지므로 컴퓨터의 메인 메모리와 디스크 플래터 사이에 몇 개의 캐싱 레이어가 존재한다. 
   첫째, 요청 빈도가 높은 디스크 블록을 캐시하고 디스크 쓰기를 결합하는 운영 체제의 버퍼 캐시가 있다. 
   다행히도, 모든 운영 체제는 버퍼 캐시에서 디스크로 강제로 쓰는 애플리케이션을 제공하며, 
   <productname>Agens SQL</>은 해당 기능을 사용한다. 
   (이것의 조정 방법은 wal_sync_method 매개 변수를 참조 바란다.)
  </para>

  <para>
   다음으로, 디스크 드라이브 컨트롤러에 캐시가 있을 수 있다. 
   이것은 특히 <acronym>RAID</> 컨트롤러 카드에서 공통된 사항이다. 
   이러한 캐시 중 일부는, 쓰기가 도착하는 즉시 드라이브에 전송되는 <firstterm>write-through</>이다. 
   다른 캐시들은, 데이터가 시간차를 두고 드라이브에 전송되는 <firstterm>write-back</>이다. 
   디스크 컨트롤러 캐시의 메모리는 휘발성이라서 정전 시 내용이 삭제될 수 있으므로 해당 캐시는 안정성에 문제가 있을 수 있다. 
   더 뛰어난 컨트롤러 카드는, 정전 시 캐시 전력을 유지하기 위한 배터리가 포함된 카드를 의미하는 <firstterm>battery-backup units</>(<acronym>BBU</>)를 갖고 있다. 
   전원이 복구된 후 데이터가 디스크 드라이브에 쓰기 된다.
  </para>

  <para>
   그리고 마지막으로, 대부분의 디스크 드라이브는 캐시를 갖고 있다. 
   일부는 write-through이고, 또 일부는 write-back이며, write-back 드라이브 캐시에 대한 데이터 손실 우려는 디스크 컨트롤러 캐시와 동일하다. 
   소비자 수준의 IDE 및 SATA 드라이브의 캐시는 특히 정전 시 살아남지 못하는 write-back일 가능성이 있다. 
   다수의 solid-state drives(SSD) 역시 휘발성 write-back 캐시이다.
  </para>

  <para>
   이러한 캐시는 일반적으로 비활성화된다. 
   단, 이렇게 하는 방법은 운영 체계 및 드라이브 유형에 따라 다르다.
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <productname>Linux</>에서 IDE 및 SATA 드라이브는 <command>hdparm -I</command>를 사용하여 쿼리할 수 있다. 
        쓰기 캐싱은 <literal>Write cache</> 다음에 <literal>*</>가 있는 경우에 활성화된다. 
        <command>hdparm -W 0</>은 쓰기 캐싱을 끌 때 사용할 수 있다. SCSI 드라이브는 <ulink url="http://sg.danny.cz/sg/sdparm.html"><application>sdparm</></ulink>을 사용하여 쿼리할 수 있다. 
        쓰기 캐시가 활성화되었는지, <command>sdparm --get=WCE</command>가 그것을 비활성화하는지를 확인하려면 <command>sdparm --clear=WCE</>를 사용해야 한다.
      </para>
    </listitem>

    <listitem>
      <para>
        <productname>FreeBSD</>에서 IDE 드라이브는 <command>atacontrol</command>을 사용하여 쿼리할 수 있고, 쓰기 캐시는 <filename>/boot/loader.conf</>에서 <literal>hw.ata.wc=0</>을 사용하여 끌 수 있다. 
        SCSI 드라이브는 <command>camcontrol identify</command>를 사용하여 쿼리할 수 있고, 사용 가능한 경우 <command>sdparm</command>을 사용하여 쓰기 캐시를 쿼리하고 변경할 수 있다.
      </para>
    </listitem>

    <listitem>
      <para>
        <productname>Solaris</>에서 디스크 쓰기 캐시는 <command>format -e</>로 제어된다. 
        (Solaris <acronym>ZFS</> 파일 시스템은 자체적인 디스크 캐시 쓰기 명령을 실행하므로 디스크 쓰기 캐시가 활성화된 상태에서 안전하다.)
      </para>
    </listitem>

    <listitem>
      <para>
        <productname>Windows</>에서 <varname>wal_sync_method</>가 <literal>open_datasync</>(기본값)인 경우 
        <literal>My Computer\Open\<replaceable>disk drive</>\Properties\Hardware\Properties\Policies\Enable write caching on the disk</>를 선택 해제하면 쓰기 캐싱을 비활성화할 수 있다. 
        또는, <varname>wal_sync_method</varname>를 <literal>fsync</> 또는 <literal>fsync_writethrough</>로 설정해서 쓰기 캐싱을 금지해야 한다.
      </para>
    </listitem>

    <listitem>
      <para>
        <productname>OS X</productname>에서 <varname>wal_sync_method</>를 <literal>fsync_writethrough</>로 설정하면 쓰기 캐싱을 금지할 수 있다.
      </para>
    </listitem>
  </itemizedlist>

  <para>
   최신 SATA 드라이브(후속 <acronym>ATAPI-6</> 이상)는 드라이브 캐시 쓰기 명령(<command>FLUSH CACHE EXT</>)을 제공하며, SCSI 드라이브는 길지만 유사한 지원 명령 <command>SYNCHRONIZE CACHE</>를 제공한다. 
   이러한 명령은 <productname>Agens SQL</>에 직접 액세스할 수 없지만 일부 파일 시스템(예: <acronym>ZFS</>, <acronym>ext4</>)은 이러한 명령을 사용하여 write-back 가능 드라이브의 플래터에 데이터를 쓸 수 있다. 
   배터리 백업 유닛(<acronym>BBU</>) 디스크 컨트롤러가 결합된 경우에는 아쉽게도 해당 파일 시스템은 최적이 아닌 준최적으로 동작한다. 
   해당 설정에서 동기화 명령은 컨트롤러 캐시의 모든 데이터를 디스크에 강제로 쓰기 때문에 BBU의 여러 가지 장점이 상쇄된다. 
   영향이 있을 경우 pg_test_fsync 프로그램을 실행하여 확인해 볼 수 있다. 
   영향이 있을 경우 이것이 옵션이라면 파일 시스템의 쓰기 차단을 해제하거나 디스크 컨트롤러를 다시 환경 설정함으로써 BBU의 성능상의 장점은 다시 활용할 수 있다. 
   쓰기 차단을 해제한 경우 배터리가 작동되는 상태인지 확인해야 한다. 배터리 고장 시 데이터가 손실될 가능성이 있다. 
   다행히 파일 시스템 및 디스크 컨트롤러 설계자는 결국 이러한 준최적 동작을 해결하려고 할 것이다.
  </para>

  <para>
   운영 체제가 쓰기 요청을 저장소 하드웨어로 전송한 경우 비 휘발성 저장소 영역에 데이터가 정말로 도착했는지 확인할 방법이 없다. 
   오히려, 모든 저장소 환경 설정요소가 데이터 및 파일 시스템 메타데이터 모두에 대한 무결성을 보장하는지를 확인하는 것은 관리자의 책임이다. 
   배터리 백업 쓰기 캐시가 없는 디스크 컨트롤러는 피해야 한다. 
   드라이브 수준에서, 셧다운 전에 데이터가 쓰기될 것이라는 보장을 드라이브가 할 수 없으면 write-back 캐시를 비활성화해야 한다. 
   SSD를 사용하는 경우에는 다수가 기본적으로 캐시 쓰기 명령을 이행하지 않는다는 점에 유의해야 한다. 
   I/O 서브 시스템의 동작을 믿을 수 있는지는 <ulink
   url="http://brad.livejournal.com/2116715.html"><filename>diskchecker.pl</filename></ulink>을 사용하여 테스트할 수 있다.
  </para>

  <para>
   데이터 손실의 또 다른 위험은 디스크 플래터 쓰기 명령 자체이다. 
   디스크 플래터는 일반적으로 각각 512바이트인 섹터로 분할된다. 
   모든 물리적 읽기 또는 쓰기 명령은 전체 섹터를 처리한다. 
   쓰기 요청이 드라이브에 도착하면 이것은 512바이트 배수에 대한 것일 수 있으며(<productname>Agens SQL</> 는 보통 한 번에 8192 바이트나 16섹터를 쓰기한다.), 
   쓰기 프로세스는 언제든 정전 때문에 실패할 수 있다. 이것은 512바이트 섹터의 일부는 쓰기가 되었고, 나머지는 쓰기가 되지 않았다는 것을 의미한다. 
   이러한 실패를 방지하기 위해, <productname>Agens SQL</>은 디스크에서 실제 페이지를 수정하기 <emphasis>전</>에 전체 페이지 이미지를 영구적 WAL 저장소에 주기적으로 기록한다. 
   이렇게 함으로써 충돌 복구 도중에 <productname>Agens SQL</>은 부분적으로 쓰기된 페이지를 WAL로부터 복구할 수 있다. 
   부분적 페이지 쓰기를 방지하는 파일 시스템 소프트웨어가 있는 경우(예: ZFS), full_page_writes 매개 변수를 해제하여 이러한 페이지 이미징을 해제할 수 있다. 
   배터리 백업 유닛(BBU) 디스크 컨트롤러는 전체(8kB) 페이지로 데이터를 BBU에 쓰도록 보장하지 않는 한 부분적 페이지 쓰기를 막지 않는다.
  </para>
  <para>
   <productname>Agens SQL</>은 하드웨어 에러 또는 읽기/쓰기 가비지 데이터 같이 시간 경과에 따른 매체 실패 때문에 발생할 수 있는 저장 장치의 몇 가지 데이터 손상도 보호한다.
   <itemizedlist>
    <listitem>
     <para>
      WAL 파일의 개별 레코드는, 레코드 내용이 올바른지를 사용자에게 알려주는 CRC-32(32비트) 검사로 보호된다. 
      CRC 값은 각 WAL 레코드를 쓰는 경우에 설정되고, 충돌 복구, 아카이브 복구 및 복제 중에 검사된다.
     </para>
    </listitem>
    <listitem>
     <para>
      WAL 레코드에 기록된 전체 페이지 이미지가 보호되더라도 데이터 페이지는 기본적으로 현재 체크섬되지 않는다. 
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>pg_clog</filename>, <filename>pg_subtrans</filename>, <filename>pg_multixact</filename>,
      <filename>pg_serial</filename>, <filename>pg_notify</filename>, <filename>pg_stat</filename>, <filename>pg_snapshots</filename> 같은 내부 데이터 구조는 직접적으로 체크섬되지 않거나, 
      전체 페이지 쓰기에 의해 보호되는 페이지가 아니다. 그러나, 이러한 데이터 구조가 지속적인 경우, 
      WAL 레코드는 최근의 변경 사항이 충돌 시에 정확하게 리빌드되도록 하고, 이러한 WAL 레코드는 위에서 언급된 대로 보호된다.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>pg_twophase</filename>에서 개별 상태 파일은 CRC-32로 보호된다.
     </para>
    </listitem>
    <listitem>
     <para>
      거대(large) SQL 쿼리에서 정렬, 구체화 및 중간 결과를 위해 사용되는 임시 데이터 파일은 현재 체크섬되지 않으며, 이러한 파일의 변경 내용에 대해 WAL 레코드가 기록되지 않는다.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   <productname>Agens SQL</>은 수정 가능한 메모리 에러를 보호하지 않으며, 산업 표준 Error Correcting Codes(ECC) 또는 더 나은 보호를 사용하는 RAM을 사용자가 활용할 것이라고 가정한다.
  </para>
 </sect1>

  <sect1 id="wal-intro">
   <title>Write-Ahead 로깅(<acronym>WAL</acronym>)</title>

   <indexterm zone="wal">
    <primary>WAL</primary>
   </indexterm>

   <indexterm>
    <primary>트랜잭션 로그</primary>
    <see>WAL</see>
   </indexterm>

   <para>
    <firstterm>Write-Ahead 로깅</firstterm> (<acronym>WAL</acronym>)은 데이터 무결성을 보장하는 표준 방법이다. 
    자세한 설명은 트랜잭션 프로세싱에 대한 대부분의 책자에 나와 있다(전부는 아니지만). 
    짧게 말해서, <acronym>WAL</acronym>의 중심 개념은 변경을 로깅한 후에만, 즉 변경 내용을 설명하는 로그 레코드를 영구적 저장소에 먼저 기록한 후에 데이터 파일(테이블과 인덱스가 있는)의 변경 내용을 작성해야 한다는 것이다. 
    이 절차를 준수한 경우 충돌 발생 시 로그를 사용하여 데이터베이스를 복수할 수 있으므로 트랜잭션 커밋마다 데이터 페이지를 디스크에 쓸 필요가 없다. 
    데이터 페이지에 적용되지 않은 변경 내용은 로그 레코드에서 실행 취소가 가능하다. (이것은 롤포워드roll-forward 복구이며, REDO라고도 한다.)
   </para>

   <tip>
    <para>
     <acronym>WAL</acronym>은 충돌 후 데이터베이스 파일 내용을 복구하므로 데이터 파일 또는 WAL 파일의 안정적인 저장소의 경우 저널링된 파일 시스템은 불필요하다. 
     사실, 저널링 오버헤드는 특히 저널링이 파일 시스템 <emphasis>데이터</emphasis>를 디스크에 쓰게 하는 경우, 성능에 역효과가 난다. 
     다행히도 저널링 중 데이터 쓰기는 파일 시스템 마운트 옵션(예: Linux ext3 파일 시스템의 경우 <literal>data=writeback</>)을 사용하여 빈번하게 비활성화된다. 
    </para>
   </tip>


   <para>
    트랜잭션에 의해 변경된 모든 데이터 파일보다는 트랜잭션이 커밋된 것을 보장하기 위해 로그 파일만 디스크에 써야 하기 때문에 <acronym>WAL</acronym>을 사용하면 디스크 쓰기 수가 상당히 줄어든다. 
    로그 파일은 순차적으로 작성되며, 따라서 로그 파일 동기화 비용은 데이터 페이지 쓰기 비용보다 훨씬 적다. 
    이것은 특히 서버가 데이터 스토어의 서로 다른 부분을 건드리는 소규모 트랜잭션을 다수 처리하는 경우에 그렇다. 
    또한, 서버가 소규모 동시 트랜잭션을 다수 처리하는 경우에 로그 파일의 <function>fsync</function> 하나로 여러 가지 트랜잭션을 충분히 커밋할 수 있다.
   </para>

   <para>
    <acronym>WAL</acronym>은 또한 <xref
    linkend="continuous-archiving">에 설명된 대로  온라인 백업 및 PIT(point-in-time) 복구를 지원을 가능하게 한다. 
    WAL 데이터를 아카이빙함으로써, 가용한 WAL 데이터가 즉각 커버하는 시점으로 복귀를 지원할 수 있다. 
    간단히 데이터베이스의 실제 백업을 설치하고 원하는 시간만큼 WAL 로그를 리플레이하면 된다. 
    무엇보다, 실제 백업은 데이터베이스 상태의 즉각적인 스냅샷일 필요는 없다. 
    이것이 일정 기간에 걸쳐 이루어진 경우 해당 기간에 대한 WAL 로그를 리플레이하면 내부 불일치가 해결된다.
   </para>
  </sect1>

 <sect1 id="wal-async-commit">
  <title>비동기 커밋</title>

   <indexterm>
    <primary>비동기 커밋</primary>
   </indexterm>

   <indexterm>
    <primary>비동기 커밋</primary>
   </indexterm>

  <para>
   <firstterm>비동기 커밋</>은 데이터베이스가 충돌한 경우 가장 최근 트랜잭션이 분실될 수도 있는 대신, 트랜잭션을 좀 더 빨리 완료할 수 있는 옵션이다. 
   다수의 애플리케이션에서 이것은 수용 가능한 트레이드오프이다.
  </para>

  <para>
   앞 절에서 설명한 대로 트랜잭션 커밋은 일반적으로 <firstterm>동기식</>이며, 서버는 클라이언트로 성공 표시를 리턴하기 전에 트랜잭션의 <acronym>WAL</acronym> 레코드가 영구적 저장소에 쓰기될 때까지 기다린다. 
   따라서 클라이언트는 커밋 직후에 서버 충돌이 일어났더라도 커밋하려는 트랜잭션이 보존되었음을 확신할 수 있다. 
   그러나 짧은 트랜잭션의 경우 이러한 지연은 총 트랜잭션 시간의 주요 부분을 환경 설정한다. 
   비동기 커밋 모드를 선택하는 것은 <acronym>WAL</acronym> 레코드가 실제로 디스크에 기록되기 전에 트랜잭션이 논리적으로 완료되는 즉시 서버는 성공을 리턴한다는 것을 의미한다. 
   이것은 소규모 트랜잭션의 경우 처리량을 확 늘릴 수 있다.
  </para>

  <para>
   비동기 커밋은 데이터 손실의 위험이 있다. 
   트랜잭션이 완료됨을 클라이언트에 알리는 리포트와 트랜잭션이 실제로 커밋된 때 사이에는 짧은 시간차가 있다(즉, 서버 충돌 시 무손실 보장). 
   따라서 클라이언트가 트랜잭션을 기억할 것이라는 전제 하에서 외부 액션을 취하는 경우에는 비동기 커밋을 사용해서는 안 된다. 
   예를 들면, 은행은 ATM의 현금 인출 트랜잭션 레코딩에 대한 비동기 커밋을 절대로 사용하지 않을 것이다. 
   그러나, 이벤트 로깅 같은 다수의 시나리오에서 이러한 유형을 강력하게 보장할 필요는 없다.
  </para>

  <para>
   비동기 커밋을 사용함으로써 유발되는 위험은 데이터 손상이 아니라 데이터 손실이다. 
   데이터베이스가 충돌한 경우 쓰기 되었던 최신 레코드로 <acronym>WAL</acronym>를 리플레이함으로써 복구가 된다. 
   따라서 데이터베이스는 자기 모순이 없는 상태로 복원되지만 미처 디스크에 쓰기 되지 않는 트랜잭션은 해당 상태가 반영되지 못한다. 
   그러므로 순수 효과는 마지막 몇 개 트랜잭션의 손실이다. 트랜잭션은 커밋 명령에서 리플레이되기 때문에 불일치가 있을 수는 없다. 
   예를 들면, 트랜잭션 B가 이전 트랜잭션 A의 결과에 따라 변경을 하는 경우 B의 효과는 유지하면서 A의 효과는 소실되게 하는 것은 불가능하다.
  </para>

  <para>
   사용자는 트랜잭션별로 커밋 모드를 선택할 수 있으므로 동시에 실행되는 동기 및 비동기 커밋 트랜잭션을 모두 갖는 것이 가능하다. 
   이것은 성능과 트랜잭션 영속성의 확실성 사이에 유연한 트레이드 오프가 가능하다. 
   커밋 모드는 사용자가 설정한 매개 변수 synchronous_commit로 제어되며, 환경 설정 매개 변수를 설정하는 방법대로 변경이 가능하다. 
   임의의 트랜잭션 하나에 대해 사용되는 모드는 트랜잭션 커밋이 시작된 경우 <varname>synchronous_commit</varname>의 값에 따라 달라진다.
  </para>

  <para>
   예를 들면, <command>DROP TABLE</>같은 특정 유틸리티 명령은 <varname>synchronous_commit</varname> 설정과 무관하게 강제로 동기식 커밋을 한다. 
   이것은 서버의 파일 시스템과 데이터베이스의 논리적 상태 간에 일관성을 유지하기 위한 것이다. 
   <command>PREPARE
   TRANSACTION</>같이 2단계 커밋을 지원하는 명령도 항상 동기식이다.
  </para>

  <para>
   비동기 커밋 시점과 트랜잭션의 <acronym>WAL</acronym> 레코드 쓰기 시점 사이의 위험 시간대에 데이터베이스가 충돌할 경우 해당 트랜잭션 중에 만들어진 변경 사항은 <emphasis>손실될</> 것이다. 
   백그라운드 프로세스(<quote>WAL
   writer</>)는 wal_writer_delay 밀리초 단위로 쓰기 되지 않은 <acronym>WAL</acronym> 레코드를 디스크에 기록하기 때문에 위험 시간대의 지연 시간은 제한된다. 
   WAL writer는 바쁜 기간 중에 전체 페이지를 한 번에 작성하도록 되어 있으므로 위험 시간대의 실제 최대 지연 시간은 <varname>wal_writer_delay</varname>의 세 배이다.
  </para>

  <caution>
   <para>
    즉시 방식(immediate-mode) 셧다운은 서버 충돌과 동일하며, 따라서 미기록된 비동기 커밋의 손실이 야기된다.
   </para>
  </caution>

  <para>
   비동기 커밋은 fsync = off 설정과는 다르게 동작한다. 
   fsync는 모든 트랜잭션의 동작이 바뀌는 서버 차원(server-wide)의 설정이다. 
   이것은 데이터베이스의 서로 다른 부분에 쓰기를 동기화하는 <productname>Agens SQL</> 내의 모든 로직을 비활성화하므로 시스템 충돌(즉, <productname>Agens SQL</> 자체의 실패가 아니라 하드웨어 또는 운영 체제 충돌) 시 데이터베이스 상태가 제멋대로 망가지게 된다. 
   여러 가지 시나리오에서 비동기 커밋은 데이터 손상 위험 없이 <varname>fsync</varname>를 해제하여 성능을 최고로 개선해 준다. 
  </para>

  <para>
   commit_delay 역시 비동기 커밋과 매우 유사하지만 이것은 실제로 동기 커밋 방식이다(사실, <varname>commit_delay</varname>는 비동기 커밋 중에 무시된다). 
   <varname>commit_delay</varname>는 해당 트랜잭션에 의해 실행된 쓰기가 다른 트랜잭션 커밋도 동시에 수행할 수 있도록 트랜잭션이 <acronym>WAL</acronym>을 디스크에 쓰기 직전에 지연을 야기한다. 
   이 설정으로 여러 트랜잭션에 쓰기 비용을 분할하기 위해 트랜잭션이 쓰기(flush) 하려는 그룹에 조인하는 시간을 늘릴 수 있다.
  </para>

 </sect1>

 <sect1 id="wal-configuration">
  <title><acronym>WAL</acronym> 환경 설정</title>

  <para>
   데이터베이스 성능에 영향을 미치는 <acronym>WAL</> 관련 환경 설정 매개 변수가 몇 가지 있다. 
   이 절에서는 그것의 사용에 대해 설명한다. 서버 환경 설정 매개 변수의 설정에 대한 내용은 <xref linkend="runtime-config">을 참조 바란다.
  </para>

  <para>
   <firstterm>Checkpoints</firstterm><indexterm><primary>checkpoint</></>는 힙 및 인덱스 데이터 파일이 해당 checkpoint 전에 기록된 모든 정보로 업데이트되도록 보장하는 트랜잭션 시퀀스의 지점이다. 
   checkpoint 시에, 모든 dirty 데이터 페이지는 디스크에 쓰기되고, 특수한 checkpoint 레코드는 로그 파일에 기록된다. (변경 레코드는 이전에 <acronym>WAL</acronym> 파일에 기록되었다.) 
   충돌 발생 시, 충돌 복구 프로시저는 REDO 명령을 시작해야 하는 로그의 지점을 판단하기 위해 최신 checkpoint 레코드를 찾아본다. 해당 지점 이전의 데이터 파일을 변경해도 디스크에는 남아 있다. 
   따라서, checkpoint 이후에 redo 레코드가 포함되기 이전의 로그 세그먼트는 더 이상 불필요하며, 재활용되거나 제거할 수 있다. 
   (<acronym>WAL</acronym> 아카이빙이 완료되면 로그 세그먼트는 재활용 또는 제거되기 전에 아카이브되어야 한다.)
  </para>

  <para>
   모든 dirty 데이터 페이지를 디스크에 쓰는 checkpoint 요구조건은 상당한 I/O 로드를 야기할 수 있다. 
   그러므로 checkpoint 시작 시 I/O가 시작되고, 다음 checkpoint가 시작되기 전에 완료되도록 checkpoint 활동이 조절된다. 
   이렇게 함으로써 checkpoint 시점에 성능 저하가 최소화된다.
  </para>

  <para>
   서버의 checkpointer 프로세스는 매우 빈번하게 모든 checkpoint를 자동으로 수행한다. 
   checkpoint는 모든 checkpoint_segments 로그 세그먼트 또는 모든 checkpoint_timeout 초마다 먼저 해당되는 것부터 시작된다. 
   기본 설정은 각각 3개의 세그먼트들 및 300초(5분)이다. 이전 checkpoint 이후로 기록된 WAL이 없으면 <varname>checkpoint_timeout</>을 초과했더라도 새 checkpoint를 건너뛴다. 
   (WAL 아카이빙을 사용 중이고, 데이터 손실 가능성에 대한 제한을 두려고 파일 아카이빙 간격에 대한 하한을 설정하고 싶으면 checkpoint 매개 변수가 아니라 archive_timeout 매개 변수를 조절해야 한다.) 
   SQL 명령 <command>CHECKPOINT</command>를 사용하여 checkpoint를 강제 적용하는 것도 가능하다.
  </para>

  <para>
   <varname>checkpoint_segments</varname> 및/또는 <varname>checkpoint_timeout</varname>을 줄이면 checkpoint가 좀 더 빈번하게 발생한다. 
   이렇게 하면 redo에 필요한 작업이 줄어들므로 충돌 후 복구가 빨라진다. 
   그러나 dirty 데이터 페이지를 빈번하게 기록함으로써 늘어나는 비용 간에 균형을 맞출 필요가 있다. 
   full_page_writes가 설정된 경우(기본값), 다른 요소를 고려해야 한다. 
   데이터 페이지의 일관성을 유지하려면 각 checkpoint 후 데이터 페이지의 첫 번째 수정은 결과적으로 전체 페이지 내용을 로깅하는 것으로 이어진다. 
   이런 경우 checkpoint 간격이 짧을수록 WAL 로그로의 출력 볼륨이 증가하여 짧은 간격으로 사용하는 목적이 부분적으로 무력화되고, 경우에 따라서는 디스크 I/O가 늘어나기도 한다.
  </para>

  <para>
   checkpoint는, 첫째로 모든 현재의 dirty 버퍼를 기록해야 하고, 둘째로 위에서 설명한 대로 추후 WAL 트래픽이 추가 발생하기 때문에 매우 비싸다. 
   따라서, checkpoint가 너무 빈번하지 않도록 checkpointing 매개 변수를 최대한 크게 설정하는 것이 좋다. 
   checkpointing 매개 변수의 간단한 정상 여부 검사로서 checkpoint_warning 매개 변수를 설정할 수 있다. 
   checkpoint가 <varname>checkpoint_warning</> 초에서 설정된 것보다 간격이 짧은 경우 <varname>checkpoint_segments</varname>를 늘리라는 서버 로그 권고문이 메시지로 출력된다. 
   해당 메시지가 가끔씩 출현하면 경고가 발생하지 않지만 빈번하게 나타날 경우 checkpoint 제어 매개 변수를 증가해야 한다. 
   <varname>checkpoint_segments</>를 충분히 크게 설정한 경우 거대(large) <command>COPY</> 전송 같은 대량 작업으로 해당 경고가 다수 나타날 수 있다.
  </para>

  <para>
   폭발적인 페이지 쓰기량으로 인한 I/O 시스템 폭주를 막기 위해 checkpoint 중 dirty 버퍼 쓰기는 일정 기간에 걸쳐 분산된다. 
   해당 기간은 checkpoint_completion_target에 의해 제어되며, 이것은 checkpoint 간격의 분획으로 지정된다. 
   지정된 <varname>checkpoint_segments</varname> WAL 세그먼트 분획이 checkpoint 시작 후에 소모되었거나, 지정된 <varname>checkpoint_timeout</varname> 초 분획을 경과한 경우, 둘 중에 빠른 것에 의해 checkpoint가 완료되도록 I/O 속도가 조정된다. 
   기본값이 0.5인 <productname>Agens SQL</>은 다음 checkpoint가 시작되기 전 시간의 약 절반이 지난 후 각 checkpoint를 완료하는 것으로 예상한다. 
   정상 실행 중에 최대 I/O 처리량에 매우 근접한 시스템에서는 I/O 로드를 checkpoint로부터 줄이고자 <varname>checkpoint_completion_target</varname>를 늘리려고 할 수 있다. 
   이것의 단점은, 복구 시에 사용할 수 있도록 WAL 세그먼트를 더 많이 확보해야 하기 때문에 연장된 checkpoint가 복구 시간에 영향을 준다는 것이다. 
   <varname>checkpoint_completion_target</varname>을 1.0로 설정할 수는 있지만 checkpoint는 dirty 버퍼 쓰기 외에 다른 활동도 일부 포함하므로 그것보다는 낮게 유지하는 것이 좋다(최대 0.9). 
   1.0로 설정하면 checkpoint가 제시간에 완료되지 않을 가능성이 높으므로, 필요한 WAL 세그먼트 수의 예상치 못한 변동으로 성능 손실이 야기될 수 있다.
  </para>

  <para>
   항상 하나 이상의 WAL 세그먼트 파일이 있으며, 일반적으로(2 + <varname>checkpoint_completion_target</varname>) * <varname>checkpoint_segments</varname> + 1 또는 <varname>checkpoint_segments</> + wal_keep_segments + 1개의 파일 이하이다. 
   각 세그먼트 파일은 일반적으로 16 MB이다(이 크기는 서버 빌드 시에 변경 가능). 이것을 사용하여 <acronym>WAL</acronym>에 필요한 공간을 측정할 수 있다. 
   보통은 이전 로그 세그먼트 파일이 더 이상 필요 없을 때 재활용된다(즉, 번호 순서에 따라 추후 세그먼트가 될 이름으로 변경). 
   로그 출력 속도가 단기간 최고치에 도달해, 3 * <varname>checkpoint_segments</varname> + 1 개의 세그먼트 파일보다 많아질 경우 시스템이 이 제한으로 내려올 때까지는 불필요한 세그먼트 파일이 재활용되지 않고 삭제된다.
  </para>

  <para>
   아카이브 복구 또는 스탠바이 모드에서 서버는 주기적으로 <firstterm>restartpoints</>,<indexterm><primary>restartpoint</></>를 수행하는데, 이것은 정상 실행된 checkpoints와 유사하다. 
   서버는 모든 상태를 디스크에 강제로 기록하고, <filename>pg_control</> 파일을 업데이트하여 이미 처리된 WAL 데이터를 다시 스캔할 필요가 없음을 표시하여 <filename>pg_xlog</> 디렉토리에 있는 예전 로그 세그먼트 파일을 재활용할 수 있게 한다. 
   restartpoints는 checkpoint 레코드에서만 수행될 수 있으므로 restartpoints는 마스터에서의 수행 빈도가 checkpoints보다 적다. 
   마지막 restartpoint 이후에 최소한 <varname>checkpoint_timeout</> 초를 경과한 경우 checkpoint 레코드에 도달하면 restartpoint가 트리거된다. 
   스탠바이 모드에서, 최소한 <varname>checkpoint_segments</> 로그 세그먼트가 마지막 restartpoint 이후에 리플레이된 경우에도 restartpoint가 트리거된다.
  </para>

  <para>
   일반적으로 사용되는 내부 <acronym>WAL</acronym> 함수는 <function>XLogInsert</function> 및 <function>XLogFlush</function>의 두 가지가 있다. 
   <function>XLogInsert</function>는 공유 메모리에서 새 레코드를 <acronym>WAL</acronym> 버퍼에 배치할 때 사용된다. 
   새 레코드를 위한 공간이 없는 경우, <function>XLogInsert</function>는 몇 개의 채워진 <acronym>WAL</acronym> 버퍼를 기록해야 한다(커널 캐시로 이동). 
   영향을 받는 데이터 페이지에 배타적 잠금이 걸려 있어서 명령이 가능한 빨라야 하는 경우, <function>XLogInsert</function>가 모든 데이터베이스 저수준 변경(예를 들면, 행 삽입)에 사용되므로 이는 바람직하지 않다. 
   더 안 좋은 것은, <acronym>WAL</acronym> 버퍼 쓰기 작업 때문에 새로운 로그 세그먼트가 생성되어 시간이 더 늘어날 수도 있다는 것이다. 
   일반적으로, <acronym>WAL</acronym> 버퍼는 <function>XLogFlush</function> 요청에 의해 쓰기 되어야 하지만, 대부분의 경우 트랜잭션 레코드가 영구적인 저장소에 기록되도록 트랜잭션 커밋 시에 발생한다. 
   로그 출력이 많은 시스템에서 <function>XLogFlush</function> 요청은 <function>XLogInsert</function>가 쓰기를 금지할 만큼 빈번하지 않다. 
   해당 시스템에서는 wal_buffers 매개 변수를 변경하여 <acronym>WAL</acronym> 버퍼 수를 늘려야 한다. 
   full_page_writes가 설정된 경우 및 시스템이 매우 바쁜 경우, <varname>wal_buffers</>를 큰 값으로 설정하면 각 checkpoint 바로 다음 기간 중에 순조로운 반응 시간을 유도할 수 있다.
  </para>

  <para>
   commit_delay 매개 변수는 그룹 커밋 리더 프로세스가 XLogFlush<function>XLogFlush</function> 내에서 잠금을 획득한 후에 슬립하는 마이크로초 시간을 정의하며, 그룹 커밋 팔로워는 리더 뒤에서 대기한다. 
   이러한 지연은 다른 서버 프로세스가 자신의 커밋 레코드를 WAL 버퍼에 추가하는 것을 허용하므로 이들 모두는 리더의 최종 동기화 명령에 의해 쓰기 된다. 
   fsync가 활성화되지 않으면 슬립이 발생하지 않으며, commit_siblings보다 적을 경우 다른 세션이 현재 활성 트랜잭션이 된다. 
   이렇게 하면 다른 세션이 곧 커밋하지 않을 경우에 슬립을 방지할 수 있다. 
   일부 플랫폼에서 슬립 요청 시간은 10밀리초이므로 1에서 10000마이크로초 사이의 숫자에서 0이 아닌 값으로 <varname>commit_delay</varname>를 설정하면 동일한 효과를 갖는다. 
   일부 플랫폼에서 슬립 명령은 매개 변수에 의해 요청된 것보다 약간 길 수 있다.
  </para>

  <para>
   <varname>commit_delay</varname>의 목적은 각 쓰기 명령의 비용이 동시 커밋된 트랜잭션 간에 분할되도록 하는 것이므로(트랜잭션 대기 시간 비용) 설정 전에 비용을 적절하게 선택할 수 있도록 정량화할 필요가 있다. 
   비용이 클수록 트랜잭션 처리량을 증가시키는 데 <varname>commit_delay</varname>의 효율이 어느 정도까지 커진다. 
   pg_test_fsync 프로그램을 사용하면 단일 WAL 쓰기 명령을 수행할 때의 평균 시간을 마이크로초 단위로 측정할 수 있다. 
   단일 8kB 쓰기 명령 후에 쓰기에 소요되는 것으로 프로그램이 리포트한 평균 시간의 절반 값은 <varname>commit_delay</varname>에 가장 효율적인 설정이므로 이 값은 특정 작업 부하를 최적화할 때 사용되는 시작점으로 권장된다. 
   <varname>commit_delay</varname> 튜닝은 WAL 로그가 고비용의 대기 회전 디스크(high-latency rotating disk)에 저장된 경우에 특히 유용하며, solid-state drive 또는 배터리 백업 쓰기 캐시가 있는 RAID 배열 같이 동기화 시간이 매우 빠른 저장 매체에서도 장점을 발휘한다. 
   단, 이것은 대표적인 작업 부하에 대해 테스트해야 한다. 
   그런 경우 <varname>commit_siblings</varname>에 더 큰 값을 설정해야 하는데, <varname>commit_siblings</varname> 값을 작게 하면 대기 시간이 긴 매체에서 종종 유용하다. 
   <varname>commit_delay</varname> 설정이 너무 크면 총 트랜잭션 처리에 걸리는 시간만큼 트랜잭션 대기 시간이 늘어날 수 있다.
  </para>

  <para>
   <varname>commit_delay</varname>가 0으로 설정된 경우(기본값), 발생하는 그룹 커밋 형태로 여전히 가능하지만 각 그룹은 이전 쓰기 명령(있을 경우)이 발생한 시간에 커밋 레코드를 기록해야 하는 지점에 도달하는 세션만으로 환경 설정된다. 
   높은 클라이언트 카운트에서 <quote>통로 효과(gangway effect)</>가 발생하는 추세이면 <varname>commit_delay</varname>가 0일 때 그룹 커밋의 효과는 상당히 크며, 따라서 <varname>commit_delay</varname>의 명시적 설정은 무용지물이 될 가능성이 높다. 
   <varname>commit_delay</varname> 설정은, (1) 일부 동시 커밋 트랜잭션이 있는 경우 및 (2) 처리량이 커밋 속도에 의해 일정 수준으로 제한되는 경우에만 도움이 된다. 
   그러나 높은 회전 대기 시간을 사용하는 경우 두 개의 클라이언트만큼의 트랜잭션 처리량 증가 시 이 설정이 효율적일 수 있다(즉, 형제 트랜잭션이 1개 있는 단일 커밋 클라이언트).
  </para>

  <para>
   wal_sync_method 매개 변수는 <productname>Agens SQL</productname>이 디스크로의 <acronym>WAL</acronym> 업데이트를 커널에 요청하는 빈도를 결정한다. 
   다른 옵션은 그렇지 않지만, 디스크 캐시에 강제로 쓰기할 수 있는 <literal>fsync_writethrough</>를 제외하고는 안정성 측면에서 모든 옵션은 동일해야 한다. 
   그러나 어떤 것이 가장 빠른지는 플랫폼에 따라 다르다. pg_test_fsync 프로그램을 사용하면 서로 다른 옵션의 속도를 테스트해 볼 수 있다. 
   <varname>fsync</varname>가 해제된 경우에는 이 매개 변수가 무효화된다.
  </para>

  <para>
   wal_debug 환경 설정 매개 변수(<productname>Agens SQL</productname>이 지원을 사용하여 컴파일된 경우)를 활성화하면, 
   결과적으로 각 <function>XLogInsert</function> 및 <function>XLogFlush</function> <acronym>WAL</acronym> 호출이 서버 로그에 로깅된다. 
   이 옵션은 나중에 좀 더 일반적인 메커니즘으로 교체될 수 있다.
  </para>
 </sect1>

 <sect1 id="wal-internals">
  <title>WAL 인터널</title>

  <para>
   <acronym>WAL</acronym>은 자동으로 활성화된다. 
   <acronym>WAL</acronym> 로그에 대한 디스크 공간 요구사항을 맞춰야 할 때 및 필수 튜닝이 완료되었을 때 외에는 관리자의 개입이 불필요하다(<xref
   linkend="wal-configuration"> 참조).
  </para>

  <para>
   <acronym>WAL</acronym> 로그는 각각의 크기가 보통 16 MB인 세그먼트 파일 집합으로, 데이터 디렉토리 하위인 <filename>pg_xlog</filename> 디렉토리에 저장된다(서버 빌드 시 <option>--with-wal-segsize</> 환경 설정 옵션을 변경하면 크기를 바꿀 수 있다). 
   각 세그먼트는 일반적으로 각각 8 kB의 페이지로 분할된다(이 크기는 <option>--with-wal-blocksize</> 환경 설정 옵션을 통해 변경할 수 있다). 
   로그 레코드 헤더는 <filename>access/xlog.h</filename>에 설명되어 있다. 
   레코드 내용은 로깅된 이벤트 유형에 따라 다르다. 세그먼트 파일 이름은 <filename>000000010000000000000000</filename>에서 시작되며 숫자가 계속 증가한다. 
   숫자는 랩(wrap)되지 않지만 가용 숫자 재고가 소진되려면 아주 오래 걸린다.
  </para>

  <para>
   로그가 메인 데이터베이스 파일이 아닌 다른 디스크에 위치한 경우에 이것은 장점이 된다. 
   서버가 종료된 상태에서 <filename>pg_xlog</filename> 디렉토리를 다른 위치로 옮기고, 메인 데이터 디렉토리의 원래 위치로부터 새 위치로 심볼릭 링크를 생성하면 된다.
  </para>

  <para>
   <acronym>WAL</acronym>의 목적은 데이터베이스 레코드가 변경되기 전에 로그가 기록되도록 하는 것이지만, 
   사실은 데이터를 캐싱만하고 디스크에 미처 저장하지 못한 경우 디스크 드라이브<indexterm><primary>disk drive</></>가 커널에 쓰기를 성공했단 내용을 잘못 리포트해 엉망이 될 수 있다. 
   이러한 상황에서 정전이 발생하면 복구 불가능한 데이터 손상이 발생하게 된다. 
   관리자는 <productname>Agens SQL</productname>의 <acronym>WAL</acronym> 로그 파일이 저장되는 디스크가 이런 잘못된 리포트를 하지 않도록 해야 한다. 
   (<xref linkend="wal-reliability"> 참조.)
  </para>

  <para>
   checkpoint가 설정되고 로그가 쓰기된 후 checkpoint의 위치는 <filename>pg_control</filename> 파일에 저장된다. 
   그러므로, 복구 시작 시 서버는 먼저 <filename>pg_control</filename>을 읽은 다음, checkpoint 레코드를 읽는다. 
   그러고 나서 chekcpoint 레코드에 표시된 로그 위치에서 순방향으로 스캔하여 REDO 명령을 수행한다. 
   데이터 페이지의 전체 내용은 checkpoint 이후의 첫 번째 페이지 수정에 대한 로그에 저장되므로
   (full_page_writes는 비활성화되었다고 가정) checkpoint 이후의 모든 페이지 변경은 일관된 상태로 복원된다.
  </para>

  <para>
   <filename>pg_control</filename>가 손상된 경우를 처리하려면 최신 checkpoint를 찾기 위해 역순(가장 최신- 가장 과거 순)으로 기존 로그 세그먼트를 스캐닝 해봐야 한다. 
   이는 아직 구현되지 않았다. 
   <filename>pg_control</filename>은 충분히 작아서(디스크 페이지 1개 미만) partial-write 문제에 해당되지 않으며, 현재까지, <filename>pg_control</filename> 자체가 읽지 못하는 것만으로 데이터베이스 오류가 난 적은 없었다. 
   따라서, 이론적으론 고쳐야 할 부분이지만 <filename>pg_control</filename>이 실제로 문제가 되는 것은 아니다.
  </para>
 </sect1>
</chapter>
