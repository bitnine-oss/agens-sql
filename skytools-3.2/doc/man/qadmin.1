'\" t
.\"     Title: qadmin
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 04/01/2014
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "QADMIN" "1" "04/01/2014" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
qadmin \- Easy to use admin console to examine and administer PgQ queues\&.
.SH "SYNOPSIS"
.sp
.nf
qadmin [options]
.fi
.SH "DESCRIPTION"
.sp
This is a psql\-like console for queue administration\&.
.sp
The console offers a large number of commands to setup, control and manage PgQ queueing system\&.
.sp
It also offers a non\-interactive mode to run one or more commands\&.
.sp
qadmin keeps its history file in the home of the user (~/\&.qadmin_history)\&.
.SH "GENERAL OPTIONS"
.PP
\-\-help
.RS 4
Help screen\&.
.RE
.PP
\-\-version
.RS 4
Print version\&.
.RE
.SH "CONNECTION OPTIONS"
.PP
\-h host
.RS 4
Specify host to connect to (default: localhost via unix socket)\&.
.RE
.PP
\-p port
.RS 4
Specify port\&.
.RE
.PP
\-U user
.RS 4
Specify user name\&.
.RE
.PP
\-d dbname
.RS 4
Database name\&.
.RE
.PP
\-Q queuename
.RS 4
Queue name, it is used as the
default queue
if it is provided\&.
.RE
.SH "SPECIFIC OPTIONS"
.PP
\-c \fIcmd_string\fR
.RS 4
Execute console command\&.
.RE
.PP
\-f \fIexecfile\fR
.RS 4
Execute file containing console commands\&.
.RE
.SH "CONNECTION COMMANDS"
.sp
qadmin offers to connect to other databases or queues from the console itself\&.
.SS "connect <connstring> [queue=<qname>];"
.sp
Connect the console with the specified connection string, optional parameter to set the default queue on connection\&.
.SS "connect [queue=<qname>] [node=<node>];"
.sp
Connect the console to the specified queue and/or node\&.
.SH "MANAGEMENT COMMANDS"
.SS "install pgq | londiste;"
.sp
Install PgQ or Londiste to the connected database\&.
.SS "create queue <qname>;"
.sp
Create the specified queue\&.
.SS "alter queue <qname | *> set param =<foo=1>,<bar=2>;"
.sp
Set one or more parameters on one or all queues at once\&.
.SS "drop queue <qname>;"
.sp
Drop the named queue\&.
.SS "register consumer <consumer> [on <qname> | at <tick_id> | copy <consumer>];"
.sp
Register a consumer on a queue, or at a specified tick or based on another consumer\&.
.SS "unregister consumer <consumer | *> [from <qname>];"
.sp
Unregister one or all consumers, if the console is not connected to a queue, its name must be provided\&.
.SS "register subconsumer <subconsumer> for <consumer> [on <qname>];"
.sp
Register a subconsumer to a consumer, if the console is not connected to a queue, its name must be provided\&.
.SS "unregister subconsumer <subconsumer | *> for <consumer> [from <qname>] [close [batch]];"
.sp
Unregister one or all subconsumers from a consumer, if the console is not connected to a queue, its name must be provided\&. Current batch can be aborted if the close batch subcommand is provided\&.
.SH "SHOW COMMANDS"
.SS "show help;"
.sp
Show all the console commands\&.
.SS "show queue [ <qname | *> ];"
.sp
Show details of one or all queues\&.
.SS "show table <tbl>;"
.sp
Show DDL for the specified table\&.
.SS "show sequence <seq>;"
.sp
Show DDL for the specified sequence\&.
.SS "show consumer [ <consumer | *> [on <qname>] ];"
.sp
Show details of one or all consumers on one or all queues\&.
.SS "show node [ <node | *> [on <qname>] ];"
.sp
Show details of one or all nodes on one or all queues\&.
.SS "show batch <batch_id>;"
.sp
Show details of the batch, default queue must be set (see connect queue)
.SS "show batch <consumer>;"
.sp
Show details of the current batch for the specified consumer, default queue must be set (see connect queue)
.SH "LONDISTE COMMANDS"
.sp
All these commands are applied on the node where the console is connected to\&.
.SS "londiste add table <tbl> [with \&... ]"
.PP
with no_triggers
.RS 4
Skip trigger creation\&.
.RE
.PP
with skip_truncate
.RS 4
Does not truncate the table on the destination\&.
.RE
.PP
with expect_sync
.RS 4
Set table state to
\fIok\fR\&.
.RE
.PP
with tgflags=\fIIUDBAQLS\fR
.RS 4
Trigger creation flags, see below for details\&.
.RE
.PP
with backup
.RS 4
Put urlencoded contents of old row to
ev_extra2\&.
.RE
.PP
with skip
.RS 4
Create skip trigger\&. Same as S flag\&.
.RE
.PP
with when=\fIexpr\fR
.RS 4
If
\fIexpr\fR
returns false, do not insert event\&.
.RE
.PP
with ev_XX=\fIEXPR\fR
.RS 4
Overwrite default ev_* columns (see below)\&.
.RE
.sp
Trigger creation flags (default: AIUDL):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
I \- ON INSERT
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
U \- ON UPDATE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
D \- ON DELETE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Q \- use pgq\&.sqltriga() as trigger function
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
L \- use pgq\&.logutriga() as trigger function
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
B \- BEFORE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A \- AFTER
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
S \- SKIP
.RE
.sp
Queue event fields:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ev_type \- I/U/D
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ev_data \- partial SQL statement
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ev_extra1 \- table name
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ev_extra2 \- optional urlencoded backup
.RE
.SS "londiste add sequence <seq>;"
.sp
Add the specified sequence to Londiste replication\&.
.SS "londiste remove table <tbl> [,tbl];"
.sp
Remove the specified table(s) from the Londiste replication\&.
.SS "londiste remove sequence <seq> [,seq];"
.sp
Remove the specified sequence(s) from the Londiste replication\&.
.SS "londiste tables;"
.sp
List registered tables and informations about them:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
table_name \- fully\-qualified table name
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
local \- does events needs to be applied to local table
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
merge_state \- show phase of initial copy
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
custom_snapshot \- remote snapshot of COPY transaction
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
table_attrs \- urlencoded dict of table attributes
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
dropped_ddl \- partition combining: temp place to put DDL
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
copy_role \- partition combining: how to handle copy
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
copy_pos \- position in parallel copy working order
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcopy_role = lead\fR
.RS 4
.sp
On copy start, drop indexes and store in dropped_ddl\&.
.sp
On copy finish change state to catching\-up, then wait until copy_role turns to NULL\&.
.sp
Catching\-up: if dropped_ddl is not NULL, restore them\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcopy_role = wait-copy\fR
.RS 4
.sp
On copy start, wait until role changes (to wait\-replay)\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcopy_role = wait-replay\fR
.RS 4
.sp
On copy finish, tag as \fIcatching\-up\fR\&.
.sp
Wait until copy_role is NULL, then proceed\&.
.RE
.SS "londiste seqs;"
.sp
List registered sequences on this node and their last value\&.
.SS "londiste missing;"
.sp
On Master, list tables not registered on set\&.
.sp
On Slave, list tables on set but not registered locally\&.
.SH "OTHER COMMANDS"
.SS "exit;"
.sp
Quit program\&.
.SS "^D"
.sp
Quit program\&.
.SS "^C"
.sp
Clear current buffer\&.
.SH "EXIT STATUS"
.PP
0
.RS 4
Successful program execution\&.
.RE
.SH "ENVIRONMENT"
.sp
PostgreSQL environment variables can be used\&.
.SH "NOT IMPLEMENTED COMMANDS"
.sp
TODO : is it up\-to\-date ?
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
create <root | branch | leaf> node <node> location <loc> [on <qname>];
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
alter node <name> provider <new>;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
alter node <name> takeover <oldnow> with all;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
alter node <name> rename <new>;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
alter node <name> [location=<loc>]
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
drop node <name> [on <qname>];
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
takeover <oldnode>;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
show cascade;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
show_queue_stats <q>;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
status
.RE
